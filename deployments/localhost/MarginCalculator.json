{
  "address": "0x68B1D87F95878fE05B998F19b66F4baba5De1aed",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "CollateralCapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dust",
          "type": "uint256"
        }
      ],
      "name": "CollateralDustUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "productHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeToExpiry",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "MaxPriceAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "productHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeToExpiry",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "MaxPriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oracleDeviation",
          "type": "uint256"
        }
      ],
      "name": "OracleDeviationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "product",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spotShock",
          "type": "uint256"
        }
      ],
      "name": "SpotShockUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "productHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeToExpiry",
          "type": "uint256"
        }
      ],
      "name": "TimeToExpiryAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUCTION_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "getCollateralCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        }
      ],
      "name": "getCollateralDust",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "shortOtokens",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "longOtokens",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "collateralAssets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "shortAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "longAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "collateralAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct MarginVault.Vault",
          "name": "_vault",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_vaultType",
          "type": "uint256"
        }
      ],
      "name": "getExcessCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_otoken",
          "type": "address"
        }
      ],
      "name": "getExpiredPayoutRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "shortOtokens",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "longOtokens",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "collateralAssets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "shortAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "longAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "collateralAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct MarginVault.Vault",
          "name": "_vault",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_vaultType",
          "type": "uint256"
        }
      ],
      "name": "getMarginRequired",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "value",
              "type": "int256"
            }
          ],
          "internalType": "struct FixedPointInt256.FixedPointInt",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "value",
              "type": "int256"
            }
          ],
          "internalType": "struct FixedPointInt256.FixedPointInt",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strike",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isPut",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_timeToExpiry",
          "type": "uint256"
        }
      ],
      "name": "getMaxPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strike",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_shortAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_underlyingPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_shortExpiryTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collateralDecimals",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isPut",
          "type": "bool"
        }
      ],
      "name": "getNakedMarginRequired",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOracleDeviation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strike",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isPut",
          "type": "bool"
        }
      ],
      "name": "getSpotShock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strike",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isPut",
          "type": "bool"
        }
      ],
      "name": "getTimesToExpiry",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "shortOtokens",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "longOtokens",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "collateralAssets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "shortAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "longAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "collateralAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct MarginVault.Vault",
          "name": "_vault",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_vaultType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vaultLatestUpdate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_roundId",
          "type": "uint256"
        }
      ],
      "name": "isLiquidatable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract OracleInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_cap",
          "type": "uint256"
        }
      ],
      "name": "setCollateralCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_dust",
          "type": "uint256"
        }
      ],
      "name": "setCollateralDust",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deviation",
          "type": "uint256"
        }
      ],
      "name": "setOracleDeviation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strike",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isPut",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_shockValue",
          "type": "uint256"
        }
      ],
      "name": "setSpotShock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strike",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isPut",
          "type": "bool"
        },
        {
          "internalType": "uint256[]",
          "name": "_timesToExpiry",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        }
      ],
      "name": "setUpperBoundValues",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strike",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isPut",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_timeToExpiry",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "updateUpperBoundValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4bbb1a22e9fe9a788fc39f034adcb18df71e29b62ba16bd3b0518bf4fc475a71",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x68B1D87F95878fE05B998F19b66F4baba5De1aed",
    "transactionIndex": 0,
    "gasUsed": "3830943",
    "logsBloom": "0x
    "blockHash": "0xdf0c774f0c6ad2859be39941c741616fb9f61a76c7439bb7dc4a6f0f050b8aed",
    "transactionHash": "0x4bbb1a22e9fe9a788fc39f034adcb18df71e29b62ba16bd3b0518bf4fc475a71",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 19,
        "transactionHash": "0x4bbb1a22e9fe9a788fc39f034adcb18df71e29b62ba16bd3b0518bf4fc475a71",
        "address": "0x68B1D87F95878fE05B998F19b66F4baba5De1aed",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xdf0c774f0c6ad2859be39941c741616fb9f61a76c7439bb7dc4a6f0f050b8aed"
      }
    ],
    "blockNumber": 19,
    "cumulativeGasUsed": "3830943",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853"
  ],
  "solcInputHash": "afe0a13fb4545fb36ed029d51d030119",
  "metadata": "{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"CollateralCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dust\",\"type\":\"uint256\"}],\"name\":\"CollateralDustUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"productHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeToExpiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MaxPriceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"productHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeToExpiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MaxPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oracleDeviation\",\"type\":\"uint256\"}],\"name\":\"OracleDeviationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"product\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spotShock\",\"type\":\"uint256\"}],\"name\":\"SpotShockUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"productHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeToExpiry\",\"type\":\"uint256\"}],\"name\":\"TimeToExpiryAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUCTION_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"getCollateralCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"}],\"name\":\"getCollateralDust\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"shortOtokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"longOtokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"collateralAssets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shortAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"longAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"collateralAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct MarginVault.Vault\",\"name\":\"_vault\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_vaultType\",\"type\":\"uint256\"}],\"name\":\"getExcessCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_otoken\",\"type\":\"address\"}],\"name\":\"getExpiredPayoutRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"shortOtokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"longOtokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"collateralAssets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shortAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"longAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"collateralAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct MarginVault.Vault\",\"name\":\"_vault\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_vaultType\",\"type\":\"uint256\"}],\"name\":\"getMarginRequired\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"internalType\":\"struct FixedPointInt256.FixedPointInt\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"internalType\":\"struct FixedPointInt256.FixedPointInt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strike\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isPut\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_timeToExpiry\",\"type\":\"uint256\"}],\"name\":\"getMaxPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strike\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shortAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_strikePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_underlyingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shortExpiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDecimals\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isPut\",\"type\":\"bool\"}],\"name\":\"getNakedMarginRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracleDeviation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strike\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isPut\",\"type\":\"bool\"}],\"name\":\"getSpotShock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strike\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isPut\",\"type\":\"bool\"}],\"name\":\"getTimesToExpiry\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"shortOtokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"longOtokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"collateralAssets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shortAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"longAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"collateralAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct MarginVault.Vault\",\"name\":\"_vault\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_vaultType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vaultLatestUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"isLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract OracleInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setCollateralCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dust\",\"type\":\"uint256\"}],\"name\":\"setCollateralDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deviation\",\"type\":\"uint256\"}],\"name\":\"setOracleDeviation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strike\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isPut\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_shockValue\",\"type\":\"uint256\"}],\"name\":\"setSpotShock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strike\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isPut\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"_timesToExpiry\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"setUpperBoundValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strike\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isPut\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_timeToExpiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateUpperBoundValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Opyn\",\"methods\":{\"constructor\":{\"params\":{\"_oracle\":\"oracle module address\"}},\"getCollateralCap(address)\":{\"params\":{\"_collateral\":\"collateral asset address\"},\"returns\":{\"_0\":\"cap amount\"}},\"getCollateralDust(address)\":{\"params\":{\"_collateral\":\"collateral asset address\"},\"returns\":{\"_0\":\"dust amount\"}},\"getExcessCollateral((address[],address[],address[],uint256[],uint256[],uint256[]),uint256)\":{\"details\":\"return amount is denominated in the collateral asset for the oToken in the vault, or the collateral asset in the vault\",\"params\":{\"_vault\":\"theoretical vault that needs to be checked\",\"_vaultType\":\"vault type (0 for spread/max loss, 1 for naked margin)\"},\"returns\":{\"_0\":\"excessCollateral the amount by which the margin is above or below the required amount\",\"_1\":\"isExcess True if there is excess margin in the vault, False if there is a deficit of margin in the vault if True, collateral can be taken out from the vault, if False, additional collateral needs to be added to vault\"}},\"getExpiredPayoutRate(address)\":{\"params\":{\"_otoken\":\"oToken address\"},\"returns\":{\"_0\":\"how much collateral can be taken out by 1 otoken unit, scaled by 1e8, or how much collateral can be taken out for 1 (1e8) oToken\"}},\"getMarginRequired((address[],address[],address[],uint256[],uint256[],uint256[]),uint256)\":{\"params\":{\"_vault\":\"theoretical vault that needs to be checked\",\"_vaultType\":\"vault type\"},\"returns\":{\"_0\":\"the vault collateral amount, and marginRequired the minimal amount of collateral needed in a vault, scaled to 1e27\"}},\"getMaxPrice(address,address,address,bool,uint256)\":{\"params\":{\"_collateral\":\"otoken collateral asset\",\"_isPut\":\"otoken type\",\"_strike\":\"otoken strike asset\",\"_timeToExpiry\":\"option time to expiry timestamp\",\"_underlying\":\"otoken underlying asset\"},\"returns\":{\"_0\":\"option upper bound value (1e27)\"}},\"getNakedMarginRequired(address,address,address,uint256,uint256,uint256,uint256,uint256,bool)\":{\"details\":\"_shortAmount, _strikePrice and _underlyingPrice should be scaled by 1e8\",\"params\":{\"_collateral\":\"collateral asset address\",\"_collateralDecimals\":\"otoken collateral asset decimals\",\"_isPut\":\"otoken type\",\"_shortAmount\":\"amount of short otoken\",\"_shortExpiryTimestamp\":\"otoken expiry timestamp\",\"_strike\":\"strike asset address\",\"_strikePrice\":\"otoken strike price\",\"_underlying\":\"underlying asset address\",\"_underlyingPrice\":\"otoken underlying price\"},\"returns\":{\"_0\":\"collateral required for a naked margin vault, in collateral asset decimals\"}},\"getOracleDeviation()\":{\"returns\":{\"_0\":\"oracle deviation value (1e27)\"}},\"getSpotShock(address,address,address,bool)\":{\"params\":{\"_collateral\":\"otoken collateral asset\",\"_isPut\":\"otoken type\",\"_strike\":\"otoken strike asset\",\"_underlying\":\"otoken underlying asset\"},\"returns\":{\"_0\":\"_shockValue spot shock value (1e27)\"}},\"getTimesToExpiry(address,address,address,bool)\":{\"params\":{\"_collateral\":\"otoken collateral asset\",\"_isPut\":\"otoken type\",\"_strike\":\"otoken strike asset\",\"_underlying\":\"otoken underlying asset\"},\"returns\":{\"_0\":\"array of times to expiry\"}},\"isLiquidatable((address[],address[],address[],uint256[],uint256[],uint256[]),uint256,uint256,uint256)\":{\"details\":\"if the vault is of type 0, the function will revert\",\"params\":{\"_roundId\":\"chainlink round id\",\"_vault\":\"vault struct\",\"_vaultLatestUpdate\":\"vault latest update (timestamp when latest vault state change happened)\",\"_vaultType\":\"vault type (0 for max loss/spread and 1 for naked margin vault)\"},\"returns\":{\"_0\":\"isLiquidatable, true if vault is undercollateralized, liquidation price and collateral dust amount\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCollateralCap(address,uint256)\":{\"details\":\"can only be called by owner\",\"params\":{\"_cap\":\"cap amount, should be scaled by collateral asset decimals\",\"_collateral\":\"collateral asset address\"}},\"setCollateralDust(address,uint256)\":{\"details\":\"can only be called by owner\",\"params\":{\"_collateral\":\"collateral asset address\",\"_dust\":\"dust amount, should be scaled by collateral asset decimals\"}},\"setOracleDeviation(uint256)\":{\"details\":\"can only be called by owner\",\"params\":{\"_deviation\":\"deviation value\"}},\"setSpotShock(address,address,address,bool,uint256)\":{\"details\":\"can only be called by owner\",\"params\":{\"_collateral\":\"otoken collateral asset\",\"_isPut\":\"otoken type\",\"_shockValue\":\"spot shock value\",\"_strike\":\"otoken strike asset\",\"_underlying\":\"otoken underlying asset\"}},\"setUpperBoundValues(address,address,address,bool,uint256[],uint256[])\":{\"details\":\"can only be called by owner\",\"params\":{\"_collateral\":\"otoken collateral asset\",\"_isPut\":\"otoken type\",\"_strike\":\"otoken strike asset\",\"_timesToExpiry\":\"array of times to expiry timestamp\",\"_underlying\":\"otoken underlying asset\",\"_values\":\"upper bound values array\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateUpperBoundValue(address,address,address,bool,uint256,uint256)\":{\"details\":\"can only be called by owner\",\"params\":{\"_collateral\":\"otoken collateral asset\",\"_isPut\":\"otoken type\",\"_strike\":\"otoken strike asset\",\"_timeToExpiry\":\"option time to expiry timestamp\",\"_underlying\":\"otoken underlying asset\",\"_value\":\"upper bound value\"}}},\"stateVariables\":{\"BASE\":{\"details\":\"decimals used by strike price and oracle price\"},\"SCALING_FACTOR\":{\"details\":\"decimals option upper bound value, spot shock and oracle deviation\"},\"ZERO\":{\"details\":\"FixedPoint 0\"},\"cap\":{\"details\":\"mapping to store cap amount per options collateral asset (scaled by collateral asset decimals)\"},\"dust\":{\"details\":\"mapping to store dust amount per option collateral asset (scaled by collateral asset decimals)\"},\"maxPriceAtTimeToExpiry\":{\"details\":\"mapping to store option upper bound value at specific time to expiry for a given product (1e27)\"},\"oracle\":{\"details\":\"oracle module\"},\"oracleDeviation\":{\"details\":\"oracle deviation value (1e27)\"},\"spotShock\":{\"details\":\"mapping to store shock value for spot price of a given product (1e27)\"},\"timesToExpiryForProduct\":{\"details\":\"mapping to store array of time to expiry for a given product\"}},\"title\":\"MarginCalculator\"},\"userdoc\":{\"methods\":{\"AUCTION_TIME()\":{\"notice\":\"auction length\"},\"constructor\":\"constructor\",\"getCollateralCap(address)\":{\"notice\":\"get cap amount for collateral asset\"},\"getCollateralDust(address)\":{\"notice\":\"get dust amount for collateral asset\"},\"getExcessCollateral((address[],address[],address[],uint256[],uint256[],uint256[]),uint256)\":{\"notice\":\"returns the amount of collateral that can be removed from an actual or a theoretical vault\"},\"getExpiredPayoutRate(address)\":{\"notice\":\"return the cash value of an expired oToken, denominated in collateral\"},\"getMarginRequired((address[],address[],address[],uint256[],uint256[],uint256[]),uint256)\":{\"notice\":\"calculate required collateral margin for a vault\"},\"getMaxPrice(address,address,address,bool,uint256)\":{\"notice\":\"get option upper bound value for specific time to expiry\"},\"getNakedMarginRequired(address,address,address,uint256,uint256,uint256,uint256,uint256,bool)\":{\"notice\":\"return the collateral required for naked margin vault, in collateral asset decimals\"},\"getOracleDeviation()\":{\"notice\":\"get oracle deviation\"},\"getSpotShock(address,address,address,bool)\":{\"notice\":\"get spot shock value\"},\"getTimesToExpiry(address,address,address,bool)\":{\"notice\":\"get times to expiry for a specific product\"},\"isLiquidatable((address[],address[],address[],uint256[],uint256[],uint256[]),uint256,uint256,uint256)\":{\"notice\":\"check if a specific vault is undercollateralized at a specific chainlink round\"},\"setCollateralCap(address,uint256)\":{\"notice\":\"set cap amount for collateral asset used in naked margin\"},\"setCollateralDust(address,uint256)\":{\"notice\":\"set dust amount for collateral asset\"},\"setOracleDeviation(uint256)\":{\"notice\":\"set oracle deviation (1e27)\"},\"setSpotShock(address,address,address,bool,uint256)\":{\"notice\":\"set spot shock value, scaled to 1e27\"},\"setUpperBoundValues(address,address,address,bool,uint256[],uint256[])\":{\"notice\":\"set product upper bound values\"},\"updateUpperBoundValue(address,address,address,bool,uint256,uint256)\":{\"notice\":\"set option upper bound value for specific time to expiry (1e27)\"}},\"notice\":\"Calculator module that checks if a given vault is valid, calculates margin requirements, and settlement proceeds\"}},\"settings\":{\"compilationTarget\":{\"contracts/GammaProtocol/core/MarginCalculator.sol\":\"MarginCalculator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/GammaProtocol/core/MarginCalculator.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity =0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"../packages/oz/SafeMath.sol\\\";\\nimport {Ownable} from \\\"../packages/oz/Ownable.sol\\\";\\nimport {OtokenInterface} from \\\"../interfaces/OtokenInterface.sol\\\";\\nimport {OracleInterface} from \\\"../interfaces/OracleInterface.sol\\\";\\nimport {ERC20Interface} from \\\"../interfaces/ERC20Interface.sol\\\";\\nimport {FixedPointInt256 as FPI} from \\\"../libs/FixedPointInt256.sol\\\";\\nimport {MarginVault} from \\\"../libs/MarginVault.sol\\\";\\n\\n/**\\n * @title MarginCalculator\\n * @author Opyn\\n * @notice Calculator module that checks if a given vault is valid, calculates margin requirements, and settlement proceeds\\n */\\ncontract MarginCalculator is Ownable {\\n    using SafeMath for uint256;\\n    using FPI for FPI.FixedPointInt;\\n\\n    /// @dev decimals option upper bound value, spot shock and oracle deviation\\n    uint256 internal constant SCALING_FACTOR = 27;\\n\\n    /// @dev decimals used by strike price and oracle price\\n    uint256 internal constant BASE = 8;\\n\\n    /// @notice auction length\\n    uint256 public constant AUCTION_TIME = 3600;\\n\\n    /// @dev struct to store all needed vault details\\n    struct VaultDetails {\\n        address shortUnderlyingAsset;\\n        address shortStrikeAsset;\\n        address shortCollateralAsset;\\n        address longUnderlyingAsset;\\n        address longStrikeAsset;\\n        address longCollateralAsset;\\n        uint256 shortStrikePrice;\\n        uint256 shortExpiryTimestamp;\\n        uint256 shortCollateralDecimals;\\n        uint256 longStrikePrice;\\n        uint256 longExpiryTimestamp;\\n        uint256 longCollateralDecimals;\\n        uint256 collateralDecimals;\\n        uint256 vaultType;\\n        bool isShortPut;\\n        bool isLongPut;\\n        bool hasLong;\\n        bool hasShort;\\n        bool hasCollateral;\\n    }\\n\\n    /// @dev oracle deviation value (1e27)\\n    uint256 internal oracleDeviation;\\n\\n    /// @dev FixedPoint 0\\n    FPI.FixedPointInt internal ZERO = FPI.fromScaledUint(0, BASE);\\n\\n    /// @dev mapping to store dust amount per option collateral asset (scaled by collateral asset decimals)\\n    mapping(address => uint256) internal dust;\\n\\n    /// @dev mapping to store cap amount per options collateral asset (scaled by collateral asset decimals)\\n    mapping(address => uint256) internal cap;\\n\\n    /// @dev mapping to store array of time to expiry for a given product\\n    mapping(bytes32 => uint256[]) internal timesToExpiryForProduct;\\n\\n    /// @dev mapping to store option upper bound value at specific time to expiry for a given product (1e27)\\n    mapping(bytes32 => mapping(uint256 => uint256)) internal maxPriceAtTimeToExpiry;\\n\\n    /// @dev mapping to store shock value for spot price of a given product (1e27)\\n    mapping(bytes32 => uint256) internal spotShock;\\n\\n    /// @dev oracle module\\n    OracleInterface public oracle;\\n\\n    /// @notice emits an event when collateral dust is updated\\n    event CollateralDustUpdated(address indexed collateral, uint256 dust);\\n    /// @notice emits an event when collateral cap is updated\\n    event CollateralCapUpdated(address indexed collateral, uint256 cap);\\n    /// @notice emits an event when new time to expiry is added for a specific product\\n    event TimeToExpiryAdded(bytes32 indexed productHash, uint256 timeToExpiry);\\n    /// @notice emits an event when new upper bound value is added for a specific time to expiry timestamp\\n    event MaxPriceAdded(bytes32 indexed productHash, uint256 timeToExpiry, uint256 value);\\n    /// @notice emits an event when updating upper bound value at specific expiry timestamp\\n    event MaxPriceUpdated(bytes32 indexed productHash, uint256 timeToExpiry, uint256 oldValue, uint256 newValue);\\n    /// @notice emits an event when spot shock value is updated for a specific product\\n    event SpotShockUpdated(bytes32 indexed product, uint256 spotShock);\\n    /// @notice emits an event when oracle deviation value is updated\\n    event OracleDeviationUpdated(uint256 oracleDeviation);\\n\\n    /**\\n     * @notice constructor\\n     * @param _oracle oracle module address\\n     */\\n    constructor(address _oracle) public {\\n        require(_oracle != address(0), \\\"MarginCalculator: invalid oracle address\\\");\\n\\n        oracle = OracleInterface(_oracle);\\n    }\\n\\n    /**\\n     * @notice set dust amount for collateral asset\\n     * @dev can only be called by owner\\n     * @param _collateral collateral asset address\\n     * @param _dust dust amount, should be scaled by collateral asset decimals\\n     */\\n    function setCollateralDust(address _collateral, uint256 _dust) external onlyOwner {\\n        require(_dust > 0, \\\"MarginCalculator: dust amount should be greater than zero\\\");\\n\\n        dust[_collateral] = _dust;\\n\\n        emit CollateralDustUpdated(_collateral, _dust);\\n    }\\n\\n    /**\\n     * @notice set cap amount for collateral asset used in naked margin\\n     * @dev can only be called by owner\\n     * @param _collateral collateral asset address\\n     * @param _cap cap amount, should be scaled by collateral asset decimals\\n     */\\n    function setCollateralCap(address _collateral, uint256 _cap) external onlyOwner {\\n        require(_cap > 0, \\\"MarginCalculator: cap amount should be greater than zero\\\");\\n\\n        cap[_collateral] = _cap;\\n\\n        emit CollateralCapUpdated(_collateral, _cap);\\n    }\\n\\n    /**\\n     * @notice set product upper bound values\\n     * @dev can only be called by owner\\n     * @param _underlying otoken underlying asset\\n     * @param _strike otoken strike asset\\n     * @param _collateral otoken collateral asset\\n     * @param _isPut otoken type\\n     * @param _timesToExpiry array of times to expiry timestamp\\n     * @param _values upper bound values array\\n     */\\n    function setUpperBoundValues(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        bool _isPut,\\n        uint256[] calldata _timesToExpiry,\\n        uint256[] calldata _values\\n    ) external onlyOwner {\\n        require(_timesToExpiry.length > 0, \\\"MarginCalculator: invalid times to expiry array\\\");\\n        require(_timesToExpiry.length == _values.length, \\\"MarginCalculator: invalid values array\\\");\\n\\n        // get product hash\\n        bytes32 productHash = _getProductHash(_underlying, _strike, _collateral, _isPut);\\n\\n        uint256[] storage expiryArray = timesToExpiryForProduct[productHash];\\n\\n        // check that this is the first expiry to set\\n        // if not, the last expiry should be less than the new one to insert (to make sure the array stay in order)\\n        require(\\n            (expiryArray.length == 0) || (_timesToExpiry[0] > expiryArray[expiryArray.length.sub(1)]),\\n            \\\"MarginCalculator: expiry array is not in order\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _timesToExpiry.length; i++) {\\n            // check that new times array is in order\\n            if (i.add(1) < _timesToExpiry.length) {\\n                require(_timesToExpiry[i] < _timesToExpiry[i.add(1)], \\\"MarginCalculator: time should be in order\\\");\\n            }\\n\\n            require(_values[i] > 0, \\\"MarginCalculator: no expiry upper bound value found\\\");\\n\\n            // add new upper bound value for this product at specific time to expiry\\n            maxPriceAtTimeToExpiry[productHash][_timesToExpiry[i]] = _values[i];\\n\\n            // add new time to expiry to array\\n            expiryArray.push(_timesToExpiry[i]);\\n\\n            emit TimeToExpiryAdded(productHash, _timesToExpiry[i]);\\n            emit MaxPriceAdded(productHash, _timesToExpiry[i], _values[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice set option upper bound value for specific time to expiry (1e27)\\n     * @dev can only be called by owner\\n     * @param _underlying otoken underlying asset\\n     * @param _strike otoken strike asset\\n     * @param _collateral otoken collateral asset\\n     * @param _isPut otoken type\\n     * @param _timeToExpiry option time to expiry timestamp\\n     * @param _value upper bound value\\n     */\\n    function updateUpperBoundValue(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        bool _isPut,\\n        uint256 _timeToExpiry,\\n        uint256 _value\\n    ) external onlyOwner {\\n        require(_value > 0, \\\"MarginCalculator: invalid option upper bound value\\\");\\n\\n        bytes32 productHash = _getProductHash(_underlying, _strike, _collateral, _isPut);\\n        uint256 oldMaxPrice = maxPriceAtTimeToExpiry[productHash][_timeToExpiry];\\n\\n        require(oldMaxPrice != 0, \\\"MarginCalculator: upper bound value not found\\\");\\n\\n        // update upper bound value for the time to expiry\\n        maxPriceAtTimeToExpiry[productHash][_timeToExpiry] = _value;\\n\\n        emit MaxPriceUpdated(productHash, _timeToExpiry, oldMaxPrice, _value);\\n    }\\n\\n    /**\\n     * @notice set spot shock value, scaled to 1e27\\n     * @dev can only be called by owner\\n     * @param _underlying otoken underlying asset\\n     * @param _strike otoken strike asset\\n     * @param _collateral otoken collateral asset\\n     * @param _isPut otoken type\\n     * @param _shockValue spot shock value\\n     */\\n    function setSpotShock(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        bool _isPut,\\n        uint256 _shockValue\\n    ) external onlyOwner {\\n        require(_shockValue > 0, \\\"MarginCalculator: invalid spot shock value\\\");\\n\\n        bytes32 productHash = _getProductHash(_underlying, _strike, _collateral, _isPut);\\n\\n        spotShock[productHash] = _shockValue;\\n\\n        emit SpotShockUpdated(productHash, _shockValue);\\n    }\\n\\n    /**\\n     * @notice set oracle deviation (1e27)\\n     * @dev can only be called by owner\\n     * @param _deviation deviation value\\n     */\\n    function setOracleDeviation(uint256 _deviation) external onlyOwner {\\n        oracleDeviation = _deviation;\\n\\n        emit OracleDeviationUpdated(_deviation);\\n    }\\n\\n    /**\\n     * @notice get dust amount for collateral asset\\n     * @param _collateral collateral asset address\\n     * @return dust amount\\n     */\\n    function getCollateralDust(address _collateral) external view returns (uint256) {\\n        return dust[_collateral];\\n    }\\n\\n    /**\\n     * @notice get cap amount for collateral asset\\n     * @param _collateral collateral asset address\\n     * @return cap amount\\n     */\\n    function getCollateralCap(address _collateral) external view returns (uint256) {\\n        return cap[_collateral];\\n    }\\n\\n    /**\\n     * @notice get times to expiry for a specific product\\n     * @param _underlying otoken underlying asset\\n     * @param _strike otoken strike asset\\n     * @param _collateral otoken collateral asset\\n     * @param _isPut otoken type\\n     * @return array of times to expiry\\n     */\\n    function getTimesToExpiry(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        bool _isPut\\n    ) external view returns (uint256[] memory) {\\n        bytes32 productHash = _getProductHash(_underlying, _strike, _collateral, _isPut);\\n        return timesToExpiryForProduct[productHash];\\n    }\\n\\n    /**\\n     * @notice get option upper bound value for specific time to expiry\\n     * @param _underlying otoken underlying asset\\n     * @param _strike otoken strike asset\\n     * @param _collateral otoken collateral asset\\n     * @param _isPut otoken type\\n     * @param _timeToExpiry option time to expiry timestamp\\n     * @return option upper bound value (1e27)\\n     */\\n    function getMaxPrice(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        bool _isPut,\\n        uint256 _timeToExpiry\\n    ) external view returns (uint256) {\\n        bytes32 productHash = _getProductHash(_underlying, _strike, _collateral, _isPut);\\n\\n        return maxPriceAtTimeToExpiry[productHash][_timeToExpiry];\\n    }\\n\\n    /**\\n     * @notice get spot shock value\\n     * @param _underlying otoken underlying asset\\n     * @param _strike otoken strike asset\\n     * @param _collateral otoken collateral asset\\n     * @param _isPut otoken type\\n     * @return _shockValue spot shock value (1e27)\\n     */\\n    function getSpotShock(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        bool _isPut\\n    ) external view returns (uint256) {\\n        bytes32 productHash = _getProductHash(_underlying, _strike, _collateral, _isPut);\\n\\n        return spotShock[productHash];\\n    }\\n\\n    /**\\n     * @notice get oracle deviation\\n     * @return oracle deviation value (1e27)\\n     */\\n    function getOracleDeviation() external view returns (uint256) {\\n        return oracleDeviation;\\n    }\\n\\n    /**\\n     * @notice return the collateral required for naked margin vault, in collateral asset decimals\\n     * @dev _shortAmount, _strikePrice and _underlyingPrice should be scaled by 1e8\\n     * @param _underlying underlying asset address\\n     * @param _strike strike asset address\\n     * @param _collateral collateral asset address\\n     * @param _shortAmount amount of short otoken\\n     * @param  _strikePrice otoken strike price\\n     * @param _underlyingPrice otoken underlying price\\n     * @param _shortExpiryTimestamp otoken expiry timestamp\\n     * @param _collateralDecimals otoken collateral asset decimals\\n     * @param _isPut otoken type\\n     * @return collateral required for a naked margin vault, in collateral asset decimals\\n     */\\n    function getNakedMarginRequired(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        uint256 _shortAmount,\\n        uint256 _strikePrice,\\n        uint256 _underlyingPrice,\\n        uint256 _shortExpiryTimestamp,\\n        uint256 _collateralDecimals,\\n        bool _isPut\\n    ) external view returns (uint256) {\\n        bytes32 productHash = _getProductHash(_underlying, _strike, _collateral, _isPut);\\n\\n        // scale short amount from 1e8 to 1e27 (oToken is always in 1e8)\\n        FPI.FixedPointInt memory shortAmount = FPI.fromScaledUint(_shortAmount, BASE);\\n        // scale short strike from 1e8 to 1e27\\n        FPI.FixedPointInt memory shortStrike = FPI.fromScaledUint(_strikePrice, BASE);\\n        // scale short underlying price from 1e8 to 1e27\\n        FPI.FixedPointInt memory shortUnderlyingPrice = FPI.fromScaledUint(_underlyingPrice, BASE);\\n\\n        // return required margin, scaled by collateral asset decimals, explicitly rounded up\\n        return\\n            FPI.toScaledUint(\\n                _getNakedMarginRequired(\\n                    productHash,\\n                    shortAmount,\\n                    shortUnderlyingPrice,\\n                    shortStrike,\\n                    _shortExpiryTimestamp,\\n                    _isPut\\n                ),\\n                _collateralDecimals,\\n                false\\n            );\\n    }\\n\\n    /**\\n     * @notice return the cash value of an expired oToken, denominated in collateral\\n     * @param _otoken oToken address\\n     * @return how much collateral can be taken out by 1 otoken unit, scaled by 1e8,\\n     * or how much collateral can be taken out for 1 (1e8) oToken\\n     */\\n    function getExpiredPayoutRate(address _otoken) external view returns (uint256) {\\n        require(_otoken != address(0), \\\"MarginCalculator: Invalid token address\\\");\\n\\n        OtokenInterface otoken = OtokenInterface(_otoken);\\n\\n        (\\n            address collateral,\\n            address underlying,\\n            address strikeAsset,\\n            uint256 strikePrice,\\n            uint256 expiry,\\n            bool isPut\\n        ) = otoken.getOtokenDetails();\\n\\n        require(now >= expiry, \\\"MarginCalculator: Otoken not expired yet\\\");\\n\\n        FPI.FixedPointInt memory cashValueInStrike = _getExpiredCashValue(\\n            underlying,\\n            strikeAsset,\\n            expiry,\\n            strikePrice,\\n            isPut\\n        );\\n\\n        FPI.FixedPointInt memory cashValueInCollateral = _convertAmountOnExpiryPrice(\\n            cashValueInStrike,\\n            strikeAsset,\\n            collateral,\\n            expiry\\n        );\\n\\n        // the exchangeRate was scaled by 1e8, if 1e8 otoken can take out 1 USDC, the exchangeRate is currently 1e8\\n        // we want to return: how much USDC units can be taken out by 1 (1e8 units) oToken\\n        uint256 collateralDecimals = uint256(ERC20Interface(collateral).decimals());\\n        return cashValueInCollateral.toScaledUint(collateralDecimals, true);\\n    }\\n\\n    // structs to avoid stack too deep error\\n    // struct to store shortAmount, shortStrike and shortUnderlyingPrice scaled to 1e27\\n    struct ShortScaledDetails {\\n        FPI.FixedPointInt shortAmount;\\n        FPI.FixedPointInt shortStrike;\\n        FPI.FixedPointInt shortUnderlyingPrice;\\n    }\\n\\n    /**\\n     * @notice check if a specific vault is undercollateralized at a specific chainlink round\\n     * @dev if the vault is of type 0, the function will revert\\n     * @param _vault vault struct\\n     * @param _vaultType vault type (0 for max loss/spread and 1 for naked margin vault)\\n     * @param _vaultLatestUpdate vault latest update (timestamp when latest vault state change happened)\\n     * @param _roundId chainlink round id\\n     * @return isLiquidatable, true if vault is undercollateralized, liquidation price and collateral dust amount\\n     */\\n    function isLiquidatable(\\n        MarginVault.Vault memory _vault,\\n        uint256 _vaultType,\\n        uint256 _vaultLatestUpdate,\\n        uint256 _roundId\\n    )\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        // liquidation is only supported for naked margin vault\\n        require(_vaultType == 1, \\\"MarginCalculator: invalid vault type to liquidate\\\");\\n\\n        VaultDetails memory vaultDetails = _getVaultDetails(_vault, _vaultType);\\n\\n        // can not liquidate vault that have no short position\\n        if (!vaultDetails.hasShort) return (false, 0, 0);\\n\\n        require(now < vaultDetails.shortExpiryTimestamp, \\\"MarginCalculator: can not liquidate expired position\\\");\\n\\n        (uint256 price, uint256 timestamp) = oracle.getChainlinkRoundData(\\n            vaultDetails.shortUnderlyingAsset,\\n            uint80(_roundId)\\n        );\\n\\n        // check that price timestamp is after latest timestamp the vault was updated at\\n        require(\\n            timestamp > _vaultLatestUpdate,\\n            \\\"MarginCalculator: auction timestamp should be post vault latest update\\\"\\n        );\\n\\n        // another struct to store some useful short otoken details, to avoid stack to deep error\\n        ShortScaledDetails memory shortDetails = ShortScaledDetails({\\n            shortAmount: FPI.fromScaledUint(_vault.shortAmounts[0], BASE),\\n            shortStrike: FPI.fromScaledUint(vaultDetails.shortStrikePrice, BASE),\\n            shortUnderlyingPrice: FPI.fromScaledUint(price, BASE)\\n        });\\n\\n        bytes32 productHash = _getProductHash(\\n            vaultDetails.shortUnderlyingAsset,\\n            vaultDetails.shortStrikeAsset,\\n            vaultDetails.shortCollateralAsset,\\n            vaultDetails.isShortPut\\n        );\\n\\n        // convert vault collateral to a fixed point (1e27) from collateral decimals\\n        FPI.FixedPointInt memory depositedCollateral = FPI.fromScaledUint(\\n            _vault.collateralAmounts[0],\\n            vaultDetails.collateralDecimals\\n        );\\n\\n        FPI.FixedPointInt memory collateralRequired = _getNakedMarginRequired(\\n            productHash,\\n            shortDetails.shortAmount,\\n            shortDetails.shortUnderlyingPrice,\\n            shortDetails.shortStrike,\\n            vaultDetails.shortExpiryTimestamp,\\n            vaultDetails.isShortPut\\n        );\\n\\n        // if collateral required <= collateral in the vault, the vault is not liquidatable\\n        if (collateralRequired.isLessThanOrEqual(depositedCollateral)) {\\n            return (false, 0, 0);\\n        }\\n\\n        FPI.FixedPointInt memory cashValue = _getCashValue(\\n            shortDetails.shortStrike,\\n            shortDetails.shortUnderlyingPrice,\\n            vaultDetails.isShortPut\\n        );\\n\\n        // get the amount of collateral per 1 repaid otoken\\n        uint256 debtPrice = _getDebtPrice(\\n            depositedCollateral,\\n            shortDetails.shortAmount,\\n            cashValue,\\n            shortDetails.shortUnderlyingPrice,\\n            timestamp,\\n            vaultDetails.collateralDecimals,\\n            vaultDetails.isShortPut\\n        );\\n\\n        return (true, debtPrice, dust[vaultDetails.shortCollateralAsset]);\\n    }\\n\\n    /**\\n     * @notice calculate required collateral margin for a vault\\n     * @param _vault theoretical vault that needs to be checked\\n     * @param _vaultType vault type\\n     * @return the vault collateral amount, and marginRequired the minimal amount of collateral needed in a vault, scaled to 1e27\\n     */\\n    function getMarginRequired(MarginVault.Vault memory _vault, uint256 _vaultType)\\n        external\\n        view\\n        returns (FPI.FixedPointInt memory, FPI.FixedPointInt memory)\\n    {\\n        VaultDetails memory vaultDetail = _getVaultDetails(_vault, _vaultType);\\n        return _getMarginRequired(_vault, vaultDetail);\\n    }\\n\\n    /**\\n     * @notice returns the amount of collateral that can be removed from an actual or a theoretical vault\\n     * @dev return amount is denominated in the collateral asset for the oToken in the vault, or the collateral asset in the vault\\n     * @param _vault theoretical vault that needs to be checked\\n     * @param _vaultType vault type (0 for spread/max loss, 1 for naked margin)\\n     * @return excessCollateral the amount by which the margin is above or below the required amount\\n     * @return isExcess True if there is excess margin in the vault, False if there is a deficit of margin in the vault\\n     * if True, collateral can be taken out from the vault, if False, additional collateral needs to be added to vault\\n     */\\n    function getExcessCollateral(MarginVault.Vault memory _vault, uint256 _vaultType)\\n        public\\n        view\\n        returns (uint256, bool)\\n    {\\n        VaultDetails memory vaultDetails = _getVaultDetails(_vault, _vaultType);\\n\\n        // include all the checks for to ensure the vault is valid\\n        _checkIsValidVault(_vault, vaultDetails);\\n\\n        // if the vault contains no oTokens, return the amount of collateral\\n        if (!vaultDetails.hasShort && !vaultDetails.hasLong) {\\n            uint256 amount = vaultDetails.hasCollateral ? _vault.collateralAmounts[0] : 0;\\n            return (amount, true);\\n        }\\n\\n        // get required margin, denominated in collateral, scaled in 1e27\\n        (FPI.FixedPointInt memory collateralAmount, FPI.FixedPointInt memory collateralRequired) = _getMarginRequired(\\n            _vault,\\n            vaultDetails\\n        );\\n        FPI.FixedPointInt memory excessCollateral = collateralAmount.sub(collateralRequired);\\n\\n        bool isExcess = excessCollateral.isGreaterThanOrEqual(ZERO);\\n        uint256 collateralDecimals = vaultDetails.hasLong\\n            ? vaultDetails.longCollateralDecimals\\n            : vaultDetails.shortCollateralDecimals;\\n        // if is excess, truncate the tailing digits in excessCollateralExternal calculation\\n        uint256 excessCollateralExternal = excessCollateral.toScaledUint(collateralDecimals, isExcess);\\n        return (excessCollateralExternal, isExcess);\\n    }\\n\\n    /**\\n     * @notice return the cash value of an expired oToken, denominated in strike asset\\n     * @dev for a call, return Max (0, underlyingPriceInStrike - otoken.strikePrice)\\n     * @dev for a put, return Max(0, otoken.strikePrice - underlyingPriceInStrike)\\n     * @param _underlying otoken underlying asset\\n     * @param _strike otoken strike asset\\n     * @param _expiryTimestamp otoken expiry timestamp\\n     * @param _strikePrice otoken strike price\\n     * @param _strikePrice true if otoken is put otherwise false\\n     * @return cash value of an expired otoken, denominated in the strike asset\\n     */\\n    function _getExpiredCashValue(\\n        address _underlying,\\n        address _strike,\\n        uint256 _expiryTimestamp,\\n        uint256 _strikePrice,\\n        bool _isPut\\n    ) internal view returns (FPI.FixedPointInt memory) {\\n        // strike price is denominated in strike asset\\n        FPI.FixedPointInt memory strikePrice = FPI.fromScaledUint(_strikePrice, BASE);\\n        FPI.FixedPointInt memory one = FPI.fromScaledUint(1, 0);\\n\\n        // calculate the value of the underlying asset in terms of the strike asset\\n        FPI.FixedPointInt memory underlyingPriceInStrike = _convertAmountOnExpiryPrice(\\n            one, // underlying price is 1 (1e27) in term of underlying\\n            _underlying,\\n            _strike,\\n            _expiryTimestamp\\n        );\\n\\n        return _getCashValue(strikePrice, underlyingPriceInStrike, _isPut);\\n    }\\n\\n    /// @dev added this struct to avoid stack-too-deep error\\n    struct OtokenDetails {\\n        address otokenUnderlyingAsset;\\n        address otokenCollateralAsset;\\n        address otokenStrikeAsset;\\n        uint256 otokenExpiry;\\n        bool isPut;\\n    }\\n\\n    /**\\n     * @notice calculate the amount of collateral needed for a vault\\n     * @dev vault passed in has already passed the checkIsValidVault function\\n     * @param _vault theoretical vault that needs to be checked\\n     * @return the vault collateral amount, and marginRequired the minimal amount of collateral needed in a vault,\\n     * scaled to 1e27\\n     */\\n    function _getMarginRequired(MarginVault.Vault memory _vault, VaultDetails memory _vaultDetails)\\n        internal\\n        view\\n        returns (FPI.FixedPointInt memory, FPI.FixedPointInt memory)\\n    {\\n        FPI.FixedPointInt memory shortAmount = _vaultDetails.hasShort\\n            ? FPI.fromScaledUint(_vault.shortAmounts[0], BASE)\\n            : ZERO;\\n        FPI.FixedPointInt memory longAmount = _vaultDetails.hasLong\\n            ? FPI.fromScaledUint(_vault.longAmounts[0], BASE)\\n            : ZERO;\\n        FPI.FixedPointInt memory collateralAmount = _vaultDetails.hasCollateral\\n            ? FPI.fromScaledUint(_vault.collateralAmounts[0], _vaultDetails.collateralDecimals)\\n            : ZERO;\\n        FPI.FixedPointInt memory shortStrike = _vaultDetails.hasShort\\n            ? FPI.fromScaledUint(_vaultDetails.shortStrikePrice, BASE)\\n            : ZERO;\\n\\n        // struct to avoid stack too deep error\\n        OtokenDetails memory otokenDetails = OtokenDetails(\\n            _vaultDetails.hasShort ? _vaultDetails.shortUnderlyingAsset : _vaultDetails.longUnderlyingAsset,\\n            _vaultDetails.hasShort ? _vaultDetails.shortCollateralAsset : _vaultDetails.longCollateralAsset,\\n            _vaultDetails.hasShort ? _vaultDetails.shortStrikeAsset : _vaultDetails.longStrikeAsset,\\n            _vaultDetails.hasShort ? _vaultDetails.shortExpiryTimestamp : _vaultDetails.longExpiryTimestamp,\\n            _vaultDetails.hasShort ? _vaultDetails.isShortPut : _vaultDetails.isLongPut\\n        );\\n\\n        if (now < otokenDetails.otokenExpiry) {\\n            // it's not expired, return amount of margin required based on vault type\\n            if (_vaultDetails.vaultType == 1) {\\n                // this is a naked margin vault\\n                // fetch dust amount for otoken collateral asset as FixedPointInt, assuming dust is already scaled by collateral decimals\\n                FPI.FixedPointInt memory dustAmount = FPI.fromScaledUint(\\n                    dust[_vaultDetails.shortCollateralAsset],\\n                    _vaultDetails.collateralDecimals\\n                );\\n\\n                // fetch collateral cap amount for otoken collateral asset as FixedPointInt, assuming cap is already scaled by collateral decimals\\n                FPI.FixedPointInt memory capAmount = FPI.fromScaledUint(\\n                    cap[_vaultDetails.shortCollateralAsset],\\n                    _vaultDetails.collateralDecimals\\n                );\\n\\n                // check that collateral deposited in naked margin vault is greater than dust amount for that particular collateral asset\\n                if (collateralAmount.isGreaterThan(ZERO)) {\\n                    require(\\n                        collateralAmount.isGreaterThan(dustAmount),\\n                        \\\"MarginCalculator: naked margin vault should have collateral amount greater than dust amount\\\"\\n                    );\\n\\n                    require(\\n                        collateralAmount.isLessThanOrEqual(capAmount),\\n                        \\\"MarginCalculator: naked margin vault should have collateral amount less than cap amount\\\"\\n                    );\\n                }\\n\\n                // get underlying asset price for short option\\n                FPI.FixedPointInt memory shortUnderlyingPrice = FPI.fromScaledUint(\\n                    oracle.getPrice(_vaultDetails.shortUnderlyingAsset),\\n                    BASE\\n                );\\n\\n                // encode product hash\\n                bytes32 productHash = _getProductHash(\\n                    _vaultDetails.shortUnderlyingAsset,\\n                    _vaultDetails.shortStrikeAsset,\\n                    _vaultDetails.shortCollateralAsset,\\n                    _vaultDetails.isShortPut\\n                );\\n\\n                // return amount of collateral in vault and needed collateral amount for margin\\n                return (\\n                    collateralAmount,\\n                    _getNakedMarginRequired(\\n                        productHash,\\n                        shortAmount,\\n                        shortUnderlyingPrice,\\n                        shortStrike,\\n                        otokenDetails.otokenExpiry,\\n                        otokenDetails.isPut\\n                    )\\n                );\\n            } else {\\n                // this is a fully collateralized vault\\n                FPI.FixedPointInt memory longStrike = _vaultDetails.hasLong\\n                    ? FPI.fromScaledUint(_vaultDetails.longStrikePrice, BASE)\\n                    : ZERO;\\n\\n                if (otokenDetails.isPut) {\\n                    FPI.FixedPointInt memory strikeNeeded = _getPutSpreadMarginRequired(\\n                        shortAmount,\\n                        longAmount,\\n                        shortStrike,\\n                        longStrike\\n                    );\\n                    // convert amount to be denominated in collateral\\n                    return (\\n                        collateralAmount,\\n                        _convertAmountOnLivePrice(\\n                            strikeNeeded,\\n                            otokenDetails.otokenStrikeAsset,\\n                            otokenDetails.otokenCollateralAsset\\n                        )\\n                    );\\n                } else {\\n                    FPI.FixedPointInt memory underlyingNeeded = _getCallSpreadMarginRequired(\\n                        shortAmount,\\n                        longAmount,\\n                        shortStrike,\\n                        longStrike\\n                    );\\n                    // convert amount to be denominated in collateral\\n                    return (\\n                        collateralAmount,\\n                        _convertAmountOnLivePrice(\\n                            underlyingNeeded,\\n                            otokenDetails.otokenUnderlyingAsset,\\n                            otokenDetails.otokenCollateralAsset\\n                        )\\n                    );\\n                }\\n            }\\n        } else {\\n            // the vault has expired. calculate the cash value of all the minted short options\\n            FPI.FixedPointInt memory shortCashValue = _vaultDetails.hasShort\\n                ? _getExpiredCashValue(\\n                    _vaultDetails.shortUnderlyingAsset,\\n                    _vaultDetails.shortStrikeAsset,\\n                    _vaultDetails.shortExpiryTimestamp,\\n                    _vaultDetails.shortStrikePrice,\\n                    otokenDetails.isPut\\n                )\\n                : ZERO;\\n            FPI.FixedPointInt memory longCashValue = _vaultDetails.hasLong\\n                ? _getExpiredCashValue(\\n                    _vaultDetails.longUnderlyingAsset,\\n                    _vaultDetails.longStrikeAsset,\\n                    _vaultDetails.longExpiryTimestamp,\\n                    _vaultDetails.longStrikePrice,\\n                    otokenDetails.isPut\\n                )\\n                : ZERO;\\n\\n            FPI.FixedPointInt memory valueInStrike = _getExpiredSpreadCashValue(\\n                shortAmount,\\n                longAmount,\\n                shortCashValue,\\n                longCashValue\\n            );\\n\\n            // convert amount to be denominated in collateral\\n            return (\\n                collateralAmount,\\n                _convertAmountOnExpiryPrice(\\n                    valueInStrike,\\n                    otokenDetails.otokenStrikeAsset,\\n                    otokenDetails.otokenCollateralAsset,\\n                    otokenDetails.otokenExpiry\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice get required collateral for naked margin position\\n     * if put:\\n     * a = min(strike price, spot shock * underlying price)\\n     * b = max(strike price - spot shock * underlying price, 0)\\n     * marginRequired = ( option upper bound value * a + b) * short amount\\n     * if call:\\n     * a = min(1, strike price / (underlying price / spot shock value))\\n     * b = max(1- (strike price / (underlying price / spot shock value)), 0)\\n     * marginRequired = (option upper bound value * a + b) * short amount\\n     * @param _productHash product hash\\n     * @param _shortAmount short amount in vault, in FixedPointInt type\\n     * @param _strikePrice strike price of short otoken, in FixedPointInt type\\n     * @param _underlyingPrice underlying price of short otoken underlying asset, in FixedPointInt type\\n     * @param _shortExpiryTimestamp short otoken expiry timestamp\\n     * @param _isPut otoken type, true if put option, false for call option\\n     * @return required margin for this naked vault, in FixedPointInt type (scaled by 1e27)\\n     */\\n    function _getNakedMarginRequired(\\n        bytes32 _productHash,\\n        FPI.FixedPointInt memory _shortAmount,\\n        FPI.FixedPointInt memory _underlyingPrice,\\n        FPI.FixedPointInt memory _strikePrice,\\n        uint256 _shortExpiryTimestamp,\\n        bool _isPut\\n    ) internal view returns (FPI.FixedPointInt memory) {\\n        // find option upper bound value\\n        FPI.FixedPointInt memory optionUpperBoundValue = _findUpperBoundValue(_productHash, _shortExpiryTimestamp);\\n        // convert spot shock value of this product to FixedPointInt (already scaled by 1e27)\\n        FPI.FixedPointInt memory spotShockValue = FPI.FixedPointInt(int256(spotShock[_productHash]));\\n\\n        FPI.FixedPointInt memory a;\\n        FPI.FixedPointInt memory b;\\n        FPI.FixedPointInt memory marginRequired;\\n\\n        if (_isPut) {\\n            a = FPI.min(_strikePrice, spotShockValue.mul(_underlyingPrice));\\n            b = FPI.max(_strikePrice.sub(spotShockValue.mul(_underlyingPrice)), ZERO);\\n            marginRequired = optionUpperBoundValue.mul(a).add(b).mul(_shortAmount);\\n        } else {\\n            FPI.FixedPointInt memory one = FPI.fromScaledUint(1e27, SCALING_FACTOR);\\n            a = FPI.min(one, _strikePrice.mul(spotShockValue).div(_underlyingPrice));\\n            b = FPI.max(one.sub(_strikePrice.mul(spotShockValue).div(_underlyingPrice)), ZERO);\\n            marginRequired = optionUpperBoundValue.mul(a).add(b).mul(_shortAmount);\\n        }\\n\\n        return marginRequired;\\n    }\\n\\n    /**\\n     * @notice find upper bound value for product by specific expiry timestamp\\n     * @dev should return the upper bound value that correspond to option time to expiry, of if not found should return the next greater one, revert if no value found\\n     * @param _productHash product hash\\n     * @param _expiryTimestamp expiry timestamp\\n     * @return option upper bound value\\n     */\\n    function _findUpperBoundValue(bytes32 _productHash, uint256 _expiryTimestamp)\\n        internal\\n        view\\n        returns (FPI.FixedPointInt memory)\\n    {\\n        // get time to expiry array of this product hash\\n        uint256[] memory timesToExpiry = timesToExpiryForProduct[_productHash];\\n\\n        // check that this product have upper bound values stored\\n        require(timesToExpiry.length != 0, \\\"MarginCalculator: product have no expiry values\\\");\\n\\n        uint256 optionTimeToExpiry = _expiryTimestamp.sub(now);\\n\\n        // check that the option time to expiry is in the expiry array\\n        require(\\n            timesToExpiry[timesToExpiry.length.sub(1)] >= optionTimeToExpiry,\\n            \\\"MarginCalculator: product have no upper bound value\\\"\\n        );\\n\\n        // loop through the array and return the upper bound value in FixedPointInt type (already scaled by 1e27)\\n        for (uint8 i = 0; i < timesToExpiry.length; i++) {\\n            if (timesToExpiry[i] >= optionTimeToExpiry)\\n                return FPI.fromScaledUint(maxPriceAtTimeToExpiry[_productHash][timesToExpiry[i]], SCALING_FACTOR);\\n        }\\n    }\\n\\n    /**\\n     * @dev returns the strike asset amount of margin required for a put or put spread with the given short oTokens, long oTokens and amounts\\n     *\\n     * marginRequired = max( (short amount * short strike) - (long strike * min (short amount, long amount)) , 0 )\\n     *\\n     * @return margin requirement denominated in the strike asset\\n     */\\n    function _getPutSpreadMarginRequired(\\n        FPI.FixedPointInt memory _shortAmount,\\n        FPI.FixedPointInt memory _longAmount,\\n        FPI.FixedPointInt memory _shortStrike,\\n        FPI.FixedPointInt memory _longStrike\\n    ) internal view returns (FPI.FixedPointInt memory) {\\n        return FPI.max(_shortAmount.mul(_shortStrike).sub(_longStrike.mul(FPI.min(_shortAmount, _longAmount))), ZERO);\\n    }\\n\\n    /**\\n     * @dev returns the underlying asset amount required for a call or call spread with the given short oTokens, long oTokens, and amounts\\n     *\\n     *                           (long strike - short strike) * short amount\\n     * marginRequired =  max( ------------------------------------------------- , max (short amount - long amount, 0) )\\n     *                                           long strike\\n     *\\n     * @dev if long strike = 0, return max( short amount - long amount, 0)\\n     * @return margin requirement denominated in the underlying asset\\n     */\\n    function _getCallSpreadMarginRequired(\\n        FPI.FixedPointInt memory _shortAmount,\\n        FPI.FixedPointInt memory _longAmount,\\n        FPI.FixedPointInt memory _shortStrike,\\n        FPI.FixedPointInt memory _longStrike\\n    ) internal view returns (FPI.FixedPointInt memory) {\\n        // max (short amount - long amount , 0)\\n        if (_longStrike.isEqual(ZERO)) {\\n            return FPI.max(_shortAmount.sub(_longAmount), ZERO);\\n        }\\n\\n        /**\\n         *             (long strike - short strike) * short amount\\n         * calculate  ----------------------------------------------\\n         *                             long strike\\n         */\\n        FPI.FixedPointInt memory firstPart = _longStrike.sub(_shortStrike).mul(_shortAmount).div(_longStrike);\\n\\n        /**\\n         * calculate max ( short amount - long amount , 0)\\n         */\\n        FPI.FixedPointInt memory secondPart = FPI.max(_shortAmount.sub(_longAmount), ZERO);\\n\\n        return FPI.max(firstPart, secondPart);\\n    }\\n\\n    /**\\n     * @notice convert an amount in asset A to equivalent amount of asset B, based on a live price\\n     * @dev function includes the amount and applies .mul() first to increase the accuracy\\n     * @param _amount amount in asset A\\n     * @param _assetA asset A\\n     * @param _assetB asset B\\n     * @return _amount in asset B\\n     */\\n    function _convertAmountOnLivePrice(\\n        FPI.FixedPointInt memory _amount,\\n        address _assetA,\\n        address _assetB\\n    ) internal view returns (FPI.FixedPointInt memory) {\\n        if (_assetA == _assetB) {\\n            return _amount;\\n        }\\n        uint256 priceA = oracle.getPrice(_assetA);\\n        uint256 priceB = oracle.getPrice(_assetB);\\n        // amount A * price A in USD = amount B * price B in USD\\n        // amount B = amount A * price A / price B\\n        return _amount.mul(FPI.fromScaledUint(priceA, BASE)).div(FPI.fromScaledUint(priceB, BASE));\\n    }\\n\\n    /**\\n     * @notice convert an amount in asset A to equivalent amount of asset B, based on an expiry price\\n     * @dev function includes the amount and apply .mul() first to increase the accuracy\\n     * @param _amount amount in asset A\\n     * @param _assetA asset A\\n     * @param _assetB asset B\\n     * @return _amount in asset B\\n     */\\n    function _convertAmountOnExpiryPrice(\\n        FPI.FixedPointInt memory _amount,\\n        address _assetA,\\n        address _assetB,\\n        uint256 _expiry\\n    ) internal view returns (FPI.FixedPointInt memory) {\\n        if (_assetA == _assetB) {\\n            return _amount;\\n        }\\n        (uint256 priceA, bool priceAFinalized) = oracle.getExpiryPrice(_assetA, _expiry);\\n        (uint256 priceB, bool priceBFinalized) = oracle.getExpiryPrice(_assetB, _expiry);\\n        require(priceAFinalized && priceBFinalized, \\\"MarginCalculator: price at expiry not finalized yet\\\");\\n        // amount A * price A in USD = amount B * price B in USD\\n        // amount B = amount A * price A / price B\\n        return _amount.mul(FPI.fromScaledUint(priceA, BASE)).div(FPI.fromScaledUint(priceB, BASE));\\n    }\\n\\n    /**\\n     * @notice return debt price, how much collateral asset per 1 otoken repaid in collateral decimal\\n     * ending price = vault collateral / vault debt\\n     * if auction ended, return ending price\\n     * else calculate starting price\\n     * for put option:\\n     * starting price = max(cash value - underlying price * oracle deviation, 0)\\n     * for call option:\\n     *                      max(cash value - underlying price * oracle deviation, 0)\\n     * starting price =  ---------------------------------------------------------------\\n     *                                          underlying price\\n     *\\n     *\\n     *                  starting price + (ending price - starting price) * auction elapsed time\\n     * then price = --------------------------------------------------------------------------\\n     *                                      auction time\\n     *\\n     *\\n     * @param _vaultCollateral vault collateral amount\\n     * @param _vaultDebt vault short amount\\n     * @param _cashValue option cash value\\n     * @param _spotPrice option underlying asset price (in USDC)\\n     * @param _auctionStartingTime auction starting timestamp (_spotPrice timestamp from chainlink)\\n     * @param _collateralDecimals collateral asset decimals\\n     * @param _isPut otoken type, true for put, false for call option\\n     * @return price of 1 debt otoken in collateral asset scaled by collateral decimals\\n     */\\n    function _getDebtPrice(\\n        FPI.FixedPointInt memory _vaultCollateral,\\n        FPI.FixedPointInt memory _vaultDebt,\\n        FPI.FixedPointInt memory _cashValue,\\n        FPI.FixedPointInt memory _spotPrice,\\n        uint256 _auctionStartingTime,\\n        uint256 _collateralDecimals,\\n        bool _isPut\\n    ) internal view returns (uint256) {\\n        // price of 1 repaid otoken in collateral asset, scaled to 1e27\\n        FPI.FixedPointInt memory price;\\n        // auction ending price\\n        FPI.FixedPointInt memory endingPrice = _vaultCollateral.div(_vaultDebt);\\n\\n        // auction elapsed time\\n        uint256 auctionElapsedTime = now.sub(_auctionStartingTime);\\n\\n        // if auction ended, return ending price\\n        if (auctionElapsedTime >= AUCTION_TIME) {\\n            price = endingPrice;\\n        } else {\\n            // starting price\\n            FPI.FixedPointInt memory startingPrice;\\n\\n            {\\n                // store oracle deviation in a FixedPointInt (already scaled by 1e27)\\n                FPI.FixedPointInt memory fixedOracleDeviation = FPI.fromScaledUint(oracleDeviation, SCALING_FACTOR);\\n\\n                if (_isPut) {\\n                    startingPrice = FPI.max(_cashValue.sub(fixedOracleDeviation.mul(_spotPrice)), ZERO);\\n                } else {\\n                    startingPrice = FPI.max(_cashValue.sub(fixedOracleDeviation.mul(_spotPrice)), ZERO).div(_spotPrice);\\n                }\\n            }\\n\\n            // store auctionElapsedTime in a FixedPointInt scaled by 1e27\\n            FPI.FixedPointInt memory auctionElapsedTimeFixedPoint = FPI.fromScaledUint(auctionElapsedTime, 18);\\n            // store AUCTION_TIME in a FixedPointInt (already scaled by 1e27)\\n            FPI.FixedPointInt memory auctionTime = FPI.fromScaledUint(AUCTION_TIME, 18);\\n\\n            // calculate price of 1 repaid otoken, scaled by the collateral decimals, expilictly rounded down\\n            price = startingPrice.add(\\n                (endingPrice.sub(startingPrice)).mul(auctionElapsedTimeFixedPoint).div(auctionTime)\\n            );\\n\\n            // cap liquidation price to ending price\\n            if (price.isGreaterThan(endingPrice)) price = endingPrice;\\n        }\\n\\n        return price.toScaledUint(_collateralDecimals, true);\\n    }\\n\\n    /**\\n     * @notice get vault details to save us from making multiple external calls\\n     * @param _vault vault struct\\n     * @param _vaultType vault type, 0 for max loss/spreads and 1 for naked margin vault\\n     * @return vault details in VaultDetails struct\\n     */\\n    function _getVaultDetails(MarginVault.Vault memory _vault, uint256 _vaultType)\\n        internal\\n        view\\n        returns (VaultDetails memory)\\n    {\\n        VaultDetails memory vaultDetails = VaultDetails(\\n            address(0),\\n            address(0),\\n            address(0),\\n            address(0),\\n            address(0),\\n            address(0),\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false\\n        );\\n\\n        // check if vault has long, short otoken and collateral asset\\n        vaultDetails.hasLong = _isNotEmpty(_vault.longOtokens);\\n        vaultDetails.hasShort = _isNotEmpty(_vault.shortOtokens);\\n        vaultDetails.hasCollateral = _isNotEmpty(_vault.collateralAssets);\\n\\n        vaultDetails.vaultType = _vaultType;\\n\\n        // get vault long otoken if available\\n        if (vaultDetails.hasLong) {\\n            OtokenInterface long = OtokenInterface(_vault.longOtokens[0]);\\n            (\\n                vaultDetails.longCollateralAsset,\\n                vaultDetails.longUnderlyingAsset,\\n                vaultDetails.longStrikeAsset,\\n                vaultDetails.longStrikePrice,\\n                vaultDetails.longExpiryTimestamp,\\n                vaultDetails.isLongPut\\n            ) = long.getOtokenDetails();\\n            vaultDetails.longCollateralDecimals = uint256(ERC20Interface(vaultDetails.longCollateralAsset).decimals());\\n        }\\n\\n        // get vault short otoken if available\\n        if (vaultDetails.hasShort) {\\n            OtokenInterface short = OtokenInterface(_vault.shortOtokens[0]);\\n            (\\n                vaultDetails.shortCollateralAsset,\\n                vaultDetails.shortUnderlyingAsset,\\n                vaultDetails.shortStrikeAsset,\\n                vaultDetails.shortStrikePrice,\\n                vaultDetails.shortExpiryTimestamp,\\n                vaultDetails.isShortPut\\n            ) = short.getOtokenDetails();\\n            vaultDetails.shortCollateralDecimals = uint256(\\n                ERC20Interface(vaultDetails.shortCollateralAsset).decimals()\\n            );\\n        }\\n\\n        if (vaultDetails.hasCollateral) {\\n            vaultDetails.collateralDecimals = uint256(ERC20Interface(_vault.collateralAssets[0]).decimals());\\n        }\\n\\n        return vaultDetails;\\n    }\\n\\n    /**\\n     * @dev calculate the cash value obligation for an expired vault, where a positive number is an obligation\\n     *\\n     * Formula: net = (short cash value * short amount) - ( long cash value * long Amount )\\n     *\\n     * @return cash value obligation denominated in the strike asset\\n     */\\n    function _getExpiredSpreadCashValue(\\n        FPI.FixedPointInt memory _shortAmount,\\n        FPI.FixedPointInt memory _longAmount,\\n        FPI.FixedPointInt memory _shortCashValue,\\n        FPI.FixedPointInt memory _longCashValue\\n    ) internal pure returns (FPI.FixedPointInt memory) {\\n        return _shortCashValue.mul(_shortAmount).sub(_longCashValue.mul(_longAmount));\\n    }\\n\\n    /**\\n     * @dev check if asset array contain a token address\\n     * @return True if the array is not empty\\n     */\\n    function _isNotEmpty(address[] memory _assets) internal pure returns (bool) {\\n        return _assets.length > 0 && _assets[0] != address(0);\\n    }\\n\\n    /**\\n     * @dev ensure that:\\n     * a) at most 1 asset type used as collateral\\n     * b) at most 1 series of option used as the long option\\n     * c) at most 1 series of option used as the short option\\n     * d) asset array lengths match for long, short and collateral\\n     * e) long option and collateral asset is acceptable for margin with short asset\\n     * @param _vault the vault to check\\n     * @param _vaultDetails vault details struct\\n     */\\n    function _checkIsValidVault(MarginVault.Vault memory _vault, VaultDetails memory _vaultDetails) internal pure {\\n        // ensure all the arrays in the vault are valid\\n        require(_vault.shortOtokens.length <= 1, \\\"MarginCalculator: Too many short otokens in the vault\\\");\\n        require(_vault.longOtokens.length <= 1, \\\"MarginCalculator: Too many long otokens in the vault\\\");\\n        require(_vault.collateralAssets.length <= 1, \\\"MarginCalculator: Too many collateral assets in the vault\\\");\\n\\n        require(\\n            _vault.shortOtokens.length == _vault.shortAmounts.length,\\n            \\\"MarginCalculator: Short asset and amount mismatch\\\"\\n        );\\n        require(\\n            _vault.longOtokens.length == _vault.longAmounts.length,\\n            \\\"MarginCalculator: Long asset and amount mismatch\\\"\\n        );\\n        require(\\n            _vault.collateralAssets.length == _vault.collateralAmounts.length,\\n            \\\"MarginCalculator: Collateral asset and amount mismatch\\\"\\n        );\\n\\n        // ensure the long asset is valid for the short asset\\n        require(\\n            _isMarginableLong(_vault, _vaultDetails),\\n            \\\"MarginCalculator: long asset not marginable for short asset\\\"\\n        );\\n\\n        // ensure that the collateral asset is valid for the short asset\\n        require(\\n            _isMarginableCollateral(_vault, _vaultDetails),\\n            \\\"MarginCalculator: collateral asset not marginable for short asset\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev if there is a short option and a long option in the vault, ensure that the long option is able to be used as collateral for the short option\\n     * @param _vault the vault to check\\n     * @param _vaultDetails vault details struct\\n     * @return true if long is marginable or false if not\\n     */\\n    function _isMarginableLong(MarginVault.Vault memory _vault, VaultDetails memory _vaultDetails)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        if (_vaultDetails.vaultType == 1)\\n            require(!_vaultDetails.hasLong, \\\"MarginCalculator: naked margin vault cannot have long otoken\\\");\\n\\n        // if vault is missing a long or a short, return True\\n        if (!_vaultDetails.hasLong || !_vaultDetails.hasShort) return true;\\n\\n        return\\n            _vault.longOtokens[0] != _vault.shortOtokens[0] &&\\n            _vaultDetails.longUnderlyingAsset == _vaultDetails.shortUnderlyingAsset &&\\n            _vaultDetails.longStrikeAsset == _vaultDetails.shortStrikeAsset &&\\n            _vaultDetails.longCollateralAsset == _vaultDetails.shortCollateralAsset &&\\n            _vaultDetails.longExpiryTimestamp == _vaultDetails.shortExpiryTimestamp &&\\n            _vaultDetails.isLongPut == _vaultDetails.isShortPut;\\n    }\\n\\n    /**\\n     * @dev if there is short option and collateral asset in the vault, ensure that the collateral asset is valid for the short option\\n     * @param _vault the vault to check\\n     * @param _vaultDetails vault details struct\\n     * @return true if marginable or false\\n     */\\n    function _isMarginableCollateral(MarginVault.Vault memory _vault, VaultDetails memory _vaultDetails)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        bool isMarginable = true;\\n\\n        if (!_vaultDetails.hasCollateral) return isMarginable;\\n\\n        if (_vaultDetails.hasShort) {\\n            isMarginable = _vaultDetails.shortCollateralAsset == _vault.collateralAssets[0];\\n        } else if (_vaultDetails.hasLong) {\\n            isMarginable = _vaultDetails.longCollateralAsset == _vault.collateralAssets[0];\\n        }\\n\\n        return isMarginable;\\n    }\\n\\n    /**\\n     * @notice get a product hash\\n     * @param _underlying option underlying asset\\n     * @param _strike option strike asset\\n     * @param _collateral option collateral asset\\n     * @param _isPut option type\\n     * @return product hash\\n     */\\n    function _getProductHash(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        bool _isPut\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(_underlying, _strike, _collateral, _isPut));\\n    }\\n\\n    /**\\n     * @notice get option cash value\\n     * @dev this assume that the underlying price is denominated in strike asset\\n     * cash value = max(underlying price - strike price, 0)\\n     * @param _strikePrice option strike price\\n     * @param _underlyingPrice option underlying price\\n     * @param _isPut option type, true for put and false for call option\\n     */\\n    function _getCashValue(\\n        FPI.FixedPointInt memory _strikePrice,\\n        FPI.FixedPointInt memory _underlyingPrice,\\n        bool _isPut\\n    ) internal view returns (FPI.FixedPointInt memory) {\\n        if (_isPut) return _strikePrice.isGreaterThan(_underlyingPrice) ? _strikePrice.sub(_underlyingPrice) : ZERO;\\n\\n        return _underlyingPrice.isGreaterThan(_strikePrice) ? _underlyingPrice.sub(_strikePrice) : ZERO;\\n    }\\n}\\n\",\"keccak256\":\"0xe690824e6f1a90892c4c8985673699a2e974c17d951754bee75bf5d5139ae9ee\",\"license\":\"UNLICENSED\"},\"contracts/GammaProtocol/interfaces/ERC20Interface.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity 0.6.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface ERC20Interface {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x3dbc279a4929dcf32d2e39d1d7b0057c2805d9ef389222430bbe05a97ecae8b6\",\"license\":\"UNLICENSED\"},\"contracts/GammaProtocol/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.10;\\n\\ninterface OracleInterface {\\n    function isLockingPeriodOver(address _asset, uint256 _expiryTimestamp) external view returns (bool);\\n\\n    function isDisputePeriodOver(address _asset, uint256 _expiryTimestamp) external view returns (bool);\\n\\n    function getExpiryPrice(address _asset, uint256 _expiryTimestamp) external view returns (uint256, bool);\\n\\n    function getDisputer() external view returns (address);\\n\\n    function getPricer(address _asset) external view returns (address);\\n\\n    function getPrice(address _asset) external view returns (uint256);\\n\\n    function getPricerLockingPeriod(address _pricer) external view returns (uint256);\\n\\n    function getPricerDisputePeriod(address _pricer) external view returns (uint256);\\n\\n    function getChainlinkRoundData(address _asset, uint80 _roundId) external view returns (uint256, uint256);\\n\\n    // Non-view function\\n\\n    function setAssetPricer(address _asset, address _pricer) external;\\n\\n    function setLockingPeriod(address _pricer, uint256 _lockingPeriod) external;\\n\\n    function setDisputePeriod(address _pricer, uint256 _disputePeriod) external;\\n\\n    function setExpiryPrice(\\n        address _asset,\\n        uint256 _expiryTimestamp,\\n        uint256 _price\\n    ) external;\\n\\n    function disputeExpiryPrice(\\n        address _asset,\\n        uint256 _expiryTimestamp,\\n        uint256 _price\\n    ) external;\\n\\n    function setDisputer(address _disputer) external;\\n}\\n\",\"keccak256\":\"0xb98928ca456c3b8d4056d9c90c7d07a8dea00d02059df57e528c13272327d3f7\",\"license\":\"UNLICENSED\"},\"contracts/GammaProtocol/interfaces/OtokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.10;\\n\\ninterface OtokenInterface {\\n    function addressBook() external view returns (address);\\n\\n    function underlyingAsset() external view returns (address);\\n\\n    function strikeAsset() external view returns (address);\\n\\n    function collateralAsset() external view returns (address);\\n\\n    function strikePrice() external view returns (uint256);\\n\\n    function expiryTimestamp() external view returns (uint256);\\n\\n    function isPut() external view returns (bool);\\n\\n    function init(\\n        address _addressBook,\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external;\\n\\n    function getOtokenDetails()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    function mintOtoken(address account, uint256 amount) external;\\n\\n    function burnOtoken(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x3089cdd00dca9459a3c8458d6dc0d8dfb95e716aebdd6d9929238d0be625757a\",\"license\":\"UNLICENSED\"},\"contracts/GammaProtocol/libs/FixedPointInt256.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity 0.6.10;\\n\\nimport \\\"../packages/oz/SignedSafeMath.sol\\\";\\nimport \\\"../libs/SignedConverter.sol\\\";\\nimport \\\"../packages/oz/SafeMath.sol\\\";\\n\\n/**\\n * @title FixedPointInt256\\n * @author Opyn Team\\n * @notice FixedPoint library\\n */\\nlibrary FixedPointInt256 {\\n    using SignedSafeMath for int256;\\n    using SignedConverter for int256;\\n    using SafeMath for uint256;\\n    using SignedConverter for uint256;\\n\\n    int256 private constant SCALING_FACTOR = 1e27;\\n    uint256 private constant BASE_DECIMALS = 27;\\n\\n    struct FixedPointInt {\\n        int256 value;\\n    }\\n\\n    /**\\n     * @notice constructs an `FixedPointInt` from an unscaled int, e.g., `b=5` gets stored internally as `5**27`.\\n     * @param a int to convert into a FixedPoint.\\n     * @return the converted FixedPoint.\\n     */\\n    function fromUnscaledInt(int256 a) internal pure returns (FixedPointInt memory) {\\n        return FixedPointInt(a.mul(SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice constructs an FixedPointInt from an scaled uint with {_decimals} decimals\\n     * Examples:\\n     * (1)  USDC    decimals = 6\\n     *      Input:  5 * 1e6 USDC  =>    Output: 5 * 1e27 (FixedPoint 8.0 USDC)\\n     * (2)  cUSDC   decimals = 8\\n     *      Input:  5 * 1e6 cUSDC =>    Output: 5 * 1e25 (FixedPoint 0.08 cUSDC)\\n     * @param _a uint256 to convert into a FixedPoint.\\n     * @param _decimals  original decimals _a has\\n     * @return the converted FixedPoint, with 27 decimals.\\n     */\\n    function fromScaledUint(uint256 _a, uint256 _decimals) internal pure returns (FixedPointInt memory) {\\n        FixedPointInt memory fixedPoint;\\n\\n        if (_decimals == BASE_DECIMALS) {\\n            fixedPoint = FixedPointInt(_a.uintToInt());\\n        } else if (_decimals > BASE_DECIMALS) {\\n            uint256 exp = _decimals.sub(BASE_DECIMALS);\\n            fixedPoint = FixedPointInt((_a.div(10**exp)).uintToInt());\\n        } else {\\n            uint256 exp = BASE_DECIMALS - _decimals;\\n            fixedPoint = FixedPointInt((_a.mul(10**exp)).uintToInt());\\n        }\\n\\n        return fixedPoint;\\n    }\\n\\n    /**\\n     * @notice convert a FixedPointInt number to an uint256 with a specific number of decimals\\n     * @param _a FixedPointInt to convert\\n     * @param _decimals number of decimals that the uint256 should be scaled to\\n     * @param _roundDown True to round down the result, False to round up\\n     * @return the converted uint256\\n     */\\n    function toScaledUint(\\n        FixedPointInt memory _a,\\n        uint256 _decimals,\\n        bool _roundDown\\n    ) internal pure returns (uint256) {\\n        uint256 scaledUint;\\n\\n        if (_decimals == BASE_DECIMALS) {\\n            scaledUint = _a.value.intToUint();\\n        } else if (_decimals > BASE_DECIMALS) {\\n            uint256 exp = _decimals - BASE_DECIMALS;\\n            scaledUint = (_a.value).intToUint().mul(10**exp);\\n        } else {\\n            uint256 exp = BASE_DECIMALS - _decimals;\\n            uint256 tailing;\\n            if (!_roundDown) {\\n                uint256 remainer = (_a.value).intToUint().mod(10**exp);\\n                if (remainer > 0) tailing = 1;\\n            }\\n            scaledUint = (_a.value).intToUint().div(10**exp).add(tailing);\\n        }\\n\\n        return scaledUint;\\n    }\\n\\n    /**\\n     * @notice add two signed integers, a + b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return sum of the two signed integers\\n     */\\n    function add(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\\n        return FixedPointInt(a.value.add(b.value));\\n    }\\n\\n    /**\\n     * @notice subtract two signed integers, a-b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return difference of two signed integers\\n     */\\n    function sub(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\\n        return FixedPointInt(a.value.sub(b.value));\\n    }\\n\\n    /**\\n     * @notice multiply two signed integers, a by b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return mul of two signed integers\\n     */\\n    function mul(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\\n        return FixedPointInt((a.value.mul(b.value)) / SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice divide two signed integers, a by b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return div of two signed integers\\n     */\\n    function div(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\\n        return FixedPointInt((a.value.mul(SCALING_FACTOR)) / b.value);\\n    }\\n\\n    /**\\n     * @notice minimum between two signed integers, a and b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return min of two signed integers\\n     */\\n    function min(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\\n        return a.value < b.value ? a : b;\\n    }\\n\\n    /**\\n     * @notice maximum between two signed integers, a and b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return max of two signed integers\\n     */\\n    function max(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\\n        return a.value > b.value ? a : b;\\n    }\\n\\n    /**\\n     * @notice is a is equal to b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return True if equal, False if not\\n     */\\n    function isEqual(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (bool) {\\n        return a.value == b.value;\\n    }\\n\\n    /**\\n     * @notice is a greater than b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return True if a > b, False if not\\n     */\\n    function isGreaterThan(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (bool) {\\n        return a.value > b.value;\\n    }\\n\\n    /**\\n     * @notice is a greater than or equal to b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return True if a >= b, False if not\\n     */\\n    function isGreaterThanOrEqual(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (bool) {\\n        return a.value >= b.value;\\n    }\\n\\n    /**\\n     * @notice is a is less than b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return True if a < b, False if not\\n     */\\n    function isLessThan(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (bool) {\\n        return a.value < b.value;\\n    }\\n\\n    /**\\n     * @notice is a less than or equal to b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return True if a <= b, False if not\\n     */\\n    function isLessThanOrEqual(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (bool) {\\n        return a.value <= b.value;\\n    }\\n}\\n\",\"keccak256\":\"0xed184a1b3e2387136b7936a6cc5edc84e6cab0d925dcaf8dadc735414af04462\",\"license\":\"UNLICENSED\"},\"contracts/GammaProtocol/libs/MarginVault.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity =0.6.10;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"../packages/oz/SafeMath.sol\\\";\\n\\n/**\\n * @title MarginVault\\n * @author Opyn Team\\n * @notice A library that provides the Controller with a Vault struct and the functions that manipulate vaults.\\n * Vaults describe discrete position combinations of long options, short options, and collateral assets that a user can have.\\n */\\nlibrary MarginVault {\\n    using SafeMath for uint256;\\n\\n    // vault is a struct of 6 arrays that describe a position a user has, a user can have multiple vaults.\\n    struct Vault {\\n        // addresses of oTokens a user has shorted (i.e. written) against this vault\\n        address[] shortOtokens;\\n        // addresses of oTokens a user has bought and deposited in this vault\\n        // user can be long oTokens without opening a vault (e.g. by buying on a DEX)\\n        // generally, long oTokens will be 'deposited' in vaults to act as collateral in order to write oTokens against (i.e. in spreads)\\n        address[] longOtokens;\\n        // addresses of other ERC-20s a user has deposited as collateral in this vault\\n        address[] collateralAssets;\\n        // quantity of oTokens minted/written for each oToken address in shortOtokens\\n        uint256[] shortAmounts;\\n        // quantity of oTokens owned and held in the vault for each oToken address in longOtokens\\n        uint256[] longAmounts;\\n        // quantity of ERC-20 deposited as collateral in the vault for each ERC-20 address in collateralAssets\\n        uint256[] collateralAmounts;\\n    }\\n\\n    /**\\n     * @dev increase the short oToken balance in a vault when a new oToken is minted\\n     * @param _vault vault to add or increase the short position in\\n     * @param _shortOtoken address of the _shortOtoken being minted from the user's vault\\n     * @param _amount number of _shortOtoken being minted from the user's vault\\n     * @param _index index of _shortOtoken in the user's vault.shortOtokens array\\n     */\\n    function addShort(\\n        Vault storage _vault,\\n        address _shortOtoken,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external {\\n        require(_amount > 0, \\\"MarginVault: invalid short otoken amount\\\");\\n\\n        // valid indexes in any array are between 0 and array.length - 1.\\n        // if adding an amount to an preexisting short oToken, check that _index is in the range of 0->length-1\\n        if ((_index == _vault.shortOtokens.length) && (_index == _vault.shortAmounts.length)) {\\n            _vault.shortOtokens.push(_shortOtoken);\\n            _vault.shortAmounts.push(_amount);\\n        } else {\\n            require(\\n                (_index < _vault.shortOtokens.length) && (_index < _vault.shortAmounts.length),\\n                \\\"MarginVault: invalid short otoken index\\\"\\n            );\\n            address existingShort = _vault.shortOtokens[_index];\\n            require(\\n                (existingShort == _shortOtoken) || (existingShort == address(0)),\\n                \\\"MarginVault: short otoken address mismatch\\\"\\n            );\\n\\n            _vault.shortAmounts[_index] = _vault.shortAmounts[_index].add(_amount);\\n            _vault.shortOtokens[_index] = _shortOtoken;\\n        }\\n    }\\n\\n    /**\\n     * @dev decrease the short oToken balance in a vault when an oToken is burned\\n     * @param _vault vault to decrease short position in\\n     * @param _shortOtoken address of the _shortOtoken being reduced in the user's vault\\n     * @param _amount number of _shortOtoken being reduced in the user's vault\\n     * @param _index index of _shortOtoken in the user's vault.shortOtokens array\\n     */\\n    function removeShort(\\n        Vault storage _vault,\\n        address _shortOtoken,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external {\\n        // check that the removed short oToken exists in the vault at the specified index\\n        require(_index < _vault.shortOtokens.length, \\\"MarginVault: invalid short otoken index\\\");\\n        require(_vault.shortOtokens[_index] == _shortOtoken, \\\"MarginVault: short otoken address mismatch\\\");\\n\\n        uint256 newShortAmount = _vault.shortAmounts[_index].sub(_amount);\\n\\n        if (newShortAmount == 0) {\\n            delete _vault.shortOtokens[_index];\\n        }\\n        _vault.shortAmounts[_index] = newShortAmount;\\n    }\\n\\n    /**\\n     * @dev increase the long oToken balance in a vault when an oToken is deposited\\n     * @param _vault vault to add a long position to\\n     * @param _longOtoken address of the _longOtoken being added to the user's vault\\n     * @param _amount number of _longOtoken the protocol is adding to the user's vault\\n     * @param _index index of _longOtoken in the user's vault.longOtokens array\\n     */\\n    function addLong(\\n        Vault storage _vault,\\n        address _longOtoken,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external {\\n        require(_amount > 0, \\\"MarginVault: invalid long otoken amount\\\");\\n\\n        // valid indexes in any array are between 0 and array.length - 1.\\n        // if adding an amount to an preexisting short oToken, check that _index is in the range of 0->length-1\\n        if ((_index == _vault.longOtokens.length) && (_index == _vault.longAmounts.length)) {\\n            _vault.longOtokens.push(_longOtoken);\\n            _vault.longAmounts.push(_amount);\\n        } else {\\n            require(\\n                (_index < _vault.longOtokens.length) && (_index < _vault.longAmounts.length),\\n                \\\"MarginVault: invalid long otoken index\\\"\\n            );\\n            address existingLong = _vault.longOtokens[_index];\\n            require(\\n                (existingLong == _longOtoken) || (existingLong == address(0)),\\n                \\\"MarginVault: long otoken address mismatch\\\"\\n            );\\n\\n            _vault.longAmounts[_index] = _vault.longAmounts[_index].add(_amount);\\n            _vault.longOtokens[_index] = _longOtoken;\\n        }\\n    }\\n\\n    /**\\n     * @dev decrease the long oToken balance in a vault when an oToken is withdrawn\\n     * @param _vault vault to remove a long position from\\n     * @param _longOtoken address of the _longOtoken being removed from the user's vault\\n     * @param _amount number of _longOtoken the protocol is removing from the user's vault\\n     * @param _index index of _longOtoken in the user's vault.longOtokens array\\n     */\\n    function removeLong(\\n        Vault storage _vault,\\n        address _longOtoken,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external {\\n        // check that the removed long oToken exists in the vault at the specified index\\n        require(_index < _vault.longOtokens.length, \\\"MarginVault: invalid long otoken index\\\");\\n        require(_vault.longOtokens[_index] == _longOtoken, \\\"MarginVault: long otoken address mismatch\\\");\\n\\n        uint256 newLongAmount = _vault.longAmounts[_index].sub(_amount);\\n\\n        if (newLongAmount == 0) {\\n            delete _vault.longOtokens[_index];\\n        }\\n        _vault.longAmounts[_index] = newLongAmount;\\n    }\\n\\n    /**\\n     * @dev increase the collateral balance in a vault\\n     * @param _vault vault to add collateral to\\n     * @param _collateralAsset address of the _collateralAsset being added to the user's vault\\n     * @param _amount number of _collateralAsset being added to the user's vault\\n     * @param _index index of _collateralAsset in the user's vault.collateralAssets array\\n     */\\n    function addCollateral(\\n        Vault storage _vault,\\n        address _collateralAsset,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external {\\n        require(_amount > 0, \\\"MarginVault: invalid collateral amount\\\");\\n\\n        // valid indexes in any array are between 0 and array.length - 1.\\n        // if adding an amount to an preexisting short oToken, check that _index is in the range of 0->length-1\\n        if ((_index == _vault.collateralAssets.length) && (_index == _vault.collateralAmounts.length)) {\\n            _vault.collateralAssets.push(_collateralAsset);\\n            _vault.collateralAmounts.push(_amount);\\n        } else {\\n            require(\\n                (_index < _vault.collateralAssets.length) && (_index < _vault.collateralAmounts.length),\\n                \\\"MarginVault: invalid collateral token index\\\"\\n            );\\n            address existingCollateral = _vault.collateralAssets[_index];\\n            require(\\n                (existingCollateral == _collateralAsset) || (existingCollateral == address(0)),\\n                \\\"MarginVault: collateral token address mismatch\\\"\\n            );\\n\\n            _vault.collateralAmounts[_index] = _vault.collateralAmounts[_index].add(_amount);\\n            _vault.collateralAssets[_index] = _collateralAsset;\\n        }\\n    }\\n\\n    /**\\n     * @dev decrease the collateral balance in a vault\\n     * @param _vault vault to remove collateral from\\n     * @param _collateralAsset address of the _collateralAsset being removed from the user's vault\\n     * @param _amount number of _collateralAsset being removed from the user's vault\\n     * @param _index index of _collateralAsset in the user's vault.collateralAssets array\\n     */\\n    function removeCollateral(\\n        Vault storage _vault,\\n        address _collateralAsset,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external {\\n        // check that the removed collateral exists in the vault at the specified index\\n        require(_index < _vault.collateralAssets.length, \\\"MarginVault: invalid collateral asset index\\\");\\n        require(_vault.collateralAssets[_index] == _collateralAsset, \\\"MarginVault: collateral token address mismatch\\\");\\n\\n        uint256 newCollateralAmount = _vault.collateralAmounts[_index].sub(_amount);\\n\\n        if (newCollateralAmount == 0) {\\n            delete _vault.collateralAssets[_index];\\n        }\\n        _vault.collateralAmounts[_index] = newCollateralAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x3253d23f29090dda924fa53d9ef1dc4fe0e35de6b66885badd303ca63bf66fba\",\"license\":\"UNLICENSED\"},\"contracts/GammaProtocol/libs/SignedConverter.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity 0.6.10;\\n\\n/**\\n * @title SignedConverter\\n * @author Opyn Team\\n * @notice A library to convert an unsigned integer to signed integer or signed integer to unsigned integer.\\n */\\nlibrary SignedConverter {\\n    /**\\n     * @notice convert an unsigned integer to a signed integer\\n     * @param a uint to convert into a signed integer\\n     * @return converted signed integer\\n     */\\n    function uintToInt(uint256 a) internal pure returns (int256) {\\n        require(a < 2**255, \\\"FixedPointInt256: out of int range\\\");\\n\\n        return int256(a);\\n    }\\n\\n    /**\\n     * @notice convert a signed integer to an unsigned integer\\n     * @param a int to convert into an unsigned integer\\n     * @return converted unsigned integer\\n     */\\n    function intToUint(int256 a) internal pure returns (uint256) {\\n        if (a < 0) {\\n            return uint256(-a);\\n        } else {\\n            return uint256(a);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd580557dc2c337a870d632b1120f2ec0f7494056d48620598a11d09418dcfa5\",\"license\":\"UNLICENSED\"},\"contracts/GammaProtocol/packages/oz/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// openzeppelin-contracts v3.1.0\\n\\npragma solidity 0.6.10;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal virtual view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal virtual view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x000c7586159271c271c321d18f081e4927c8abfca82eae8760e93134e46cabdb\",\"license\":\"MIT\"},\"contracts/GammaProtocol/packages/oz/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// openzeppelin-contracts v3.1.0\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xb6d430bc79061b7e7115f305f00c7d65e52d0cc9357eb5a9c88d4aa6fa643ec5\",\"license\":\"MIT\"},\"contracts/GammaProtocol/packages/oz/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// openzeppelin-contracts v3.1.0\\n\\n/* solhint-disable */\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe257e662689b978c321f9618441d4e0233276acea88093d3d344873592636c18\",\"license\":\"MIT\"},\"contracts/GammaProtocol/packages/oz/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// openzeppelin-contracts v3.1.0\\n\\n/* solhint-disable */\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 private constant _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x5c37725e4c762112901151ff9fbd6678f2edd936666f987d0904865b528647e5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526200001d600060086200010860201b620011eb1760201c565b516002553480156200002e57600080fd5b50604051620047fa380380620047fa833981016040819052620000519162000387565b6000620000666001600160e01b036200020616565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b038116620000e25760405162461bcd60e51b8152600401620000d99062000489565b60405180910390fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055620004d1565b6200011262000374565b6200011c62000374565b601b8314156200015157604051806020016040528062000147866200020a60201b620012ab1760201c565b90529050620001fd565b601b831115620001c357600062000178601b856200023660201b620012d41790919060201c565b90506040518060200160405280620001b7620001a684600a0a896200028060201b620013161790919060201c565b6200020a60201b620012ab1760201c565b815250915050620001fd565b600083601b0390506040518060200160405280620001f7620001a684600a0a89620002ca60201b620013581790919060201c565b90529150505b90505b92915050565b3390565b6000600160ff1b8210620002325760405162461bcd60e51b8152600401620000d99062000406565b5090565b6000620001fd83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506200030a60201b60201c565b6000620001fd83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506200033960201b60201c565b600082620002db5750600062000200565b82820282848281620002e957fe5b0414620001fd5760405162461bcd60e51b8152600401620000d99062000448565b60008184841115620003315760405162461bcd60e51b8152600401620000d99190620003b0565b505050900390565b600081836200035d5760405162461bcd60e51b8152600401620000d99190620003b0565b5060008385816200036a57fe5b0495945050505050565b6040518060200160405280600081525090565b60006020828403121562000399578081fd5b81516001600160a01b0381168114620001fd578182fd5b6000602080835283518082850152825b81811015620003de57858101830151858201604001528201620003c0565b81811115620003f05783604083870101525b50601f01601f1916929092016040019392505050565b60208082526022908201527f4669786564506f696e74496e743235363a206f7574206f6620696e742072616e604082015261676560f01b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526028908201527f4d617267696e43616c63756c61746f723a20696e76616c6964206f7261636c65604082015267206164647265737360c01b606082015260800190565b61431980620004e16000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80638da5cb5b116100b8578063b682bcf81161007c578063b682bcf81461029a578063c73547e3146102ad578063cd43fbfb146102c0578063dc1b3f00146102e1578063e592301a146102f4578063f2fde38b146102fc57610142565b80638da5cb5b146102425780639953d7e71461024a5780639a783d111461025d578063a6c5690714610270578063b29d5ee81461029257610142565b80636ccb95061161010a5780636ccb9506146101d7578063715018a6146101ea5780637ad7f800146101f45780637dc0d1d0146102075780637f519b721461021c5780638aab8fa51461022f57610142565b8063053fe57c146101475780630b0509fb14610171578063463459001461019157806347840930146101a457806347d438a5146101b7575b600080fd5b61015a6101553660046133ea565b61030f565b604051610168929190614229565b60405180910390f35b61018461017f366004613331565b61034a565b6040516101689190614239565b61018461019f3660046130dc565b6103c5565b6101846101b23660046130c0565b6103ef565b6101ca6101c53660046130dc565b610594565b604051610168919061359e565b6101846101e53660046130c0565b61060c565b6101f2610627565b005b6101f2610202366004613251565b6106a6565b61020f6107a7565b6040516101689190613522565b6101f261022a366004613137565b6107b6565b6101f261023d3660046131ee565b610a8d565b61020f610b46565b6101846102583660046130c0565b610b55565b6101f261026b3660046133bf565b610b70565b61028361027e36600461342d565b610c1c565b604051610168939291906135e2565b610184610ec5565b6101f26102a83660046133bf565b610ecb565b6101f26102bb36600461347f565b610f6b565b6102d36102ce3660046133ea565b610fe0565b604051610168929190614242565b6101846102ef3660046131ee565b6110fa565b61018461112f565b6101f261030a3660046130c0565b611135565b610317612d96565b61031f612d96565b610327612da9565b6103318585611392565b905061033d85826117ad565b92509250505b9250929050565b6000806103598b8b8b86611cd5565b9050610363612d96565b61036e8960086111eb565b9050610378612d96565b6103838960086111eb565b905061038d612d96565b6103988960086111eb565b90506103b36103ab858584868d8c611d0e565b886000611e94565b9e9d5050505050505050505050505050565b6000806103d486868686611cd5565b6000908152600760205260409020549150505b949350505050565b60006001600160a01b0382166104205760405162461bcd60e51b81526004016104179061378b565b60405180910390fd5b6000829050600080600080600080866001600160a01b031663af0968fc6040518163ffffffff1660e01b815260040160c06040518083038186803b15801561046757600080fd5b505afa15801561047b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049f91906132be565b955095509550955095509550814210156104cb5760405162461bcd60e51b8152600401610417906137d2565b6104d3612d96565b6104e08686858786611f67565b90506104ea612d96565b6104f682878a87611fc8565b90506000886001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561053357600080fd5b505afa158015610547573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056b9190613501565b60ff1690506105828282600163ffffffff611e9416565b9a50505050505050505050505b919050565b606060006105a486868686611cd5565b60008181526005602090815260409182902080548351818402810184019094528084529394509192908301828280156105fc57602002820191906000526020600020905b8154815260200190600101908083116105e8575b5050505050915050949350505050565b6001600160a01b031660009081526003602052604090205490565b61062f612154565b6000546001600160a01b0390811691161461065c5760405162461bcd60e51b815260040161041790613d7b565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6106ae612154565b6000546001600160a01b039081169116146106db5760405162461bcd60e51b815260040161041790613d7b565b600081116106fb5760405162461bcd60e51b815260040161041790613b87565b600061070987878787611cd5565b6000818152600660209081526040808320878452909152902054909150806107435760405162461bcd60e51b815260040161041790613f55565b6000828152600660209081526040808320878452909152908190208490555182907f39bab32d3b88604bdfbf6e8c3b1aaaf9bb6013da4fd5206dee9e3b00ee6f2cf99061079590879085908890614260565b60405180910390a25050505050505050565b6008546001600160a01b031681565b6107be612154565b6000546001600160a01b039081169116146107eb5760405162461bcd60e51b815260040161041790613d7b565b826108085760405162461bcd60e51b81526004016104179061386d565b8281146108275760405162461bcd60e51b8152600401610417906139d8565b600061083589898989611cd5565b6000818152600560205260409020805491925090158061089057508054819061086590600163ffffffff6112d416565b8154811061086f57fe5b90600052602060002001548686600081811061088757fe5b90506020020135115b6108ac5760405162461bcd60e51b815260040161041790613fa2565b60005b85811015610a8057856108c982600163ffffffff61215816565b10156109225786866108e283600163ffffffff61215816565b8181106108eb57fe5b905060200201358787838181106108fe57fe5b90506020020135106109225760405162461bcd60e51b815260040161041790613e5e565b600085858381811061093057fe5b90506020020135116109545760405162461bcd60e51b81526004016104179061381a565b84848281811061096057fe5b9050602002013560066000858152602001908152602001600020600089898581811061098857fe5b90506020020135815260200190815260200160002081905550818787838181106109ae57fe5b83546001810185556000948552602094859020919094029290920135919092015550827fcaae9881bd3ac6f531c9e6021f1f873b93a83648e348624eef8f9ba9757fcb628888848181106109fe57fe5b90506020020135604051610a129190614239565b60405180910390a2827fcbb8d688de73727385afee9d53a2771ae5fe45293ff6de0ba46b201ab29df115888884818110610a4857fe5b90506020020135878785818110610a5b57fe5b90506020020135604051610a70929190614252565b60405180910390a26001016108af565b5050505050505050505050565b610a95612154565b6000546001600160a01b03908116911614610ac25760405162461bcd60e51b815260040161041790613d7b565b60008111610ae25760405162461bcd60e51b8152600401610417906140e6565b6000610af086868686611cd5565b600081815260076020526040908190208490555190915081907f78d22b4a9e4e0e1db30e7762696456ca380dc80efc59f416a299b97213b6d31690610b36908590614239565b60405180910390a2505050505050565b6000546001600160a01b031690565b6001600160a01b031660009081526004602052604090205490565b610b78612154565b6000546001600160a01b03908116911614610ba55760405162461bcd60e51b815260040161041790613d7b565b60008111610bc55760405162461bcd60e51b815260040161041790613902565b6001600160a01b03821660008181526003602052604090819020839055517f8ef429e6cec4339c5f0187fb930764fb967114bf09bc8bb06a552ba32923fd8690610c10908490614239565b60405180910390a25050565b600080600085600114610c415760405162461bcd60e51b815260040161041790613ea7565b610c49612da9565b610c538888611392565b9050806102200151610c6f575060009250829150819050610ebb565b8060e001514210610c925760405162461bcd60e51b815260040161041790613ce6565b6008548151604051631b85462d60e01b815260009283926001600160a01b0390911691631b85462d91610cc9918b90600401613579565b604080518083038186803b158015610ce057600080fd5b505afa158015610cf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1891906134de565b91509150878111610d3b5760405162461bcd60e51b81526004016104179061371f565b610d43612e45565b6040518060600160405280610d718d60600151600081518110610d6257fe5b602002602001015160086111eb565b8152602001610d858660c0015160086111eb565b8152602001610d958560086111eb565b81525090506000610db9856000015186602001518760400151886101c00151611cd5565b9050610dc3612d96565b610dea8d60a00151600081518110610dd757fe5b60200260200101518761018001516111eb565b9050610df4612d96565b610e17838560000151866040015187602001518b60e001518c6101c00151611d0e565b9050610e29818363ffffffff61217d16565b15610e45575060009850889750879650610ebb95505050505050565b610e4d612d96565b610e65856020015186604001518a6101c00151612185565b90506000610e8a8487600001518489604001518b8e61018001518f6101c0015161220c565b6040998a01516001600160a01b031660009081526003602052999099205460019c50989a5097985050505050505050505b9450945094915050565b60015490565b610ed3612154565b6000546001600160a01b03908116911614610f005760405162461bcd60e51b815260040161041790613d7b565b60008111610f205760405162461bcd60e51b815260040161041790614045565b6001600160a01b03821660008181526004602052604090819020839055517f1514f5c7d8107a1307f260cc1b55b81c75a5ca4d924f64febff06d2b134ab33b90610c10908490614239565b610f73612154565b6000546001600160a01b03908116911614610fa05760405162461bcd60e51b815260040161041790613d7b565b60018190556040517fe44c6dd1fc3826ad24b81f17cf04849cedd368e002a52e89a845d14d3474e20a90610fd5908390614239565b60405180910390a150565b600080610feb612da9565b610ff58585611392565b90506110018582612354565b8061022001511580156110175750806102000151155b1561105757600081610240015161102f576000611049565b8560a0015160008151811061104057fe5b60200260200101515b935060019250610343915050565b61105f612d96565b611067612d96565b61107187846117ad565b9150915061107d612d96565b61108d838363ffffffff61248b16565b604080516020810190915260025481529091506000906110b490839063ffffffff6124bd16565b905060008561020001516110cd578561010001516110d4565b8561016001515b905060006110e984838563ffffffff611e9416565b9b929a509198505050505050505050565b60008061110987878787611cd5565b600090815260066020908152604080832086845290915290205491505095945050505050565b610e1081565b61113d612154565b6000546001600160a01b0390811691161461116a5760405162461bcd60e51b815260040161041790613d7b565b6001600160a01b0381166111905760405162461bcd60e51b8152600401610417906138bc565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6111f3612d96565b6111fb612d96565b601b831415611221576040518060200160405280611218866112ab565b905290506112a2565b601b83111561127357600061123d84601b63ffffffff6112d416565b9050604051806020016040528061126861126384600a0a8961131690919063ffffffff16565b6112ab565b8152509150506112a2565b6040805160208101909152601b849003908061129c61126388600a86900a63ffffffff61135816565b90529150505b90505b92915050565b6000600160ff1b82106112d05760405162461bcd60e51b81526004016104179061395f565b5090565b60006112a283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506124c5565b60006112a283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506124f1565b600082611367575060006112a5565b8282028284828161137457fe5b04146112a25760405162461bcd60e51b815260040161041790613d3a565b61139a612da9565b6113a2612da9565b50604080516102608101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201819052610160820181905261018082018190526101a082018190526101c082018190526101e08201819052610200820181905261022082018190526102408201529084015161144790612528565b1515610200820152835161145a90612528565b1515610220820152604084015161147090612528565b15156102408201526101a08101839052610200810151156115c6576000846020015160008151811061149e57fe5b60200260200101519050806001600160a01b031663af0968fc6040518163ffffffff1660e01b815260040160c06040518083038186803b1580156114e157600080fd5b505afa1580156114f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151991906132be565b15156101e08801526101408701526101208601526001600160a01b03908116608086015290811660608501521660a083018190526040805163313ce56760e01b8152905163313ce56791600480820192602092909190829003018186803b15801561158357600080fd5b505afa158015611597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bb9190613501565b60ff16610160830152505b8061022001511561170957600084600001516000815181106115e457fe5b60200260200101519050806001600160a01b031663af0968fc6040518163ffffffff1660e01b815260040160c06040518083038186803b15801561162757600080fd5b505afa15801561163b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165f91906132be565b15156101c088015260e087015260c08601526001600160a01b039081166020808701919091529181168552919091166040808501829052805163313ce56760e01b81529051919263313ce56792600480840193829003018186803b1580156116c657600080fd5b505afa1580156116da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fe9190613501565b60ff16610100830152505b806102400151156112a257836040015160008151811061172557fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561176557600080fd5b505afa158015611779573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179d9190613501565b60ff166101808201529392505050565b6117b5612d96565b6117bd612d96565b6117c5612d96565b8361022001516117e457604080516020810190915260025481526117f8565b6117f88560600151600081518110610d6257fe5b9050611802612d96565b8461020001516118215760408051602081019091526002548152611835565b6118358660800151600081518110610d6257fe5b905061183f612d96565b85610240015161185e5760408051602081019091526002548152611872565b6118728760a00151600081518110610dd757fe5b905061187c612d96565b86610220015161189b57604080516020810190915260025481526118aa565b6118aa8760c0015160086111eb565b90506118b4612e77565b6040518060a001604052808961022001516118d35789606001516118d6565b89515b6001600160a01b031681526020018961022001516118f8578960a001516118fe565b89604001515b6001600160a01b03168152602001896102200151611920578960800151611926565b89602001515b6001600160a01b031681526020018961022001516119495789610140015161194f565b8960e001515b815260200189610220015161196957896101e00151611970565b896101c001515b151581525090508060600151421015611bff57876101a0015160011415611b5857611999612d96565b6040808a01516001600160a01b03166000908152600360205220546101808a01516119c491906111eb565b90506119ce612d96565b6040808b01516001600160a01b03166000908152600460205220546101808b01516119f991906111eb565b60408051602081019091526002548152909150611a1d90869063ffffffff61256616565b15611a7a57611a32858363ffffffff61256616565b611a4e5760405162461bcd60e51b815260040161041790613b04565b611a5e858263ffffffff61217d16565b611a7a5760405162461bcd60e51b81526004016104179061369c565b611a82612d96565b6008548b516040516341976e0960e01b8152611b0c926001600160a01b0316916341976e0991611ab59190600401613522565b60206040518083038186803b158015611acd57600080fd5b505afa158015611ae1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b059190613497565b60086111eb565b90506000611b2d8c600001518d602001518e604001518f6101c00151611cd5565b905086611b46828b858a8a606001518b60800151611d0e565b9a509a50505050505050505050610343565b611b60612d96565b886102000151611b7f5760408051602081019091526002548152611b8f565b611b8f89610120015160086111eb565b9050816080015115611bd557611ba3612d96565b611baf8787868561256d565b905084611bc582856040015186602001516125ba565b9850985050505050505050610343565b611bdd612d96565b611be98787868561271f565b905084611bc582856000015186602001516125ba565b611c07612d96565b886102200151611c265760408051602081019091526002548152611c47565b611c4789600001518a602001518b60e001518c60c001518660800151611f67565b9050611c51612d96565b896102000151611c705760408051602081019091526002548152611c93565b611c938a606001518b608001518c61014001518d61012001518760800151611f67565b9050611c9d612d96565b611ca9888885856127bb565b905085611cc482866040015187602001518860600151611fc8565b995099505050505050505050610343565b600084848484604051602001611cee9493929190613536565b604051602081830303815290604052805190602001209050949350505050565b611d16612d96565b611d1e612d96565b611d2888856127e6565b9050611d32612d96565b50604080516020808201835260008b8152600790915291909120548152611d57612d96565b611d5f612d96565b611d67612d96565b8615611df957611d8689611d81868d63ffffffff61295116565b612998565b9250611dc0611dab611d9e868d63ffffffff61295116565b8b9063ffffffff61248b16565b604080516020810190915260025481526129b6565b9150611df28b611de684611dda898863ffffffff61295116565b9063ffffffff6129cd16565b9063ffffffff61295116565b9050611e85565b611e01612d96565b611e186b033b2e3c9fd0803ce8000000601b6111eb565b9050611e3e81611d818d611e328e8a63ffffffff61295116565b9063ffffffff6129f616565b9350611e67611dab611e5a8d611e328e8a63ffffffff61295116565b839063ffffffff61248b16565b9250611e818c611de685611dda8a8963ffffffff61295116565b9150505b9b9a5050505050505050505050565b600080601b841415611eb2578451611eab90612a2c565b9050611f5d565b601b841115611eeb576000601b85039050611ee381600a0a611ed78860000151612a2c565b9063ffffffff61135816565b915050611f5d565b601b849003600084611f28576000611f1983600a0a611f0d8a60000151612a2c565b9063ffffffff612a4816565b90508015611f2657600191505b505b611f5881611f4c84600a0a611f408b60000151612a2c565b9063ffffffff61131616565b9063ffffffff61215816565b925050505b90505b9392505050565b611f6f612d96565b611f77612d96565b611f828460086111eb565b9050611f8c612d96565b611f98600160006111eb565b9050611fa2612d96565b611fae828a8a8a611fc8565b9050611fbb838287612185565b9998505050505050505050565b611fd0612d96565b826001600160a01b0316846001600160a01b03161415611ff15750836103e7565b6008546040516301957f8160e01b815260009182916001600160a01b03909116906301957f81906120289089908890600401613560565b604080518083038186803b15801561203f57600080fd5b505afa158015612053573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207791906134af565b6008546040516301957f8160e01b815292945090925060009182916001600160a01b0316906301957f81906120b2908a908a90600401613560565b604080518083038186803b1580156120c957600080fd5b505afa1580156120dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210191906134af565b9150915082801561210f5750805b61212b5760405162461bcd60e51b815260040161041790613c36565b611fbb6121398360086111eb565b611e326121478760086111eb565b8c9063ffffffff61295116565b3390565b6000828201838110156112a25760405162461bcd60e51b8152600401610417906139a1565b519051131590565b61218d612d96565b81156121d3576121a3848463ffffffff61256616565b6121bc57604080516020810190915260025481526121cc565b6121cc848463ffffffff61248b16565b9050611f60565b6121e3838563ffffffff61256616565b6121fc5760408051602081019091526002548152611f5d565b611f5d838563ffffffff61248b16565b6000612216612d96565b61221e612d96565b61222e8a8a63ffffffff6129f616565b90506000612242428863ffffffff6112d416565b9050610e10811061225557819250612342565b61225d612d96565b612265612d96565b612272600154601b6111eb565b905086156122a45761229d611dab612290838d63ffffffff61295116565b8d9063ffffffff61248b16565b91506122ce565b6122cb8a611e32611dab6122be858463ffffffff61295116565b8f9063ffffffff61248b16565b91505b506122d7612d96565b6122e28360126111eb565b90506122ec612d96565b6122f9610e1060126111eb565b905061232361231682611e3285611de68a8963ffffffff61248b16565b849063ffffffff6129cd16565b9550612335868663ffffffff61256616565b1561233e578495505b5050505b611e858387600163ffffffff611e9416565b815151600110156123775760405162461bcd60e51b815260040161041790613ff0565b6001826020015151111561239d5760405162461bcd60e51b815260040161041790613a1e565b600182604001515111156123c35760405162461bcd60e51b815260040161041790613ef8565b606082015151825151146123e95760405162461bcd60e51b815260040161041790613ab3565b816080015151826020015151146124125760405162461bcd60e51b815260040161041790614130565b8160a00151518260400151511461243b5760405162461bcd60e51b815260040161041790614180565b6124458282612a8a565b6124615760405162461bcd60e51b815260040161041790613c89565b61246b8282612bc4565b6124875760405162461bcd60e51b815260040161041790613df7565b5050565b612493612d96565b60408051602081019091528251845182916124b4919063ffffffff612c6416565b90529392505050565b519051121590565b600081848411156124e95760405162461bcd60e51b815260040161041791906135fa565b505050900390565b600081836125125760405162461bcd60e51b815260040161041791906135fa565b50600083858161251e57fe5b0495945050505050565b60008082511180156112a5575060006001600160a01b03168260008151811061254d57fe5b60200260200101516001600160a01b0316141592915050565b5190511390565b612575612d96565b6125b1611dab6125956125888888612998565b859063ffffffff61295116565b6125a5888763ffffffff61295116565b9063ffffffff61248b16565b95945050505050565b6125c2612d96565b816001600160a01b0316836001600160a01b031614156125e3575082611f60565b6008546040516341976e0960e01b81526000916001600160a01b0316906341976e0990612614908790600401613522565b60206040518083038186803b15801561262c57600080fd5b505afa158015612640573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126649190613497565b6008546040516341976e0960e01b81529192506000916001600160a01b03909116906341976e099061269a908790600401613522565b60206040518083038186803b1580156126b257600080fd5b505afa1580156126c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ea9190613497565b90506127156126fa8260086111eb565b611e326127088560086111eb565b899063ffffffff61295116565b9695505050505050565b612727612d96565b6040805160208101909152600254815261274890839063ffffffff612caa16565b1561276757612760611dab868663ffffffff61248b16565b90506103e7565b61276f612d96565b61278783611e3288611de6838963ffffffff61248b16565b9050612791612d96565b6127a4611dab888863ffffffff61248b16565b90506127b082826129b6565b979650505050505050565b6127c3612d96565b6125b16127d6838663ffffffff61295116565b6125a5858863ffffffff61295116565b6127ee612d96565b60008381526005602090815260409182902080548351818402810184019094528084526060939283018282801561284457602002820191906000526020600020905b815481526020019060010190808311612830575b5050505050905080516000141561286d5760405162461bcd60e51b81526004016104179061364d565b600061287f844263ffffffff6112d416565b90508082612898600185516112d490919063ffffffff16565b815181106128a257fe5b602002602001015110156128c85760405162461bcd60e51b8152600401610417906141d6565b60005b82518160ff1610156129485781838260ff16815181106128e757fe5b60200260200101511061294057600086815260066020526040812084516129369290869060ff861690811061291857fe5b6020026020010151815260200190815260200160002054601b6111eb565b93505050506112a5565b6001016128cb565b50505092915050565b612959612d96565b60408051602081019091528251845182916b033b2e3c9fd0803ce8000000916129879163ffffffff612cb116565b8161298e57fe5b0590529392505050565b6129a0612d96565b81518351126129af57816112a2565b5090919050565b6129be612d96565b81518351136129af57816112a2565b6129d5612d96565b60408051602081019091528251845182916124b4919063ffffffff612d1c16565b6129fe612d96565b604080516020810190915282518451829190612987906b033b2e3c9fd0803ce800000063ffffffff612cb116565b600080821215612a415781600003905061058f565b508061058f565b60006112a283836040518060400160405280601881526020017f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000815250612d62565b6000816101a0015160011415612abd5781610200015115612abd5760405162461bcd60e51b815260040161041790613bd9565b8161020001511580612ad25750816102200151155b15612adf575060016112a5565b82518051600090612aec57fe5b60200260200101516001600160a01b03168360200151600081518110612b0e57fe5b60200260200101516001600160a01b031614158015612b46575081600001516001600160a01b031682606001516001600160a01b0316145b8015612b6b575081602001516001600160a01b031682608001516001600160a01b0316145b8015612b90575081604001516001600160a01b03168260a001516001600160a01b0316145b8015612ba457508160e00151826101400151145b80156112a25750816101c001511515826101e00151151514905092915050565b610240810151600090600190612bdb5790506112a5565b82610220015115612c1e578360400151600081518110612bf757fe5b60200260200101516001600160a01b031683604001516001600160a01b03161490506112a2565b826102000151156112a2578360400151600081518110612c3a57fe5b60200260200101516001600160a01b03168360a001516001600160a01b0316149050905092915050565b6000818303818312801590612c795750838113155b80612c8e5750600083128015612c8e57508381135b6112a25760405162461bcd60e51b8152600401610417906140a2565b5190511490565b600082612cc0575060006112a5565b82600019148015612cd45750600160ff1b82145b15612cf15760405162461bcd60e51b815260040161041790613db0565b82820282848281612cfe57fe5b05146112a25760405162461bcd60e51b815260040161041790613db0565b6000828201818312801590612d315750838112155b80612d465750600083128015612d4657508381125b6112a25760405162461bcd60e51b815260040161041790613a72565b60008183612d835760405162461bcd60e51b815260040161041791906135fa565b50828481612d8d57fe5b06949350505050565b6040518060200160405280600081525090565b6040805161026081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081018290526101c081018290526101e081018290526102008101829052610220810182905261024081019190915290565b6040518060600160405280612e58612d96565b8152602001612e65612d96565b8152602001612e72612d96565b905290565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915290565b600082601f830112612eb5578081fd5b8135612ec8612ec38261429d565b614276565b818152915060208083019084810181840286018201871015612ee957600080fd5b60005b84811015612f11578135612eff816142bd565b84529282019290820190600101612eec565b505050505092915050565b60008083601f840112612f2d578081fd5b50813567ffffffffffffffff811115612f44578182fd5b602083019150836020808302850101111561034357600080fd5b600082601f830112612f6e578081fd5b8135612f7c612ec38261429d565b818152915060208083019084810181840286018201871015612f9d57600080fd5b60005b84811015612f1157813584529282019290820190600101612fa0565b600060c08284031215612fcd578081fd5b612fd760c0614276565b9050813567ffffffffffffffff80821115612ff157600080fd5b612ffd85838601612ea5565b8352602084013591508082111561301357600080fd5b61301f85838601612ea5565b6020840152604084013591508082111561303857600080fd5b61304485838601612ea5565b6040840152606084013591508082111561305d57600080fd5b61306985838601612f5e565b6060840152608084013591508082111561308257600080fd5b61308e85838601612f5e565b608084015260a08401359150808211156130a757600080fd5b506130b484828501612f5e565b60a08301525092915050565b6000602082840312156130d1578081fd5b81356112a2816142bd565b600080600080608085870312156130f1578283fd5b84356130fc816142bd565b9350602085013561310c816142bd565b9250604085013561311c816142bd565b9150606085013561312c816142d5565b939692955090935050565b60008060008060008060008060c0898b031215613152578384fd5b883561315d816142bd565b9750602089013561316d816142bd565b9650604089013561317d816142bd565b9550606089013561318d816142d5565b9450608089013567ffffffffffffffff808211156131a9578586fd5b6131b58c838d01612f1c565b909650945060a08b01359150808211156131cd578384fd5b506131da8b828c01612f1c565b999c989b5096995094979396929594505050565b600080600080600060a08688031215613205578081fd5b8535613210816142bd565b94506020860135613220816142bd565b93506040860135613230816142bd565b92506060860135613240816142d5565b949793965091946080013592915050565b60008060008060008060c08789031215613269578182fd5b8635613274816142bd565b95506020870135613284816142bd565b94506040870135613294816142bd565b935060608701356132a4816142d5565b9598949750929560808101359460a0909101359350915050565b60008060008060008060c087890312156132d6578182fd5b86516132e1816142bd565b60208801519096506132f2816142bd565b6040880151909550613303816142bd565b80945050606087015192506080870151915060a0870151613323816142d5565b809150509295509295509295565b60008060008060008060008060006101208a8c03121561334f578283fd5b893561335a816142bd565b985060208a013561336a816142bd565b975060408a013561337a816142bd565b965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a013591506101008a01356133ae816142d5565b809150509295985092959850929598565b600080604083850312156133d1578182fd5b82356133dc816142bd565b946020939093013593505050565b600080604083850312156133fc578182fd5b823567ffffffffffffffff811115613412578283fd5b61341e85828601612fbc565b95602094909401359450505050565b60008060008060808587031215613442578182fd5b843567ffffffffffffffff811115613458578283fd5b61346487828801612fbc565b97602087013597506040870135966060013595509350505050565b600060208284031215613490578081fd5b5035919050565b6000602082840312156134a8578081fd5b5051919050565b600080604083850312156134c1578182fd5b8251915060208301516134d3816142d5565b809150509250929050565b600080604083850312156134f0578182fd5b505080516020909101519092909150565b600060208284031215613512578081fd5b815160ff811681146112a2578182fd5b6001600160a01b0391909116815260200190565b6001600160a01b039485168152928416602084015292166040820152901515606082015260800190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392909216825269ffffffffffffffffffff16602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156135d6578351835292840192918401916001016135ba565b50909695505050505050565b92151583526020830191909152604082015260600190565b6000602080835283518082850152825b818110156136265785810183015185820160400152820161360a565b818111156136375783604083870101525b50601f01601f1916929092016040019392505050565b6020808252602f908201527f4d617267696e43616c63756c61746f723a2070726f647563742068617665206e60408201526e6f206578706972792076616c75657360881b606082015260800190565b60208082526057908201527f4d617267696e43616c63756c61746f723a206e616b6564206d617267696e207660408201527f61756c742073686f756c64206861766520636f6c6c61746572616c20616d6f7560608201527f6e74206c657373207468616e2063617020616d6f756e74000000000000000000608082015260a00190565b60208082526046908201527f4d617267696e43616c63756c61746f723a2061756374696f6e2074696d65737460408201527f616d702073686f756c6420626520706f7374207661756c74206c61746573742060608201526575706461746560d01b608082015260a00190565b60208082526027908201527f4d617267696e43616c63756c61746f723a20496e76616c696420746f6b656e206040820152666164647265737360c81b606082015260800190565b60208082526028908201527f4d617267696e43616c63756c61746f723a204f746f6b656e206e6f74206578706040820152671a5c9959081e595d60c21b606082015260800190565b60208082526033908201527f4d617267696e43616c63756c61746f723a206e6f2065787069727920757070656040820152721c88189bdd5b99081d985b1d5948199bdd5b99606a1b606082015260800190565b6020808252602f908201527f4d617267696e43616c63756c61746f723a20696e76616c69642074696d65732060408201526e746f2065787069727920617272617960881b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526039908201527f4d617267696e43616c63756c61746f723a206475737420616d6f756e7420736860408201527f6f756c642062652067726561746572207468616e207a65726f00000000000000606082015260800190565b60208082526022908201527f4669786564506f696e74496e743235363a206f7574206f6620696e742072616e604082015261676560f01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526026908201527f4d617267696e43616c63756c61746f723a20696e76616c69642076616c75657360408201526520617272617960d01b606082015260800190565b60208082526034908201527f4d617267696e43616c63756c61746f723a20546f6f206d616e79206c6f6e67206040820152731bdd1bdad95b9cc81a5b881d1a19481d985d5b1d60621b606082015260800190565b60208082526021908201527f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526031908201527f4d617267696e43616c63756c61746f723a2053686f727420617373657420616e6040820152700c840c2dadeeadce840dad2e6dac2e8c6d607b1b606082015260800190565b6020808252605b908201527f4d617267696e43616c63756c61746f723a206e616b6564206d617267696e207660408201527f61756c742073686f756c64206861766520636f6c6c61746572616c20616d6f7560608201527f6e742067726561746572207468616e206475737420616d6f756e740000000000608082015260a00190565b60208082526032908201527f4d617267696e43616c63756c61746f723a20696e76616c6964206f7074696f6e60408201527120757070657220626f756e642076616c756560701b606082015260800190565b6020808252603c908201527f4d617267696e43616c63756c61746f723a206e616b6564206d617267696e207660408201527f61756c742063616e6e6f742068617665206c6f6e67206f746f6b656e00000000606082015260800190565b60208082526033908201527f4d617267696e43616c63756c61746f723a2070726963652061742065787069726040820152721e481b9bdd08199a5b985b1a5e9959081e595d606a1b606082015260800190565b6020808252603b908201527f4d617267696e43616c63756c61746f723a206c6f6e67206173736574206e6f7460408201527f206d617267696e61626c6520666f722073686f72742061737365740000000000606082015260800190565b60208082526034908201527f4d617267696e43616c63756c61746f723a2063616e206e6f74206c697175696460408201527330ba329032bc3834b932b2103837b9b4ba34b7b760611b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526027908201527f5369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f604082015266766572666c6f7760c81b606082015260800190565b60208082526041908201527f4d617267696e43616c63756c61746f723a20636f6c6c61746572616c2061737360408201527f6574206e6f74206d617267696e61626c6520666f722073686f727420617373656060820152601d60fa1b608082015260a00190565b60208082526029908201527f4d617267696e43616c63756c61746f723a2074696d652073686f756c642062656040820152681034b71037b93232b960b91b606082015260800190565b60208082526031908201527f4d617267696e43616c63756c61746f723a20696e76616c6964207661756c74206040820152707479706520746f206c697175696461746560781b606082015260800190565b60208082526039908201527f4d617267696e43616c63756c61746f723a20546f6f206d616e7920636f6c6c6160408201527f746572616c2061737365747320696e20746865207661756c7400000000000000606082015260800190565b6020808252602d908201527f4d617267696e43616c63756c61746f723a20757070657220626f756e6420766160408201526c1b1d59481b9bdd08199bdd5b99609a1b606082015260800190565b6020808252602e908201527f4d617267696e43616c63756c61746f723a20657870697279206172726179206960408201526d39903737ba1034b71037b93232b960911b606082015260800190565b60208082526035908201527f4d617267696e43616c63756c61746f723a20546f6f206d616e792073686f7274604082015274081bdd1bdad95b9cc81a5b881d1a19481d985d5b1d605a1b606082015260800190565b60208082526038908201527f4d617267696e43616c63756c61746f723a2063617020616d6f756e742073686f60408201527f756c642062652067726561746572207468616e207a65726f0000000000000000606082015260800190565b60208082526024908201527f5369676e6564536166654d6174683a207375627472616374696f6e206f766572604082015263666c6f7760e01b606082015260800190565b6020808252602a908201527f4d617267696e43616c63756c61746f723a20696e76616c69642073706f742073604082015269686f636b2076616c756560b01b606082015260800190565b60208082526030908201527f4d617267696e43616c63756c61746f723a204c6f6e6720617373657420616e6460408201526f040c2dadeeadce840dad2e6dac2e8c6d60831b606082015260800190565b60208082526036908201527f4d617267696e43616c63756c61746f723a20436f6c6c61746572616c206173736040820152750cae840c2dcc840c2dadeeadce840dad2e6dac2e8c6d60531b606082015260800190565b60208082526033908201527f4d617267696e43616c63756c61746f723a2070726f647563742068617665206e6040820152726f20757070657220626f756e642076616c756560681b606082015260800190565b9151825251602082015260400190565b90815260200190565b9182521515602082015260400190565b918252602082015260400190565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff8111828210171561429557600080fd5b604052919050565b600067ffffffffffffffff8211156142b3578081fd5b5060209081020190565b6001600160a01b03811681146142d257600080fd5b50565b80151581146142d257600080fdfea26469706673582212209e3b96415b955f6ee077e8e010b592e4c60e27d8a7c432b5c6d49db884228b3464736f6c634300060a0033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Opyn",
    "methods": {
      "constructor": {
        "params": {
          "_oracle": "oracle module address"
        }
      },
      "getCollateralCap(address)": {
        "params": {
          "_collateral": "collateral asset address"
        },
        "returns": {
          "_0": "cap amount"
        }
      },
      "getCollateralDust(address)": {
        "params": {
          "_collateral": "collateral asset address"
        },
        "returns": {
          "_0": "dust amount"
        }
      },
      "getExcessCollateral((address[],address[],address[],uint256[],uint256[],uint256[]),uint256)": {
        "details": "return amount is denominated in the collateral asset for the oToken in the vault, or the collateral asset in the vault",
        "params": {
          "_vault": "theoretical vault that needs to be checked",
          "_vaultType": "vault type (0 for spread/max loss, 1 for naked margin)"
        },
        "returns": {
          "_0": "excessCollateral the amount by which the margin is above or below the required amount",
          "_1": "isExcess True if there is excess margin in the vault, False if there is a deficit of margin in the vault if True, collateral can be taken out from the vault, if False, additional collateral needs to be added to vault"
        }
      },
      "getExpiredPayoutRate(address)": {
        "params": {
          "_otoken": "oToken address"
        },
        "returns": {
          "_0": "how much collateral can be taken out by 1 otoken unit, scaled by 1e8, or how much collateral can be taken out for 1 (1e8) oToken"
        }
      },
      "getMarginRequired((address[],address[],address[],uint256[],uint256[],uint256[]),uint256)": {
        "params": {
          "_vault": "theoretical vault that needs to be checked",
          "_vaultType": "vault type"
        },
        "returns": {
          "_0": "the vault collateral amount, and marginRequired the minimal amount of collateral needed in a vault, scaled to 1e27"
        }
      },
      "getMaxPrice(address,address,address,bool,uint256)": {
        "params": {
          "_collateral": "otoken collateral asset",
          "_isPut": "otoken type",
          "_strike": "otoken strike asset",
          "_timeToExpiry": "option time to expiry timestamp",
          "_underlying": "otoken underlying asset"
        },
        "returns": {
          "_0": "option upper bound value (1e27)"
        }
      },
      "getNakedMarginRequired(address,address,address,uint256,uint256,uint256,uint256,uint256,bool)": {
        "details": "_shortAmount, _strikePrice and _underlyingPrice should be scaled by 1e8",
        "params": {
          "_collateral": "collateral asset address",
          "_collateralDecimals": "otoken collateral asset decimals",
          "_isPut": "otoken type",
          "_shortAmount": "amount of short otoken",
          "_shortExpiryTimestamp": "otoken expiry timestamp",
          "_strike": "strike asset address",
          "_strikePrice": "otoken strike price",
          "_underlying": "underlying asset address",
          "_underlyingPrice": "otoken underlying price"
        },
        "returns": {
          "_0": "collateral required for a naked margin vault, in collateral asset decimals"
        }
      },
      "getOracleDeviation()": {
        "returns": {
          "_0": "oracle deviation value (1e27)"
        }
      },
      "getSpotShock(address,address,address,bool)": {
        "params": {
          "_collateral": "otoken collateral asset",
          "_isPut": "otoken type",
          "_strike": "otoken strike asset",
          "_underlying": "otoken underlying asset"
        },
        "returns": {
          "_0": "_shockValue spot shock value (1e27)"
        }
      },
      "getTimesToExpiry(address,address,address,bool)": {
        "params": {
          "_collateral": "otoken collateral asset",
          "_isPut": "otoken type",
          "_strike": "otoken strike asset",
          "_underlying": "otoken underlying asset"
        },
        "returns": {
          "_0": "array of times to expiry"
        }
      },
      "isLiquidatable((address[],address[],address[],uint256[],uint256[],uint256[]),uint256,uint256,uint256)": {
        "details": "if the vault is of type 0, the function will revert",
        "params": {
          "_roundId": "chainlink round id",
          "_vault": "vault struct",
          "_vaultLatestUpdate": "vault latest update (timestamp when latest vault state change happened)",
          "_vaultType": "vault type (0 for max loss/spread and 1 for naked margin vault)"
        },
        "returns": {
          "_0": "isLiquidatable, true if vault is undercollateralized, liquidation price and collateral dust amount"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCollateralCap(address,uint256)": {
        "details": "can only be called by owner",
        "params": {
          "_cap": "cap amount, should be scaled by collateral asset decimals",
          "_collateral": "collateral asset address"
        }
      },
      "setCollateralDust(address,uint256)": {
        "details": "can only be called by owner",
        "params": {
          "_collateral": "collateral asset address",
          "_dust": "dust amount, should be scaled by collateral asset decimals"
        }
      },
      "setOracleDeviation(uint256)": {
        "details": "can only be called by owner",
        "params": {
          "_deviation": "deviation value"
        }
      },
      "setSpotShock(address,address,address,bool,uint256)": {
        "details": "can only be called by owner",
        "params": {
          "_collateral": "otoken collateral asset",
          "_isPut": "otoken type",
          "_shockValue": "spot shock value",
          "_strike": "otoken strike asset",
          "_underlying": "otoken underlying asset"
        }
      },
      "setUpperBoundValues(address,address,address,bool,uint256[],uint256[])": {
        "details": "can only be called by owner",
        "params": {
          "_collateral": "otoken collateral asset",
          "_isPut": "otoken type",
          "_strike": "otoken strike asset",
          "_timesToExpiry": "array of times to expiry timestamp",
          "_underlying": "otoken underlying asset",
          "_values": "upper bound values array"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateUpperBoundValue(address,address,address,bool,uint256,uint256)": {
        "details": "can only be called by owner",
        "params": {
          "_collateral": "otoken collateral asset",
          "_isPut": "otoken type",
          "_strike": "otoken strike asset",
          "_timeToExpiry": "option time to expiry timestamp",
          "_underlying": "otoken underlying asset",
          "_value": "upper bound value"
        }
      }
    },
    "stateVariables": {
      "BASE": {
        "details": "decimals used by strike price and oracle price"
      },
      "SCALING_FACTOR": {
        "details": "decimals option upper bound value, spot shock and oracle deviation"
      },
      "ZERO": {
        "details": "FixedPoint 0"
      },
      "cap": {
        "details": "mapping to store cap amount per options collateral asset (scaled by collateral asset decimals)"
      },
      "dust": {
        "details": "mapping to store dust amount per option collateral asset (scaled by collateral asset decimals)"
      },
      "maxPriceAtTimeToExpiry": {
        "details": "mapping to store option upper bound value at specific time to expiry for a given product (1e27)"
      },
      "oracle": {
        "details": "oracle module"
      },
      "oracleDeviation": {
        "details": "oracle deviation value (1e27)"
      },
      "spotShock": {
        "details": "mapping to store shock value for spot price of a given product (1e27)"
      },
      "timesToExpiryForProduct": {
        "details": "mapping to store array of time to expiry for a given product"
      }
    },
    "title": "MarginCalculator"
  },
  "userdoc": {
    "methods": {
      "AUCTION_TIME()": {
        "notice": "auction length"
      },
      "constructor": "constructor",
      "getCollateralCap(address)": {
        "notice": "get cap amount for collateral asset"
      },
      "getCollateralDust(address)": {
        "notice": "get dust amount for collateral asset"
      },
      "getExcessCollateral((address[],address[],address[],uint256[],uint256[],uint256[]),uint256)": {
        "notice": "returns the amount of collateral that can be removed from an actual or a theoretical vault"
      },
      "getExpiredPayoutRate(address)": {
        "notice": "return the cash value of an expired oToken, denominated in collateral"
      },
      "getMarginRequired((address[],address[],address[],uint256[],uint256[],uint256[]),uint256)": {
        "notice": "calculate required collateral margin for a vault"
      },
      "getMaxPrice(address,address,address,bool,uint256)": {
        "notice": "get option upper bound value for specific time to expiry"
      },
      "getNakedMarginRequired(address,address,address,uint256,uint256,uint256,uint256,uint256,bool)": {
        "notice": "return the collateral required for naked margin vault, in collateral asset decimals"
      },
      "getOracleDeviation()": {
        "notice": "get oracle deviation"
      },
      "getSpotShock(address,address,address,bool)": {
        "notice": "get spot shock value"
      },
      "getTimesToExpiry(address,address,address,bool)": {
        "notice": "get times to expiry for a specific product"
      },
      "isLiquidatable((address[],address[],address[],uint256[],uint256[],uint256[]),uint256,uint256,uint256)": {
        "notice": "check if a specific vault is undercollateralized at a specific chainlink round"
      },
      "setCollateralCap(address,uint256)": {
        "notice": "set cap amount for collateral asset used in naked margin"
      },
      "setCollateralDust(address,uint256)": {
        "notice": "set dust amount for collateral asset"
      },
      "setOracleDeviation(uint256)": {
        "notice": "set oracle deviation (1e27)"
      },
      "setSpotShock(address,address,address,bool,uint256)": {
        "notice": "set spot shock value, scaled to 1e27"
      },
      "setUpperBoundValues(address,address,address,bool,uint256[],uint256[])": {
        "notice": "set product upper bound values"
      },
      "updateUpperBoundValue(address,address,address,bool,uint256,uint256)": {
        "notice": "set option upper bound value for specific time to expiry (1e27)"
      }
    },
    "notice": "Calculator module that checks if a given vault is valid, calculates margin requirements, and settlement proceeds"
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13312,
        "contract": "contracts/GammaProtocol/core/MarginCalculator.sol:MarginCalculator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3027,
        "contract": "contracts/GammaProtocol/core/MarginCalculator.sol:MarginCalculator",
        "label": "oracleDeviation",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3035,
        "contract": "contracts/GammaProtocol/core/MarginCalculator.sol:MarginCalculator",
        "label": "ZERO",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(FixedPointInt)10174_storage"
      },
      {
        "astId": 3040,
        "contract": "contracts/GammaProtocol/core/MarginCalculator.sol:MarginCalculator",
        "label": "dust",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3045,
        "contract": "contracts/GammaProtocol/core/MarginCalculator.sol:MarginCalculator",
        "label": "cap",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3051,
        "contract": "contracts/GammaProtocol/core/MarginCalculator.sol:MarginCalculator",
        "label": "timesToExpiryForProduct",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3058,
        "contract": "contracts/GammaProtocol/core/MarginCalculator.sol:MarginCalculator",
        "label": "maxPriceAtTimeToExpiry",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3063,
        "contract": "contracts/GammaProtocol/core/MarginCalculator.sol:MarginCalculator",
        "label": "spotShock",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3066,
        "contract": "contracts/GammaProtocol/core/MarginCalculator.sol:MarginCalculator",
        "label": "oracle",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(OracleInterface)9290"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(OracleInterface)9290": {
        "encoding": "inplace",
        "label": "contract OracleInterface",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(FixedPointInt)10174_storage": {
        "encoding": "inplace",
        "label": "struct FixedPointInt256.FixedPointInt",
        "members": [
          {
            "astId": 10173,
            "contract": "contracts/GammaProtocol/core/MarginCalculator.sol:MarginCalculator",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}