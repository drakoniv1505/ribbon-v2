{
  "address": "0x59b670e9fA9D0A427751Af201D676719a970857b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "accountOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isSet",
          "type": "bool"
        }
      ],
      "name": "AccountOperatorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "CallExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isRestricted",
          "type": "bool"
        }
      ],
      "name": "CallRestricted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "accountOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CollateralAssetDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "AccountOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CollateralAssetWithdrawed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "donator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Donated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldFullPauser",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFullPauser",
          "type": "address"
        }
      ],
      "name": "FullPauserUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "otoken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "accountOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LongOtokenDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "otoken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "AccountOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LongOtokenWithdrawed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldPartialPauser",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPartialPauser",
          "type": "address"
        }
      ],
      "name": "PartialPauserUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "otoken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "otokenBurned",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "otoken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "AccountOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ShortOtokenBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "otoken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "AccountOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ShortOtokenMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPaused",
          "type": "bool"
        }
      ],
      "name": "SystemFullyPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPaused",
          "type": "bool"
        }
      ],
      "name": "SystemPartiallyPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vaultOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionStartingRound",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralPayout",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "VaultLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "accountOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultType",
          "type": "uint256"
        }
      ],
      "name": "VaultOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "accountOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultType",
          "type": "uint256"
        }
      ],
      "name": "VaultSettled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addressbook",
      "outputs": [
        {
          "internalType": "contract AddressBookInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculator",
      "outputs": [
        {
          "internalType": "contract MarginCalculatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callRestricted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "donate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fullPauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accountOwner",
          "type": "address"
        }
      ],
      "name": "getAccountVaultCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getConfiguration",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_otoken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "getProceed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "getVault",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "shortOtokens",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "longOtokens",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "collateralAssets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "shortAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "longAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "collateralAmounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct MarginVault.Vault",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_otoken",
          "type": "address"
        }
      ],
      "name": "hasExpired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressBook",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_roundId",
          "type": "uint256"
        }
      ],
      "name": "isLiquidatable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strike",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_expiry",
          "type": "uint256"
        }
      ],
      "name": "isSettlementAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum Actions.ActionType",
              "name": "actionType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "secondAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "vaultId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Actions.ActionArgs[]",
          "name": "_actions",
          "type": "tuple[]"
        }
      ],
      "name": "operate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract OracleInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "partialPauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract MarginPoolInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refreshConfiguration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isRestricted",
          "type": "bool"
        }
      ],
      "name": "setCallRestriction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fullPauser",
          "type": "address"
        }
      ],
      "name": "setFullPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isOperator",
          "type": "bool"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_partialPauser",
          "type": "address"
        }
      ],
      "name": "setPartialPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_fullyPaused",
          "type": "bool"
        }
      ],
      "name": "setSystemFullyPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_partiallyPaused",
          "type": "bool"
        }
      ],
      "name": "setSystemPartiallyPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "sync",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "systemFullyPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "systemPartiallyPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "contract WhitelistInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc49f2d029d9ef58855feb0e3dc3e483db0b8452f91a3ce16c468f6c6669e9457",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x59b670e9fA9D0A427751Af201D676719a970857b",
    "transactionIndex": 0,
    "gasUsed": "5044649",
    "logsBloom": "0x
    "blockHash": "0xfad937a5d1576780b9168583b91d02ec136f42ec345a46d7b0eff884fb9dfe0b",
    "transactionHash": "0xc49f2d029d9ef58855feb0e3dc3e483db0b8452f91a3ce16c468f6c6669e9457",
    "logs": [],
    "blockNumber": 22,
    "cumulativeGasUsed": "5044649",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "afe0a13fb4545fb36ed029d51d030119",
  "metadata": "{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"name\":\"AccountOperatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"CallExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRestricted\",\"type\":\"bool\"}],\"name\":\"CallRestricted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollateralAssetDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"AccountOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollateralAssetWithdrawed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Donated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFullPauser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFullPauser\",\"type\":\"address\"}],\"name\":\"FullPauserUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"otoken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LongOtokenDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"otoken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"AccountOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LongOtokenWithdrawed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPartialPauser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPartialPauser\",\"type\":\"address\"}],\"name\":\"PartialPauserUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"otoken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"otokenBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"otoken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"AccountOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ShortOtokenBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"otoken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"AccountOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ShortOtokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"SystemFullyPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"SystemPartiallyPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionStartingRound\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralPayout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"VaultLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultType\",\"type\":\"uint256\"}],\"name\":\"VaultOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultType\",\"type\":\"uint256\"}],\"name\":\"VaultSettled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressbook\",\"outputs\":[{\"internalType\":\"contract AddressBookInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculator\",\"outputs\":[{\"internalType\":\"contract MarginCalculatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callRestricted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fullPauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountOwner\",\"type\":\"address\"}],\"name\":\"getAccountVaultCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfiguration\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_otoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getProceed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getVault\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"shortOtokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"longOtokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"collateralAssets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shortAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"longAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"collateralAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct MarginVault.Vault\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_otoken\",\"type\":\"address\"}],\"name\":\"hasExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressBook\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"}],\"name\":\"isLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strike\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"}],\"name\":\"isSettlementAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum Actions.ActionType\",\"name\":\"actionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Actions.ActionArgs[]\",\"name\":\"_actions\",\"type\":\"tuple[]\"}],\"name\":\"operate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract OracleInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partialPauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract MarginPoolInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isRestricted\",\"type\":\"bool\"}],\"name\":\"setCallRestriction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fullPauser\",\"type\":\"address\"}],\"name\":\"setFullPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isOperator\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partialPauser\",\"type\":\"address\"}],\"name\":\"setPartialPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_fullyPaused\",\"type\":\"bool\"}],\"name\":\"setSystemFullyPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_partiallyPaused\",\"type\":\"bool\"}],\"name\":\"setSystemPartiallyPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemFullyPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemPartiallyPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"contract WhitelistInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Opyn Team\",\"methods\":{\"donate(address,uint256)\":{\"details\":\"use donate() instead of direct transfer() to store the balance in assetBalance\",\"params\":{\"_amount\":\"amount to donate to pool\",\"_asset\":\"asset address\"}},\"getAccountVaultCounter(address)\":{\"params\":{\"_accountOwner\":\"account owner address\"},\"returns\":{\"_0\":\"number of vaults\"}},\"getConfiguration()\":{\"returns\":{\"_0\":\"whitelist, the address of the whitelist module\",\"_1\":\"oracle, the address of the oracle module\",\"_2\":\"calculator, the address of the calculator module\",\"_3\":\"pool, the address of the pool module\"}},\"getPayout(address,uint256)\":{\"params\":{\"_amount\":\"amount of the oToken to calculate the payout for, always represented in 1e8\",\"_otoken\":\"oToken address\"},\"returns\":{\"_0\":\"amount of collateral to pay out\"}},\"getProceed(address,uint256)\":{\"params\":{\"_owner\":\"account owner of the vault\",\"_vaultId\":\"vaultId to return balances for\"},\"returns\":{\"_0\":\"amount of collateral that can be taken out\"}},\"getVault(address,uint256)\":{\"params\":{\"_owner\":\"account owner\",\"_vaultId\":\"vault id of vault to return\"},\"returns\":{\"_0\":\"Vault struct that corresponds to the _vaultId of _owner, vault type and the latest timestamp when the vault was updated\"}},\"hasExpired(address)\":{\"params\":{\"_otoken\":\"oToken address\"},\"returns\":{\"_0\":\"True if the otoken has expired, False if not\"}},\"initialize(address,address)\":{\"params\":{\"_addressBook\":\"addressbook module\",\"_owner\":\"account owner address\"}},\"isLiquidatable(address,uint256,uint256)\":{\"params\":{\"_owner\":\"vault owner address\",\"_roundId\":\"chainlink round id to check vault status at\",\"_vaultId\":\"vault id to check\"},\"returns\":{\"_0\":\"isUnderCollat, true if vault is undercollateralized, the price of 1 repaid otoken and the otoken collateral dust amount\"}},\"isOperator(address,address)\":{\"params\":{\"_operator\":\"account operator address\",\"_owner\":\"account owner address\"},\"returns\":{\"_0\":\"True if the _operator is an approved operator for the _owner account\"}},\"isSettlementAllowed(address,address,address,uint256)\":{\"details\":\"return if an expired oToken is ready to be settled, only true when price for underlying, strike and collateral assets at this specific expiry is available in our Oracle module\",\"params\":{\"_collateral\":\"oToken collateral asset\",\"_expiry\":\"otoken expiry timestamp\",\"_strike\":\"oToken strike asset\",\"_underlying\":\"oToken underlying asset\"},\"returns\":{\"_0\":\"True if the oToken has expired AND all oracle prices at the expiry timestamp have been finalized, False if not\"}},\"operate((uint8,address,address,address,uint256,uint256,uint256,bytes)[])\":{\"details\":\"can only be called when the system is not fully paused\",\"params\":{\"_actions\":\"array of actions arguments\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"refreshConfiguration()\":{\"details\":\"updates the configuration of the controller. can only be called by the owner\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCallRestriction(bool)\":{\"details\":\"can only be called by the owner\",\"params\":{\"_isRestricted\":\"new call restriction state\"}},\"setFullPauser(address)\":{\"details\":\"can only be called by the owner\",\"params\":{\"_fullPauser\":\"new fullPauser address\"}},\"setOperator(address,bool)\":{\"details\":\"can only be updated by the vault owner\",\"params\":{\"_isOperator\":\"new boolean value that expresses if the sender is giving or revoking privileges for _operator\",\"_operator\":\"operator that the sender wants to give privileges to or revoke them from\"}},\"setPartialPauser(address)\":{\"details\":\"can only be called by the owner\",\"params\":{\"_partialPauser\":\"new partialPauser address\"}},\"setSystemFullyPaused(bool)\":{\"details\":\"can only be called by the fullPauser\",\"params\":{\"_fullyPaused\":\"new boolean value to set systemFullyPaused to\"}},\"setSystemPartiallyPaused(bool)\":{\"details\":\"can only be called by the partialPauser\",\"params\":{\"_partiallyPaused\":\"new boolean value to set systemPartiallyPaused to\"}},\"sync(address,uint256)\":{\"details\":\"anyone can update the latest time the vault was touched by calling this function vaultLatestUpdate will sync if the vault is well collateralized\",\"params\":{\"_owner\":\"vault owner address\",\"_vaultId\":\"vault id\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"BASE\":{\"details\":\"scale used in MarginCalculator\"},\"accountVaultCounter\":{\"details\":\"mapping between an owner address and the number of owner address vaults\"},\"operators\":{\"details\":\"mapping between an account owner and their approved or unapproved account operators\"},\"vaultLatestUpdate\":{\"details\":\"mapping to store the timestamp at which the vault was last updated, will be updated in every action that changes the vault state or when calling sync()\"},\"vaultType\":{\"details\":\"mapping to map vault by each vault type, naked margin vault should be set to 1, spread/max loss vault should be set to 0\"},\"vaults\":{\"details\":\"mapping between an owner address and a specific vault using a vault id\"}},\"title\":\"Controller\"},\"userdoc\":{\"methods\":{\"callRestricted()\":{\"notice\":\"True if a call action can only be executed to a whitelisted callee\"},\"donate(address,uint256)\":{\"notice\":\"send asset amount to margin pool\"},\"fullPauser()\":{\"notice\":\"address that has permission to fully pause the system, where all system functionality is paused\"},\"getAccountVaultCounter(address)\":{\"notice\":\"get the number of vaults for a specified account owner\"},\"getConfiguration()\":{\"notice\":\"returns the current controller configuration\"},\"getPayout(address,uint256)\":{\"notice\":\"get an oToken's payout/cash value after expiry, in the collateral asset\"},\"getProceed(address,uint256)\":{\"notice\":\"return a vault's proceeds pre or post expiry, the amount of collateral that can be removed from a vault\"},\"getVault(address,uint256)\":{\"notice\":\"return a specific vault\"},\"hasExpired(address)\":{\"notice\":\"check if an oToken has expired\"},\"initialize(address,address)\":{\"notice\":\"initalize the deployed contract\"},\"isLiquidatable(address,uint256,uint256)\":{\"notice\":\"check if a vault is liquidatable in a specific round id\"},\"isOperator(address,address)\":{\"notice\":\"check if a specific address is an operator for an owner account\"},\"operate((uint8,address,address,address,uint256,uint256,uint256,bytes)[])\":{\"notice\":\"execute a number of actions on specific vaults\"},\"partialPauser()\":{\"notice\":\"address that has permission to partially pause the system, where system functionality is paused except redeem and settleVault\"},\"setCallRestriction(bool)\":{\"notice\":\"allows the owner to toggle the restriction on whitelisted call actions and only allow whitelisted call addresses or allow any arbitrary call addresses\"},\"setFullPauser(address)\":{\"notice\":\"allows the owner to set the fullPauser address\"},\"setOperator(address,bool)\":{\"notice\":\"allows a user to give or revoke privileges to an operator which can act on their behalf on their vaults\"},\"setPartialPauser(address)\":{\"notice\":\"allows the owner to set the partialPauser address\"},\"setSystemFullyPaused(bool)\":{\"notice\":\"allows the fullPauser to toggle the systemFullyPaused variable and fully pause or fully unpause the system\"},\"setSystemPartiallyPaused(bool)\":{\"notice\":\"allows the partialPauser to toggle the systemPartiallyPaused variable and partially pause or partially unpause the system\"},\"sync(address,uint256)\":{\"notice\":\"sync vault latest update timestamp\"},\"systemFullyPaused()\":{\"notice\":\"True if all system functionality is paused\"},\"systemPartiallyPaused()\":{\"notice\":\"True if all system functionality is paused other than redeem and settle vault\"}},\"notice\":\"Contract that controls the Gamma Protocol and the interaction of all sub contracts\"}},\"settings\":{\"compilationTarget\":{\"contracts/GammaProtocol/core/Controller.sol\":\"Controller\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/GammaProtocol/core/Controller.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity =0.6.10;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport {OwnableUpgradeSafe} from \\\"../packages/oz/upgradeability/OwnableUpgradeSafe.sol\\\";\\nimport {ReentrancyGuardUpgradeSafe} from \\\"../packages/oz/upgradeability/ReentrancyGuardUpgradeSafe.sol\\\";\\nimport {Initializable} from \\\"../packages/oz/upgradeability/Initializable.sol\\\";\\nimport {SafeMath} from \\\"../packages/oz/SafeMath.sol\\\";\\nimport {MarginVault} from \\\"../libs/MarginVault.sol\\\";\\nimport {Actions} from \\\"../libs/Actions.sol\\\";\\nimport {AddressBookInterface} from \\\"../interfaces/AddressBookInterface.sol\\\";\\nimport {OtokenInterface} from \\\"../interfaces/OtokenInterface.sol\\\";\\nimport {MarginCalculatorInterface} from \\\"../interfaces/MarginCalculatorInterface.sol\\\";\\nimport {OracleInterface} from \\\"../interfaces/OracleInterface.sol\\\";\\nimport {WhitelistInterface} from \\\"../interfaces/WhitelistInterface.sol\\\";\\nimport {MarginPoolInterface} from \\\"../interfaces/MarginPoolInterface.sol\\\";\\nimport {CalleeInterface} from \\\"../interfaces/CalleeInterface.sol\\\";\\n\\n/**\\n * Controller Error Codes\\n * CO1: sender is not fullPauser\\n * CO2: sender is not partialPauser\\n * CO3: callee is not a whitelisted address\\n * CO4: system is partially paused\\n * CO5: system is fully paused\\n * CO6: msg.sender is not authorized to run action\\n * CO7: invalid addressbook address\\n * CO8: invalid owner address\\n * CO9: invalid input\\n * CO10: fullPauser cannot be set to address zero\\n * CO11: partialPauser cannot be set to address zero\\n * CO12: can not run actions for different owners\\n * CO13: can not run actions on different vaults\\n * CO14: invalid final vault state\\n * CO15: can not run actions on inexistent vault\\n * CO16: cannot deposit long otoken from this address\\n * CO17: otoken is not whitelisted to be used as collateral\\n * CO18: otoken used as collateral is already expired\\n * CO19: can not withdraw an expired otoken\\n * CO20: cannot deposit collateral from this address\\n * CO21: asset is not whitelisted to be used as collateral\\n * CO22: can not withdraw collateral from a vault with an expired short otoken\\n * CO23: otoken is not whitelisted to be minted\\n * CO24: can not mint expired otoken\\n * CO25: cannot burn from this address\\n * CO26: can not burn expired otoken\\n * CO27: otoken is not whitelisted to be redeemed\\n * CO28: can not redeem un-expired otoken\\n * CO29: asset prices not finalized yet\\n * CO30: can't settle vault with no otoken\\n * CO31: can not settle vault with un-expired otoken\\n * CO32: can not settle undercollateralized vault\\n * CO33: can not liquidate vault\\n * CO34: can not leave less than collateral dust\\n * CO35: invalid vault id\\n */\\n\\n/**\\n * @title Controller\\n * @author Opyn Team\\n * @notice Contract that controls the Gamma Protocol and the interaction of all sub contracts\\n */\\ncontract Controller is Initializable, OwnableUpgradeSafe, ReentrancyGuardUpgradeSafe {\\n    using MarginVault for MarginVault.Vault;\\n    using SafeMath for uint256;\\n\\n    AddressBookInterface public addressbook;\\n    WhitelistInterface public whitelist;\\n    OracleInterface public oracle;\\n    MarginCalculatorInterface public calculator;\\n    MarginPoolInterface public pool;\\n\\n    ///@dev scale used in MarginCalculator\\n    uint256 internal constant BASE = 8;\\n\\n    /// @notice address that has permission to partially pause the system, where system functionality is paused\\n    /// except redeem and settleVault\\n    address public partialPauser;\\n\\n    /// @notice address that has permission to fully pause the system, where all system functionality is paused\\n    address public fullPauser;\\n\\n    /// @notice True if all system functionality is paused other than redeem and settle vault\\n    bool public systemPartiallyPaused;\\n\\n    /// @notice True if all system functionality is paused\\n    bool public systemFullyPaused;\\n\\n    /// @notice True if a call action can only be executed to a whitelisted callee\\n    bool public callRestricted;\\n\\n    /// @dev mapping between an owner address and the number of owner address vaults\\n    mapping(address => uint256) internal accountVaultCounter;\\n    /// @dev mapping between an owner address and a specific vault using a vault id\\n    mapping(address => mapping(uint256 => MarginVault.Vault)) internal vaults;\\n    /// @dev mapping between an account owner and their approved or unapproved account operators\\n    mapping(address => mapping(address => bool)) internal operators;\\n\\n    /******************************************************************** V2.0.0 storage upgrade ******************************************************/\\n\\n    /// @dev mapping to map vault by each vault type, naked margin vault should be set to 1, spread/max loss vault should be set to 0\\n    mapping(address => mapping(uint256 => uint256)) internal vaultType;\\n    /// @dev mapping to store the timestamp at which the vault was last updated, will be updated in every action that changes the vault state or when calling sync()\\n    mapping(address => mapping(uint256 => uint256)) internal vaultLatestUpdate;\\n\\n    /// @notice emits an event when an account operator is updated for a specific account owner\\n    event AccountOperatorUpdated(address indexed accountOwner, address indexed operator, bool isSet);\\n    /// @notice emits an event when a new vault is opened\\n    event VaultOpened(address indexed accountOwner, uint256 vaultId, uint256 indexed vaultType);\\n    /// @notice emits an event when a long oToken is deposited into a vault\\n    event LongOtokenDeposited(\\n        address indexed otoken,\\n        address indexed accountOwner,\\n        address indexed from,\\n        uint256 vaultId,\\n        uint256 amount\\n    );\\n    /// @notice emits an event when a long oToken is withdrawn from a vault\\n    event LongOtokenWithdrawed(\\n        address indexed otoken,\\n        address indexed AccountOwner,\\n        address indexed to,\\n        uint256 vaultId,\\n        uint256 amount\\n    );\\n    /// @notice emits an event when a collateral asset is deposited into a vault\\n    event CollateralAssetDeposited(\\n        address indexed asset,\\n        address indexed accountOwner,\\n        address indexed from,\\n        uint256 vaultId,\\n        uint256 amount\\n    );\\n    /// @notice emits an event when a collateral asset is withdrawn from a vault\\n    event CollateralAssetWithdrawed(\\n        address indexed asset,\\n        address indexed AccountOwner,\\n        address indexed to,\\n        uint256 vaultId,\\n        uint256 amount\\n    );\\n    /// @notice emits an event when a short oToken is minted from a vault\\n    event ShortOtokenMinted(\\n        address indexed otoken,\\n        address indexed AccountOwner,\\n        address indexed to,\\n        uint256 vaultId,\\n        uint256 amount\\n    );\\n    /// @notice emits an event when a short oToken is burned\\n    event ShortOtokenBurned(\\n        address indexed otoken,\\n        address indexed AccountOwner,\\n        address indexed from,\\n        uint256 vaultId,\\n        uint256 amount\\n    );\\n    /// @notice emits an event when an oToken is redeemed\\n    event Redeem(\\n        address indexed otoken,\\n        address indexed redeemer,\\n        address indexed receiver,\\n        address collateralAsset,\\n        uint256 otokenBurned,\\n        uint256 payout\\n    );\\n    /// @notice emits an event when a vault is settled\\n    event VaultSettled(\\n        address indexed accountOwner,\\n        address indexed oTokenAddress,\\n        address to,\\n        uint256 payout,\\n        uint256 vaultId,\\n        uint256 indexed vaultType\\n    );\\n    /// @notice emits an event when a vault is liquidated\\n    event VaultLiquidated(\\n        address indexed liquidator,\\n        address indexed receiver,\\n        address indexed vaultOwner,\\n        uint256 auctionPrice,\\n        uint256 auctionStartingRound,\\n        uint256 collateralPayout,\\n        uint256 debtAmount,\\n        uint256 vaultId\\n    );\\n    /// @notice emits an event when a call action is executed\\n    event CallExecuted(address indexed from, address indexed to, bytes data);\\n    /// @notice emits an event when the fullPauser address changes\\n    event FullPauserUpdated(address indexed oldFullPauser, address indexed newFullPauser);\\n    /// @notice emits an event when the partialPauser address changes\\n    event PartialPauserUpdated(address indexed oldPartialPauser, address indexed newPartialPauser);\\n    /// @notice emits an event when the system partial paused status changes\\n    event SystemPartiallyPaused(bool isPaused);\\n    /// @notice emits an event when the system fully paused status changes\\n    event SystemFullyPaused(bool isPaused);\\n    /// @notice emits an event when the call action restriction changes\\n    event CallRestricted(bool isRestricted);\\n    /// @notice emits an event when a donation transfer executed\\n    event Donated(address indexed donator, address indexed asset, uint256 amount);\\n\\n    /**\\n     * @notice modifier to check if the system is not partially paused, where only redeem and settleVault is allowed\\n     */\\n    modifier notPartiallyPaused {\\n        _isNotPartiallyPaused();\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice modifier to check if the system is not fully paused, where no functionality is allowed\\n     */\\n    modifier notFullyPaused {\\n        _isNotFullyPaused();\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice modifier to check if sender is the fullPauser address\\n     */\\n    modifier onlyFullPauser {\\n        require(msg.sender == fullPauser, \\\"CO1\\\");\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice modifier to check if the sender is the partialPauser address\\n     */\\n    modifier onlyPartialPauser {\\n        require(msg.sender == partialPauser, \\\"CO2\\\");\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice modifier to check if the sender is the account owner or an approved account operator\\n     * @param _sender sender address\\n     * @param _accountOwner account owner address\\n     */\\n    modifier onlyAuthorized(address _sender, address _accountOwner) {\\n        _isAuthorized(_sender, _accountOwner);\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice modifier to check if the called address is a whitelisted callee address\\n     * @param _callee called address\\n     */\\n    modifier onlyWhitelistedCallee(address _callee) {\\n        if (callRestricted) {\\n            require(_isCalleeWhitelisted(_callee), \\\"CO3\\\");\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @dev check if the system is not in a partiallyPaused state\\n     */\\n    function _isNotPartiallyPaused() internal view {\\n        require(!systemPartiallyPaused, \\\"CO4\\\");\\n    }\\n\\n    /**\\n     * @dev check if the system is not in an fullyPaused state\\n     */\\n    function _isNotFullyPaused() internal view {\\n        require(!systemFullyPaused, \\\"CO5\\\");\\n    }\\n\\n    /**\\n     * @dev check if the sender is an authorized operator\\n     * @param _sender msg.sender\\n     * @param _accountOwner owner of a vault\\n     */\\n    function _isAuthorized(address _sender, address _accountOwner) internal view {\\n        require((_sender == _accountOwner) || (operators[_accountOwner][_sender]), \\\"CO6\\\");\\n    }\\n\\n    /**\\n     * @notice initalize the deployed contract\\n     * @param _addressBook addressbook module\\n     * @param _owner account owner address\\n     */\\n    function initialize(address _addressBook, address _owner) external initializer {\\n        require(_addressBook != address(0), \\\"CO7\\\");\\n        require(_owner != address(0), \\\"CO8\\\");\\n\\n        __Ownable_init(_owner);\\n        __ReentrancyGuard_init_unchained();\\n\\n        addressbook = AddressBookInterface(_addressBook);\\n        _refreshConfigInternal();\\n\\n        callRestricted = true;\\n    }\\n\\n    /**\\n     * @notice send asset amount to margin pool\\n     * @dev use donate() instead of direct transfer() to store the balance in assetBalance\\n     * @param _asset asset address\\n     * @param _amount amount to donate to pool\\n     */\\n    function donate(address _asset, uint256 _amount) external {\\n        pool.transferToPool(_asset, msg.sender, _amount);\\n\\n        emit Donated(msg.sender, _asset, _amount);\\n    }\\n\\n    /**\\n     * @notice allows the partialPauser to toggle the systemPartiallyPaused variable and partially pause or partially unpause the system\\n     * @dev can only be called by the partialPauser\\n     * @param _partiallyPaused new boolean value to set systemPartiallyPaused to\\n     */\\n    function setSystemPartiallyPaused(bool _partiallyPaused) external onlyPartialPauser {\\n        require(systemPartiallyPaused != _partiallyPaused, \\\"CO9\\\");\\n\\n        systemPartiallyPaused = _partiallyPaused;\\n\\n        emit SystemPartiallyPaused(systemPartiallyPaused);\\n    }\\n\\n    /**\\n     * @notice allows the fullPauser to toggle the systemFullyPaused variable and fully pause or fully unpause the system\\n     * @dev can only be called by the fullPauser\\n     * @param _fullyPaused new boolean value to set systemFullyPaused to\\n     */\\n    function setSystemFullyPaused(bool _fullyPaused) external onlyFullPauser {\\n        require(systemFullyPaused != _fullyPaused, \\\"CO9\\\");\\n\\n        systemFullyPaused = _fullyPaused;\\n\\n        emit SystemFullyPaused(systemFullyPaused);\\n    }\\n\\n    /**\\n     * @notice allows the owner to set the fullPauser address\\n     * @dev can only be called by the owner\\n     * @param _fullPauser new fullPauser address\\n     */\\n    function setFullPauser(address _fullPauser) external onlyOwner {\\n        require(_fullPauser != address(0), \\\"CO10\\\");\\n        require(fullPauser != _fullPauser, \\\"CO9\\\");\\n\\n        emit FullPauserUpdated(fullPauser, _fullPauser);\\n\\n        fullPauser = _fullPauser;\\n    }\\n\\n    /**\\n     * @notice allows the owner to set the partialPauser address\\n     * @dev can only be called by the owner\\n     * @param _partialPauser new partialPauser address\\n     */\\n    function setPartialPauser(address _partialPauser) external onlyOwner {\\n        require(_partialPauser != address(0), \\\"CO11\\\");\\n        require(partialPauser != _partialPauser, \\\"CO9\\\");\\n\\n        emit PartialPauserUpdated(partialPauser, _partialPauser);\\n\\n        partialPauser = _partialPauser;\\n    }\\n\\n    /**\\n     * @notice allows the owner to toggle the restriction on whitelisted call actions and only allow whitelisted\\n     * call addresses or allow any arbitrary call addresses\\n     * @dev can only be called by the owner\\n     * @param _isRestricted new call restriction state\\n     */\\n    function setCallRestriction(bool _isRestricted) external onlyOwner {\\n        require(callRestricted != _isRestricted, \\\"CO9\\\");\\n\\n        callRestricted = _isRestricted;\\n\\n        emit CallRestricted(callRestricted);\\n    }\\n\\n    /**\\n     * @notice allows a user to give or revoke privileges to an operator which can act on their behalf on their vaults\\n     * @dev can only be updated by the vault owner\\n     * @param _operator operator that the sender wants to give privileges to or revoke them from\\n     * @param _isOperator new boolean value that expresses if the sender is giving or revoking privileges for _operator\\n     */\\n    function setOperator(address _operator, bool _isOperator) external {\\n        require(operators[msg.sender][_operator] != _isOperator, \\\"CO9\\\");\\n\\n        operators[msg.sender][_operator] = _isOperator;\\n\\n        emit AccountOperatorUpdated(msg.sender, _operator, _isOperator);\\n    }\\n\\n    /**\\n     * @dev updates the configuration of the controller. can only be called by the owner\\n     */\\n    function refreshConfiguration() external onlyOwner {\\n        _refreshConfigInternal();\\n    }\\n\\n    /**\\n     * @notice execute a number of actions on specific vaults\\n     * @dev can only be called when the system is not fully paused\\n     * @param _actions array of actions arguments\\n     */\\n    function operate(Actions.ActionArgs[] memory _actions) external nonReentrant notFullyPaused {\\n        (bool vaultUpdated, address vaultOwner, uint256 vaultId) = _runActions(_actions);\\n        if (vaultUpdated) {\\n            _verifyFinalState(vaultOwner, vaultId);\\n            vaultLatestUpdate[vaultOwner][vaultId] = now;\\n        }\\n    }\\n\\n    /**\\n     * @notice sync vault latest update timestamp\\n     * @dev anyone can update the latest time the vault was touched by calling this function\\n     * vaultLatestUpdate will sync if the vault is well collateralized\\n     * @param _owner vault owner address\\n     * @param _vaultId vault id\\n     */\\n    function sync(address _owner, uint256 _vaultId) external nonReentrant notFullyPaused {\\n        _verifyFinalState(_owner, _vaultId);\\n        vaultLatestUpdate[_owner][_vaultId] = now;\\n    }\\n\\n    /**\\n     * @notice check if a specific address is an operator for an owner account\\n     * @param _owner account owner address\\n     * @param _operator account operator address\\n     * @return True if the _operator is an approved operator for the _owner account\\n     */\\n    function isOperator(address _owner, address _operator) external view returns (bool) {\\n        return operators[_owner][_operator];\\n    }\\n\\n    /**\\n     * @notice returns the current controller configuration\\n     * @return whitelist, the address of the whitelist module\\n     * @return oracle, the address of the oracle module\\n     * @return calculator, the address of the calculator module\\n     * @return pool, the address of the pool module\\n     */\\n    function getConfiguration()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address\\n        )\\n    {\\n        return (address(whitelist), address(oracle), address(calculator), address(pool));\\n    }\\n\\n    /**\\n     * @notice return a vault's proceeds pre or post expiry, the amount of collateral that can be removed from a vault\\n     * @param _owner account owner of the vault\\n     * @param _vaultId vaultId to return balances for\\n     * @return amount of collateral that can be taken out\\n     */\\n    function getProceed(address _owner, uint256 _vaultId) external view returns (uint256) {\\n        (MarginVault.Vault memory vault, uint256 typeVault, ) = getVault(_owner, _vaultId);\\n\\n        (uint256 netValue, bool isExcess) = calculator.getExcessCollateral(vault, typeVault);\\n\\n        if (!isExcess) return 0;\\n\\n        return netValue;\\n    }\\n\\n    /**\\n     * @notice check if a vault is liquidatable in a specific round id\\n     * @param _owner vault owner address\\n     * @param _vaultId vault id to check\\n     * @param _roundId chainlink round id to check vault status at\\n     * @return isUnderCollat, true if vault is undercollateralized, the price of 1 repaid otoken and the otoken collateral dust amount\\n     */\\n    function isLiquidatable(\\n        address _owner,\\n        uint256 _vaultId,\\n        uint256 _roundId\\n    )\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (, bool isUnderCollat, uint256 price, uint256 dust) = _isLiquidatable(_owner, _vaultId, _roundId);\\n        return (isUnderCollat, price, dust);\\n    }\\n\\n    /**\\n     * @notice get an oToken's payout/cash value after expiry, in the collateral asset\\n     * @param _otoken oToken address\\n     * @param _amount amount of the oToken to calculate the payout for, always represented in 1e8\\n     * @return amount of collateral to pay out\\n     */\\n    function getPayout(address _otoken, uint256 _amount) public view returns (uint256) {\\n        uint256 rate = calculator.getExpiredPayoutRate(_otoken);\\n        return rate.mul(_amount).div(10**BASE);\\n    }\\n\\n    /**\\n     * @dev return if an expired oToken is ready to be settled, only true when price for underlying,\\n     * strike and collateral assets at this specific expiry is available in our Oracle module\\n     * @param _underlying oToken underlying asset\\n     * @param _strike oToken strike asset\\n     * @param _collateral oToken collateral asset\\n     * @param _expiry otoken expiry timestamp\\n     * @return True if the oToken has expired AND all oracle prices at the expiry timestamp have been finalized, False if not\\n     */\\n    function isSettlementAllowed(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        uint256 _expiry\\n    ) public view returns (bool) {\\n        bool isUnderlyingFinalized = oracle.isDisputePeriodOver(_underlying, _expiry);\\n        bool isStrikeFinalized = oracle.isDisputePeriodOver(_strike, _expiry);\\n        bool isCollateralFinalized = oracle.isDisputePeriodOver(_collateral, _expiry);\\n\\n        return isUnderlyingFinalized && isStrikeFinalized && isCollateralFinalized;\\n    }\\n\\n    /**\\n     * @notice get the number of vaults for a specified account owner\\n     * @param _accountOwner account owner address\\n     * @return number of vaults\\n     */\\n    function getAccountVaultCounter(address _accountOwner) external view returns (uint256) {\\n        return accountVaultCounter[_accountOwner];\\n    }\\n\\n    /**\\n     * @notice check if an oToken has expired\\n     * @param _otoken oToken address\\n     * @return True if the otoken has expired, False if not\\n     */\\n    function hasExpired(address _otoken) external view returns (bool) {\\n        uint256 otokenExpiryTimestamp = OtokenInterface(_otoken).expiryTimestamp();\\n\\n        return now >= otokenExpiryTimestamp;\\n    }\\n\\n    /**\\n     * @notice return a specific vault\\n     * @param _owner account owner\\n     * @param _vaultId vault id of vault to return\\n     * @return Vault struct that corresponds to the _vaultId of _owner, vault type and the latest timestamp when the vault was updated\\n     */\\n    function getVault(address _owner, uint256 _vaultId)\\n        public\\n        view\\n        returns (\\n            MarginVault.Vault memory,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (vaults[_owner][_vaultId], vaultType[_owner][_vaultId], vaultLatestUpdate[_owner][_vaultId]);\\n    }\\n\\n    /**\\n     * @notice execute a variety of actions\\n     * @dev for each action in the action array, execute the corresponding action, only one vault can be modified\\n     * for all actions except SettleVault, Redeem, and Call\\n     * @param _actions array of type Actions.ActionArgs[], which expresses which actions the user wants to execute\\n     * @return vaultUpdated, indicates if a vault has changed\\n     * @return owner, the vault owner if a vault has changed\\n     * @return vaultId, the vault Id if a vault has changed\\n     */\\n    function _runActions(Actions.ActionArgs[] memory _actions)\\n        internal\\n        returns (\\n            bool,\\n            address,\\n            uint256\\n        )\\n    {\\n        address vaultOwner;\\n        uint256 vaultId;\\n        bool vaultUpdated;\\n\\n        for (uint256 i = 0; i < _actions.length; i++) {\\n            Actions.ActionArgs memory action = _actions[i];\\n            Actions.ActionType actionType = action.actionType;\\n\\n            // actions except Settle, Redeem, Liquidate and Call are \\\"Vault-updating actinos\\\"\\n            // only allow update 1 vault in each operate call\\n            if (\\n                (actionType != Actions.ActionType.SettleVault) &&\\n                (actionType != Actions.ActionType.Redeem) &&\\n                (actionType != Actions.ActionType.Liquidate) &&\\n                (actionType != Actions.ActionType.Call)\\n            ) {\\n                // check if this action is manipulating the same vault as all other actions, if a vault has already been updated\\n                if (vaultUpdated) {\\n                    require(vaultOwner == action.owner, \\\"CO12\\\");\\n                    require(vaultId == action.vaultId, \\\"CO13\\\");\\n                }\\n                vaultUpdated = true;\\n                vaultId = action.vaultId;\\n                vaultOwner = action.owner;\\n            }\\n\\n            if (actionType == Actions.ActionType.OpenVault) {\\n                _openVault(Actions._parseOpenVaultArgs(action));\\n            } else if (actionType == Actions.ActionType.DepositLongOption) {\\n                _depositLong(Actions._parseDepositArgs(action));\\n            } else if (actionType == Actions.ActionType.WithdrawLongOption) {\\n                _withdrawLong(Actions._parseWithdrawArgs(action));\\n            } else if (actionType == Actions.ActionType.DepositCollateral) {\\n                _depositCollateral(Actions._parseDepositArgs(action));\\n            } else if (actionType == Actions.ActionType.WithdrawCollateral) {\\n                _withdrawCollateral(Actions._parseWithdrawArgs(action));\\n            } else if (actionType == Actions.ActionType.MintShortOption) {\\n                _mintOtoken(Actions._parseMintArgs(action));\\n            } else if (actionType == Actions.ActionType.BurnShortOption) {\\n                _burnOtoken(Actions._parseBurnArgs(action));\\n            } else if (actionType == Actions.ActionType.Redeem) {\\n                _redeem(Actions._parseRedeemArgs(action));\\n            } else if (actionType == Actions.ActionType.SettleVault) {\\n                _settleVault(Actions._parseSettleVaultArgs(action));\\n            } else if (actionType == Actions.ActionType.Liquidate) {\\n                _liquidate(Actions._parseLiquidateArgs(action));\\n            } else if (actionType == Actions.ActionType.Call) {\\n                _call(Actions._parseCallArgs(action));\\n            }\\n        }\\n\\n        return (vaultUpdated, vaultOwner, vaultId);\\n    }\\n\\n    /**\\n     * @notice verify the vault final state after executing all actions\\n     * @param _owner account owner address\\n     * @param _vaultId vault id of the final vault\\n     */\\n    function _verifyFinalState(address _owner, uint256 _vaultId) internal view {\\n        (MarginVault.Vault memory vault, uint256 typeVault, ) = getVault(_owner, _vaultId);\\n        (, bool isValidVault) = calculator.getExcessCollateral(vault, typeVault);\\n\\n        require(isValidVault, \\\"CO14\\\");\\n    }\\n\\n    /**\\n     * @notice open a new vault inside an account\\n     * @dev only the account owner or operator can open a vault, cannot be called when system is partiallyPaused or fullyPaused\\n     * @param _args OpenVaultArgs structure\\n     */\\n    function _openVault(Actions.OpenVaultArgs memory _args)\\n        internal\\n        notPartiallyPaused\\n        onlyAuthorized(msg.sender, _args.owner)\\n    {\\n        uint256 vaultId = accountVaultCounter[_args.owner].add(1);\\n\\n        require(_args.vaultId == vaultId, \\\"CO15\\\");\\n\\n        // store new vault\\n        accountVaultCounter[_args.owner] = vaultId;\\n        vaultType[_args.owner][vaultId] = _args.vaultType;\\n\\n        emit VaultOpened(_args.owner, vaultId, _args.vaultType);\\n    }\\n\\n    /**\\n     * @notice deposit a long oToken into a vault\\n     * @dev only the account owner or operator can deposit a long oToken, cannot be called when system is partiallyPaused or fullyPaused\\n     * @param _args DepositArgs structure\\n     */\\n    function _depositLong(Actions.DepositArgs memory _args)\\n        internal\\n        notPartiallyPaused\\n        onlyAuthorized(msg.sender, _args.owner)\\n    {\\n        require(_checkVaultId(_args.owner, _args.vaultId), \\\"CO35\\\");\\n        // only allow vault owner or vault operator to deposit long otoken\\n        require((_args.from == msg.sender) || (_args.from == _args.owner), \\\"CO16\\\");\\n\\n        require(whitelist.isWhitelistedOtoken(_args.asset), \\\"CO17\\\");\\n\\n        OtokenInterface otoken = OtokenInterface(_args.asset);\\n\\n        require(now < otoken.expiryTimestamp(), \\\"CO18\\\");\\n\\n        vaults[_args.owner][_args.vaultId].addLong(_args.asset, _args.amount, _args.index);\\n\\n        pool.transferToPool(_args.asset, _args.from, _args.amount);\\n\\n        emit LongOtokenDeposited(_args.asset, _args.owner, _args.from, _args.vaultId, _args.amount);\\n    }\\n\\n    /**\\n     * @notice withdraw a long oToken from a vault\\n     * @dev only the account owner or operator can withdraw a long oToken, cannot be called when system is partiallyPaused or fullyPaused\\n     * @param _args WithdrawArgs structure\\n     */\\n    function _withdrawLong(Actions.WithdrawArgs memory _args)\\n        internal\\n        notPartiallyPaused\\n        onlyAuthorized(msg.sender, _args.owner)\\n    {\\n        require(_checkVaultId(_args.owner, _args.vaultId), \\\"CO35\\\");\\n\\n        OtokenInterface otoken = OtokenInterface(_args.asset);\\n\\n        require(now < otoken.expiryTimestamp(), \\\"CO19\\\");\\n\\n        vaults[_args.owner][_args.vaultId].removeLong(_args.asset, _args.amount, _args.index);\\n\\n        pool.transferToUser(_args.asset, _args.to, _args.amount);\\n\\n        emit LongOtokenWithdrawed(_args.asset, _args.owner, _args.to, _args.vaultId, _args.amount);\\n    }\\n\\n    /**\\n     * @notice deposit a collateral asset into a vault\\n     * @dev only the account owner or operator can deposit collateral, cannot be called when system is partiallyPaused or fullyPaused\\n     * @param _args DepositArgs structure\\n     */\\n    function _depositCollateral(Actions.DepositArgs memory _args)\\n        internal\\n        notPartiallyPaused\\n        onlyAuthorized(msg.sender, _args.owner)\\n    {\\n        require(_checkVaultId(_args.owner, _args.vaultId), \\\"CO35\\\");\\n        // only allow vault owner or vault operator to deposit collateral\\n        require((_args.from == msg.sender) || (_args.from == _args.owner), \\\"CO20\\\");\\n\\n        require(whitelist.isWhitelistedCollateral(_args.asset), \\\"CO21\\\");\\n\\n        vaults[_args.owner][_args.vaultId].addCollateral(_args.asset, _args.amount, _args.index);\\n\\n        pool.transferToPool(_args.asset, _args.from, _args.amount);\\n\\n        emit CollateralAssetDeposited(_args.asset, _args.owner, _args.from, _args.vaultId, _args.amount);\\n    }\\n\\n    /**\\n     * @notice withdraw a collateral asset from a vault\\n     * @dev only the account owner or operator can withdraw collateral, cannot be called when system is partiallyPaused or fullyPaused\\n     * @param _args WithdrawArgs structure\\n     */\\n    function _withdrawCollateral(Actions.WithdrawArgs memory _args)\\n        internal\\n        notPartiallyPaused\\n        onlyAuthorized(msg.sender, _args.owner)\\n    {\\n        require(_checkVaultId(_args.owner, _args.vaultId), \\\"CO35\\\");\\n\\n        (MarginVault.Vault memory vault, , ) = getVault(_args.owner, _args.vaultId);\\n\\n        if (_isNotEmpty(vault.shortOtokens)) {\\n            OtokenInterface otoken = OtokenInterface(vault.shortOtokens[0]);\\n\\n            require(now < otoken.expiryTimestamp(), \\\"CO22\\\");\\n        }\\n\\n        vaults[_args.owner][_args.vaultId].removeCollateral(_args.asset, _args.amount, _args.index);\\n\\n        pool.transferToUser(_args.asset, _args.to, _args.amount);\\n\\n        emit CollateralAssetWithdrawed(_args.asset, _args.owner, _args.to, _args.vaultId, _args.amount);\\n    }\\n\\n    /**\\n     * @notice mint short oTokens from a vault which creates an obligation that is recorded in the vault\\n     * @dev only the account owner or operator can mint an oToken, cannot be called when system is partiallyPaused or fullyPaused\\n     * @param _args MintArgs structure\\n     */\\n    function _mintOtoken(Actions.MintArgs memory _args)\\n        internal\\n        notPartiallyPaused\\n        onlyAuthorized(msg.sender, _args.owner)\\n    {\\n        require(_checkVaultId(_args.owner, _args.vaultId), \\\"CO35\\\");\\n        require(whitelist.isWhitelistedOtoken(_args.otoken), \\\"CO23\\\");\\n\\n        OtokenInterface otoken = OtokenInterface(_args.otoken);\\n\\n        require(now < otoken.expiryTimestamp(), \\\"CO24\\\");\\n\\n        vaults[_args.owner][_args.vaultId].addShort(_args.otoken, _args.amount, _args.index);\\n\\n        otoken.mintOtoken(_args.to, _args.amount);\\n\\n        emit ShortOtokenMinted(_args.otoken, _args.owner, _args.to, _args.vaultId, _args.amount);\\n    }\\n\\n    /**\\n     * @notice burn oTokens to reduce or remove the minted oToken obligation recorded in a vault\\n     * @dev only the account owner or operator can burn an oToken, cannot be called when system is partiallyPaused or fullyPaused\\n     * @param _args MintArgs structure\\n     */\\n    function _burnOtoken(Actions.BurnArgs memory _args)\\n        internal\\n        notPartiallyPaused\\n        onlyAuthorized(msg.sender, _args.owner)\\n    {\\n        // check that vault id is valid for this vault owner\\n        require(_checkVaultId(_args.owner, _args.vaultId), \\\"CO35\\\");\\n        // only allow vault owner or vault operator to burn otoken\\n        require((_args.from == msg.sender) || (_args.from == _args.owner), \\\"CO25\\\");\\n\\n        OtokenInterface otoken = OtokenInterface(_args.otoken);\\n\\n        // do not allow burning expired otoken\\n        require(now < otoken.expiryTimestamp(), \\\"CO26\\\");\\n\\n        // remove otoken from vault\\n        vaults[_args.owner][_args.vaultId].removeShort(_args.otoken, _args.amount, _args.index);\\n\\n        // burn otoken\\n        otoken.burnOtoken(_args.from, _args.amount);\\n\\n        emit ShortOtokenBurned(_args.otoken, _args.owner, _args.from, _args.vaultId, _args.amount);\\n    }\\n\\n    /**\\n     * @notice redeem an oToken after expiry, receiving the payout of the oToken in the collateral asset\\n     * @dev cannot be called when system is fullyPaused\\n     * @param _args RedeemArgs structure\\n     */\\n    function _redeem(Actions.RedeemArgs memory _args) internal {\\n        OtokenInterface otoken = OtokenInterface(_args.otoken);\\n\\n        // check that otoken to redeem is whitelisted\\n        require(whitelist.isWhitelistedOtoken(_args.otoken), \\\"CO27\\\");\\n\\n        (address collateral, address underlying, address strike, , uint256 expiry, ) = otoken.getOtokenDetails();\\n\\n        // only allow redeeming expired otoken\\n        require(now >= expiry, \\\"CO28\\\");\\n\\n        require(isSettlementAllowed(underlying, strike, collateral, expiry), \\\"CO29\\\");\\n\\n        uint256 payout = getPayout(_args.otoken, _args.amount);\\n\\n        otoken.burnOtoken(msg.sender, _args.amount);\\n\\n        pool.transferToUser(collateral, _args.receiver, payout);\\n\\n        emit Redeem(_args.otoken, msg.sender, _args.receiver, collateral, _args.amount, payout);\\n    }\\n\\n    /**\\n     * @notice settle a vault after expiry, removing the net proceeds/collateral after both long and short oToken payouts have settled\\n     * @dev deletes a vault of vaultId after net proceeds/collateral is removed, cannot be called when system is fullyPaused\\n     * @param _args SettleVaultArgs structure\\n     */\\n    function _settleVault(Actions.SettleVaultArgs memory _args) internal onlyAuthorized(msg.sender, _args.owner) {\\n        require(_checkVaultId(_args.owner, _args.vaultId), \\\"CO35\\\");\\n\\n        (MarginVault.Vault memory vault, uint256 typeVault, ) = getVault(_args.owner, _args.vaultId);\\n\\n        OtokenInterface otoken;\\n\\n        // new scope to avoid stack too deep error\\n        // check if there is short or long otoken in vault\\n        // do not allow settling vault that have no short or long otoken\\n        // if there is a long otoken, burn it\\n        // store otoken address outside of this scope\\n        {\\n            bool hasShort = _isNotEmpty(vault.shortOtokens);\\n            bool hasLong = _isNotEmpty(vault.longOtokens);\\n\\n            require(hasShort || hasLong, \\\"CO30\\\");\\n\\n            otoken = hasShort ? OtokenInterface(vault.shortOtokens[0]) : OtokenInterface(vault.longOtokens[0]);\\n\\n            if (hasLong) {\\n                OtokenInterface longOtoken = OtokenInterface(vault.longOtokens[0]);\\n\\n                longOtoken.burnOtoken(address(pool), vault.longAmounts[0]);\\n            }\\n        }\\n\\n        (address collateral, address underlying, address strike, , uint256 expiry, ) = otoken.getOtokenDetails();\\n\\n        // do not allow settling vault with un-expired otoken\\n        require(now >= expiry, \\\"CO31\\\");\\n        require(isSettlementAllowed(underlying, strike, collateral, expiry), \\\"CO29\\\");\\n\\n        (uint256 payout, bool isValidVault) = calculator.getExcessCollateral(vault, typeVault);\\n\\n        // require that vault is valid (has excess collateral) before settling\\n        // to avoid allowing settling undercollateralized naked margin vault\\n        require(isValidVault, \\\"CO32\\\");\\n\\n        delete vaults[_args.owner][_args.vaultId];\\n\\n        pool.transferToUser(collateral, _args.to, payout);\\n\\n        uint256 vaultId = _args.vaultId;\\n        address payoutRecipient = _args.to;\\n\\n        emit VaultSettled(_args.owner, address(otoken), payoutRecipient, payout, vaultId, typeVault);\\n    }\\n\\n    /**\\n     * @notice liquidate naked margin vault\\n     * @dev can liquidate different vaults id in the same operate() call\\n     * @param _args liquidation action arguments struct\\n     */\\n    function _liquidate(Actions.LiquidateArgs memory _args) internal notPartiallyPaused {\\n        require(_checkVaultId(_args.owner, _args.vaultId), \\\"CO35\\\");\\n\\n        // check if vault is undercollateralized\\n        // the price is the amount of collateral asset to pay per 1 repaid debt(otoken)\\n        // collateralDust is the minimum amount of collateral that can be left in the vault when a partial liquidation occurs\\n        (MarginVault.Vault memory vault, bool isUnderCollat, uint256 price, uint256 collateralDust) = _isLiquidatable(\\n            _args.owner,\\n            _args.vaultId,\\n            _args.roundId\\n        );\\n\\n        require(isUnderCollat, \\\"CO33\\\");\\n\\n        // amount of collateral to offer to liquidator\\n        uint256 collateralToSell = _args.amount.mul(price).div(1e8);\\n\\n        // if vault is partially liquidated (amount of short otoken is still greater than zero)\\n        // make sure remaining collateral amount is greater than dust amount\\n        if (vault.shortAmounts[0].sub(_args.amount) > 0) {\\n            require(vault.collateralAmounts[0].sub(collateralToSell) >= collateralDust, \\\"CO34\\\");\\n        }\\n\\n        // burn short otoken from liquidator address, index of short otoken hardcoded at 0\\n        // this should always work, if vault have no short otoken, it will not reach this step\\n        OtokenInterface(vault.shortOtokens[0]).burnOtoken(msg.sender, _args.amount);\\n\\n        // decrease amount of collateral in liquidated vault, index of collateral to decrease is hardcoded at 0\\n        vaults[_args.owner][_args.vaultId].removeCollateral(vault.collateralAssets[0], collateralToSell, 0);\\n\\n        // decrease amount of short otoken in liquidated vault, index of short otoken to decrease is hardcoded at 0\\n        vaults[_args.owner][_args.vaultId].removeShort(vault.shortOtokens[0], _args.amount, 0);\\n\\n        pool.transferToUser(vault.collateralAssets[0], _args.receiver, collateralToSell);\\n\\n        emit VaultLiquidated(\\n            msg.sender,\\n            _args.receiver,\\n            _args.owner,\\n            price,\\n            _args.roundId,\\n            collateralToSell,\\n            _args.amount,\\n            _args.vaultId\\n        );\\n    }\\n\\n    /**\\n     * @notice execute arbitrary calls\\n     * @dev cannot be called when system is partiallyPaused or fullyPaused\\n     * @param _args Call action\\n     */\\n    function _call(Actions.CallArgs memory _args) internal notPartiallyPaused onlyWhitelistedCallee(_args.callee) {\\n        CalleeInterface(_args.callee).callFunction(msg.sender, _args.data);\\n\\n        emit CallExecuted(msg.sender, _args.callee, _args.data);\\n    }\\n\\n    /**\\n     * @notice check if a vault id is valid for a given account owner address\\n     * @param _accountOwner account owner address\\n     * @param _vaultId vault id to check\\n     * @return True if the _vaultId is valid, False if not\\n     */\\n    function _checkVaultId(address _accountOwner, uint256 _vaultId) internal view returns (bool) {\\n        return ((_vaultId > 0) && (_vaultId <= accountVaultCounter[_accountOwner]));\\n    }\\n\\n    function _isNotEmpty(address[] memory _array) internal pure returns (bool) {\\n        return (_array.length > 0) && (_array[0] != address(0));\\n    }\\n\\n    /**\\n     * @notice return if a callee address is whitelisted or not\\n     * @param _callee callee address\\n     * @return True if callee address is whitelisted, False if not\\n     */\\n    function _isCalleeWhitelisted(address _callee) internal view returns (bool) {\\n        return whitelist.isWhitelistedCallee(_callee);\\n    }\\n\\n    /**\\n     * @notice check if a vault is liquidatable in a specific round id\\n     * @param _owner vault owner address\\n     * @param _vaultId vault id to check\\n     * @param _roundId chainlink round id to check vault status at\\n     * @return vault struct, isLiquidatable, true if vault is undercollateralized, the price of 1 repaid otoken and the otoken collateral dust amount\\n     */\\n    function _isLiquidatable(\\n        address _owner,\\n        uint256 _vaultId,\\n        uint256 _roundId\\n    )\\n        internal\\n        view\\n        returns (\\n            MarginVault.Vault memory,\\n            bool,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (MarginVault.Vault memory vault, uint256 typeVault, uint256 latestUpdateTimestamp) = getVault(_owner, _vaultId);\\n        (bool isUnderCollat, uint256 price, uint256 collateralDust) = calculator.isLiquidatable(\\n            vault,\\n            typeVault,\\n            latestUpdateTimestamp,\\n            _roundId\\n        );\\n\\n        return (vault, isUnderCollat, price, collateralDust);\\n    }\\n\\n    /**\\n     * @dev updates the internal configuration of the controller\\n     */\\n    function _refreshConfigInternal() internal {\\n        whitelist = WhitelistInterface(addressbook.getWhitelist());\\n        oracle = OracleInterface(addressbook.getOracle());\\n        calculator = MarginCalculatorInterface(addressbook.getMarginCalculator());\\n        pool = MarginPoolInterface(addressbook.getMarginPool());\\n    }\\n}\\n\",\"keccak256\":\"0x48915a2004ecce6bdecc0e042d261fe1e7e3824686a8bf83e0b5565636ae3fb9\",\"license\":\"UNLICENSED\"},\"contracts/GammaProtocol/interfaces/AddressBookInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.10;\\n\\ninterface AddressBookInterface {\\n    /* Getters */\\n\\n    function getOtokenImpl() external view returns (address);\\n\\n    function getOtokenFactory() external view returns (address);\\n\\n    function getWhitelist() external view returns (address);\\n\\n    function getController() external view returns (address);\\n\\n    function getOracle() external view returns (address);\\n\\n    function getMarginPool() external view returns (address);\\n\\n    function getMarginCalculator() external view returns (address);\\n\\n    function getLiquidationManager() external view returns (address);\\n\\n    function getAddress(bytes32 _id) external view returns (address);\\n\\n    /* Setters */\\n\\n    function setOtokenImpl(address _otokenImpl) external;\\n\\n    function setOtokenFactory(address _factory) external;\\n\\n    function setOracleImpl(address _otokenImpl) external;\\n\\n    function setWhitelist(address _whitelist) external;\\n\\n    function setController(address _controller) external;\\n\\n    function setMarginPool(address _marginPool) external;\\n\\n    function setMarginCalculator(address _calculator) external;\\n\\n    function setLiquidationManager(address _liquidationManager) external;\\n\\n    function setAddress(bytes32 _id, address _newImpl) external;\\n}\\n\",\"keccak256\":\"0xf083b72d2476fc63b101130a044a7593a6bead41ba8c23482cafd7b7e2547687\",\"license\":\"UNLICENSED\"},\"contracts/GammaProtocol/interfaces/CalleeInterface.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity 0.6.10;\\n\\n/**\\n * @dev Contract interface that can be called from Controller as a call action.\\n */\\ninterface CalleeInterface {\\n    /**\\n     * Allows users to send this contract arbitrary data.\\n     * @param _sender The msg.sender to Controller\\n     * @param _data Arbitrary data given by the sender\\n     */\\n    function callFunction(address payable _sender, bytes memory _data) external;\\n}\\n\",\"keccak256\":\"0xb5f3e105d82e2b5fce7e8752f2cc42fd89a6bed60b5fa2d6368b4906b1009d46\",\"license\":\"UNLICENSED\"},\"contracts/GammaProtocol/interfaces/MarginCalculatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.10;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport {MarginVault} from \\\"../libs/MarginVault.sol\\\";\\n\\ninterface MarginCalculatorInterface {\\n    function addressBook() external view returns (address);\\n\\n    function getExpiredPayoutRate(address _otoken) external view returns (uint256);\\n\\n    function getExcessCollateral(MarginVault.Vault calldata _vault, uint256 _vaultType)\\n        external\\n        view\\n        returns (uint256 netValue, bool isExcess);\\n\\n    function isLiquidatable(\\n        MarginVault.Vault memory _vault,\\n        uint256 _vaultType,\\n        uint256 _vaultLatestUpdate,\\n        uint256 _roundId\\n    )\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0x612ed78099f6e569226aea5a3b384c13a2906f803c23273d97a1d35141063830\",\"license\":\"UNLICENSED\"},\"contracts/GammaProtocol/interfaces/MarginPoolInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.10;\\n\\ninterface MarginPoolInterface {\\n    /* Getters */\\n    function addressBook() external view returns (address);\\n\\n    function farmer() external view returns (address);\\n\\n    function getStoredBalance(address _asset) external view returns (uint256);\\n\\n    /* Admin-only functions */\\n    function setFarmer(address _farmer) external;\\n\\n    function farm(\\n        address _asset,\\n        address _receiver,\\n        uint256 _amount\\n    ) external;\\n\\n    /* Controller-only functions */\\n    function transferToPool(\\n        address _asset,\\n        address _user,\\n        uint256 _amount\\n    ) external;\\n\\n    function transferToUser(\\n        address _asset,\\n        address _user,\\n        uint256 _amount\\n    ) external;\\n\\n    function batchTransferToPool(\\n        address[] calldata _asset,\\n        address[] calldata _user,\\n        uint256[] calldata _amount\\n    ) external;\\n\\n    function batchTransferToUser(\\n        address[] calldata _asset,\\n        address[] calldata _user,\\n        uint256[] calldata _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x9c615edc86d4472d3ad8a488bec65fcfd682f1ad78476c4126786a72810d4b05\",\"license\":\"UNLICENSED\"},\"contracts/GammaProtocol/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.10;\\n\\ninterface OracleInterface {\\n    function isLockingPeriodOver(address _asset, uint256 _expiryTimestamp) external view returns (bool);\\n\\n    function isDisputePeriodOver(address _asset, uint256 _expiryTimestamp) external view returns (bool);\\n\\n    function getExpiryPrice(address _asset, uint256 _expiryTimestamp) external view returns (uint256, bool);\\n\\n    function getDisputer() external view returns (address);\\n\\n    function getPricer(address _asset) external view returns (address);\\n\\n    function getPrice(address _asset) external view returns (uint256);\\n\\n    function getPricerLockingPeriod(address _pricer) external view returns (uint256);\\n\\n    function getPricerDisputePeriod(address _pricer) external view returns (uint256);\\n\\n    function getChainlinkRoundData(address _asset, uint80 _roundId) external view returns (uint256, uint256);\\n\\n    // Non-view function\\n\\n    function setAssetPricer(address _asset, address _pricer) external;\\n\\n    function setLockingPeriod(address _pricer, uint256 _lockingPeriod) external;\\n\\n    function setDisputePeriod(address _pricer, uint256 _disputePeriod) external;\\n\\n    function setExpiryPrice(\\n        address _asset,\\n        uint256 _expiryTimestamp,\\n        uint256 _price\\n    ) external;\\n\\n    function disputeExpiryPrice(\\n        address _asset,\\n        uint256 _expiryTimestamp,\\n        uint256 _price\\n    ) external;\\n\\n    function setDisputer(address _disputer) external;\\n}\\n\",\"keccak256\":\"0xb98928ca456c3b8d4056d9c90c7d07a8dea00d02059df57e528c13272327d3f7\",\"license\":\"UNLICENSED\"},\"contracts/GammaProtocol/interfaces/OtokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.10;\\n\\ninterface OtokenInterface {\\n    function addressBook() external view returns (address);\\n\\n    function underlyingAsset() external view returns (address);\\n\\n    function strikeAsset() external view returns (address);\\n\\n    function collateralAsset() external view returns (address);\\n\\n    function strikePrice() external view returns (uint256);\\n\\n    function expiryTimestamp() external view returns (uint256);\\n\\n    function isPut() external view returns (bool);\\n\\n    function init(\\n        address _addressBook,\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external;\\n\\n    function getOtokenDetails()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    function mintOtoken(address account, uint256 amount) external;\\n\\n    function burnOtoken(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x3089cdd00dca9459a3c8458d6dc0d8dfb95e716aebdd6d9929238d0be625757a\",\"license\":\"UNLICENSED\"},\"contracts/GammaProtocol/interfaces/WhitelistInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.10;\\n\\ninterface WhitelistInterface {\\n    /* View functions */\\n\\n    function addressBook() external view returns (address);\\n\\n    function isWhitelistedProduct(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        bool _isPut\\n    ) external view returns (bool);\\n\\n    function isWhitelistedCollateral(address _collateral) external view returns (bool);\\n\\n    function isWhitelistedOtoken(address _otoken) external view returns (bool);\\n\\n    function isWhitelistedCallee(address _callee) external view returns (bool);\\n\\n    /* Admin / factory only functions */\\n    function whitelistProduct(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        bool _isPut\\n    ) external;\\n\\n    function blacklistProduct(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        bool _isPut\\n    ) external;\\n\\n    function whitelistCollateral(address _collateral) external;\\n\\n    function blacklistCollateral(address _collateral) external;\\n\\n    function whitelistOtoken(address _otoken) external;\\n\\n    function blacklistOtoken(address _otoken) external;\\n\\n    function whitelistCallee(address _callee) external;\\n\\n    function blacklistCallee(address _callee) external;\\n}\\n\",\"keccak256\":\"0xf4f8c9a4a9face43a6c1f36d385bdbbcb57d723530cb4f7c8e402b79fdf41479\",\"license\":\"UNLICENSED\"},\"contracts/GammaProtocol/libs/Actions.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity 0.6.10;\\n\\nimport {MarginVault} from \\\"./MarginVault.sol\\\";\\n\\n/**\\n * @title Actions\\n * @author Opyn Team\\n * @notice A library that provides a ActionArgs struct, sub types of Action structs, and functions to parse ActionArgs into specific Actions.\\n */\\nlibrary Actions {\\n    // possible actions that can be performed\\n    enum ActionType {\\n        OpenVault,\\n        MintShortOption,\\n        BurnShortOption,\\n        DepositLongOption,\\n        WithdrawLongOption,\\n        DepositCollateral,\\n        WithdrawCollateral,\\n        SettleVault,\\n        Redeem,\\n        Call,\\n        Liquidate\\n    }\\n\\n    struct ActionArgs {\\n        // type of action that is being performed on the system\\n        ActionType actionType;\\n        // address of the account owner\\n        address owner;\\n        // address which we move assets from or to (depending on the action type)\\n        address secondAddress;\\n        // asset that is to be transfered\\n        address asset;\\n        // index of the vault that is to be modified (if any)\\n        uint256 vaultId;\\n        // amount of asset that is to be transfered\\n        uint256 amount;\\n        // each vault can hold multiple short / long / collateral assets but we are restricting the scope to only 1 of each in this version\\n        // in future versions this would be the index of the short / long / collateral asset that needs to be modified\\n        uint256 index;\\n        // any other data that needs to be passed in for arbitrary function calls\\n        bytes data;\\n    }\\n\\n    struct MintArgs {\\n        // address of the account owner\\n        address owner;\\n        // index of the vault from which the asset will be minted\\n        uint256 vaultId;\\n        // address to which we transfer the minted oTokens\\n        address to;\\n        // oToken that is to be minted\\n        address otoken;\\n        // each vault can hold multiple short / long / collateral assets but we are restricting the scope to only 1 of each in this version\\n        // in future versions this would be the index of the short / long / collateral asset that needs to be modified\\n        uint256 index;\\n        // amount of oTokens that is to be minted\\n        uint256 amount;\\n    }\\n\\n    struct BurnArgs {\\n        // address of the account owner\\n        address owner;\\n        // index of the vault from which the oToken will be burned\\n        uint256 vaultId;\\n        // address from which we transfer the oTokens\\n        address from;\\n        // oToken that is to be burned\\n        address otoken;\\n        // each vault can hold multiple short / long / collateral assets but we are restricting the scope to only 1 of each in this version\\n        // in future versions this would be the index of the short / long / collateral asset that needs to be modified\\n        uint256 index;\\n        // amount of oTokens that is to be burned\\n        uint256 amount;\\n    }\\n\\n    struct OpenVaultArgs {\\n        // address of the account owner\\n        address owner;\\n        // vault id to create\\n        uint256 vaultId;\\n        // vault type, 0 for spread/max loss and 1 for naked margin vault\\n        uint256 vaultType;\\n    }\\n\\n    struct DepositArgs {\\n        // address of the account owner\\n        address owner;\\n        // index of the vault to which the asset will be added\\n        uint256 vaultId;\\n        // address from which we transfer the asset\\n        address from;\\n        // asset that is to be deposited\\n        address asset;\\n        // each vault can hold multiple short / long / collateral assets but we are restricting the scope to only 1 of each in this version\\n        // in future versions this would be the index of the short / long / collateral asset that needs to be modified\\n        uint256 index;\\n        // amount of asset that is to be deposited\\n        uint256 amount;\\n    }\\n\\n    struct RedeemArgs {\\n        // address to which we pay out the oToken proceeds\\n        address receiver;\\n        // oToken that is to be redeemed\\n        address otoken;\\n        // amount of oTokens that is to be redeemed\\n        uint256 amount;\\n    }\\n\\n    struct WithdrawArgs {\\n        // address of the account owner\\n        address owner;\\n        // index of the vault from which the asset will be withdrawn\\n        uint256 vaultId;\\n        // address to which we transfer the asset\\n        address to;\\n        // asset that is to be withdrawn\\n        address asset;\\n        // each vault can hold multiple short / long / collateral assets but we are restricting the scope to only 1 of each in this version\\n        // in future versions this would be the index of the short / long / collateral asset that needs to be modified\\n        uint256 index;\\n        // amount of asset that is to be withdrawn\\n        uint256 amount;\\n    }\\n\\n    struct SettleVaultArgs {\\n        // address of the account owner\\n        address owner;\\n        // index of the vault to which is to be settled\\n        uint256 vaultId;\\n        // address to which we transfer the remaining collateral\\n        address to;\\n    }\\n\\n    struct LiquidateArgs {\\n        // address of the vault owner to liquidate\\n        address owner;\\n        // address of the liquidated collateral receiver\\n        address receiver;\\n        // vault id to liquidate\\n        uint256 vaultId;\\n        // amount of debt(otoken) to repay\\n        uint256 amount;\\n        // chainlink round id\\n        uint256 roundId;\\n    }\\n\\n    struct CallArgs {\\n        // address of the callee contract\\n        address callee;\\n        // data field for external calls\\n        bytes data;\\n    }\\n\\n    /**\\n     * @notice parses the passed in action arguments to get the arguments for an open vault action\\n     * @param _args general action arguments structure\\n     * @return arguments for a open vault action\\n     */\\n    function _parseOpenVaultArgs(ActionArgs memory _args) internal pure returns (OpenVaultArgs memory) {\\n        require(_args.actionType == ActionType.OpenVault, \\\"Actions: can only parse arguments for open vault actions\\\");\\n        require(_args.owner != address(0), \\\"Actions: cannot open vault for an invalid account\\\");\\n\\n        // if not _args.data included, vault type will be 0 by default\\n        uint256 vaultType;\\n\\n        if (_args.data.length == 32) {\\n            // decode vault type from _args.data\\n            vaultType = abi.decode(_args.data, (uint256));\\n        }\\n\\n        // for now we only have 2 vault types\\n        require(vaultType < 2, \\\"Actions: cannot open vault with an invalid type\\\");\\n\\n        return OpenVaultArgs({owner: _args.owner, vaultId: _args.vaultId, vaultType: vaultType});\\n    }\\n\\n    /**\\n     * @notice parses the passed in action arguments to get the arguments for a mint action\\n     * @param _args general action arguments structure\\n     * @return arguments for a mint action\\n     */\\n    function _parseMintArgs(ActionArgs memory _args) internal pure returns (MintArgs memory) {\\n        require(_args.actionType == ActionType.MintShortOption, \\\"Actions: can only parse arguments for mint actions\\\");\\n        require(_args.owner != address(0), \\\"Actions: cannot mint from an invalid account\\\");\\n\\n        return\\n            MintArgs({\\n                owner: _args.owner,\\n                vaultId: _args.vaultId,\\n                to: _args.secondAddress,\\n                otoken: _args.asset,\\n                index: _args.index,\\n                amount: _args.amount\\n            });\\n    }\\n\\n    /**\\n     * @notice parses the passed in action arguments to get the arguments for a burn action\\n     * @param _args general action arguments structure\\n     * @return arguments for a burn action\\n     */\\n    function _parseBurnArgs(ActionArgs memory _args) internal pure returns (BurnArgs memory) {\\n        require(_args.actionType == ActionType.BurnShortOption, \\\"Actions: can only parse arguments for burn actions\\\");\\n        require(_args.owner != address(0), \\\"Actions: cannot burn from an invalid account\\\");\\n\\n        return\\n            BurnArgs({\\n                owner: _args.owner,\\n                vaultId: _args.vaultId,\\n                from: _args.secondAddress,\\n                otoken: _args.asset,\\n                index: _args.index,\\n                amount: _args.amount\\n            });\\n    }\\n\\n    /**\\n     * @notice parses the passed in action arguments to get the arguments for a deposit action\\n     * @param _args general action arguments structure\\n     * @return arguments for a deposit action\\n     */\\n    function _parseDepositArgs(ActionArgs memory _args) internal pure returns (DepositArgs memory) {\\n        require(\\n            (_args.actionType == ActionType.DepositLongOption) || (_args.actionType == ActionType.DepositCollateral),\\n            \\\"Actions: can only parse arguments for deposit actions\\\"\\n        );\\n        require(_args.owner != address(0), \\\"Actions: cannot deposit to an invalid account\\\");\\n\\n        return\\n            DepositArgs({\\n                owner: _args.owner,\\n                vaultId: _args.vaultId,\\n                from: _args.secondAddress,\\n                asset: _args.asset,\\n                index: _args.index,\\n                amount: _args.amount\\n            });\\n    }\\n\\n    /**\\n     * @notice parses the passed in action arguments to get the arguments for a withdraw action\\n     * @param _args general action arguments structure\\n     * @return arguments for a withdraw action\\n     */\\n    function _parseWithdrawArgs(ActionArgs memory _args) internal pure returns (WithdrawArgs memory) {\\n        require(\\n            (_args.actionType == ActionType.WithdrawLongOption) || (_args.actionType == ActionType.WithdrawCollateral),\\n            \\\"Actions: can only parse arguments for withdraw actions\\\"\\n        );\\n        require(_args.owner != address(0), \\\"Actions: cannot withdraw from an invalid account\\\");\\n        require(_args.secondAddress != address(0), \\\"Actions: cannot withdraw to an invalid account\\\");\\n\\n        return\\n            WithdrawArgs({\\n                owner: _args.owner,\\n                vaultId: _args.vaultId,\\n                to: _args.secondAddress,\\n                asset: _args.asset,\\n                index: _args.index,\\n                amount: _args.amount\\n            });\\n    }\\n\\n    /**\\n     * @notice parses the passed in action arguments to get the arguments for an redeem action\\n     * @param _args general action arguments structure\\n     * @return arguments for a redeem action\\n     */\\n    function _parseRedeemArgs(ActionArgs memory _args) internal pure returns (RedeemArgs memory) {\\n        require(_args.actionType == ActionType.Redeem, \\\"Actions: can only parse arguments for redeem actions\\\");\\n        require(_args.secondAddress != address(0), \\\"Actions: cannot redeem to an invalid account\\\");\\n\\n        return RedeemArgs({receiver: _args.secondAddress, otoken: _args.asset, amount: _args.amount});\\n    }\\n\\n    /**\\n     * @notice parses the passed in action arguments to get the arguments for a settle vault action\\n     * @param _args general action arguments structure\\n     * @return arguments for a settle vault action\\n     */\\n    function _parseSettleVaultArgs(ActionArgs memory _args) internal pure returns (SettleVaultArgs memory) {\\n        require(\\n            _args.actionType == ActionType.SettleVault,\\n            \\\"Actions: can only parse arguments for settle vault actions\\\"\\n        );\\n        require(_args.owner != address(0), \\\"Actions: cannot settle vault for an invalid account\\\");\\n        require(_args.secondAddress != address(0), \\\"Actions: cannot withdraw payout to an invalid account\\\");\\n\\n        return SettleVaultArgs({owner: _args.owner, vaultId: _args.vaultId, to: _args.secondAddress});\\n    }\\n\\n    function _parseLiquidateArgs(ActionArgs memory _args) internal pure returns (LiquidateArgs memory) {\\n        require(_args.actionType == ActionType.Liquidate, \\\"Actions: can only parse arguments for liquidate action\\\");\\n        require(_args.owner != address(0), \\\"Actions: cannot liquidate vault for an invalid account owner\\\");\\n        require(_args.secondAddress != address(0), \\\"Actions: cannot send collateral to an invalid account\\\");\\n        require(_args.data.length == 32, \\\"Actions: cannot parse liquidate action with no round id\\\");\\n\\n        // decode chainlink round id from _args.data\\n        uint256 roundId = abi.decode(_args.data, (uint256));\\n\\n        return\\n            LiquidateArgs({\\n                owner: _args.owner,\\n                receiver: _args.secondAddress,\\n                vaultId: _args.vaultId,\\n                amount: _args.amount,\\n                roundId: roundId\\n            });\\n    }\\n\\n    /**\\n     * @notice parses the passed in action arguments to get the arguments for a call action\\n     * @param _args general action arguments structure\\n     * @return arguments for a call action\\n     */\\n    function _parseCallArgs(ActionArgs memory _args) internal pure returns (CallArgs memory) {\\n        require(_args.actionType == ActionType.Call, \\\"Actions: can only parse arguments for call actions\\\");\\n        require(_args.secondAddress != address(0), \\\"Actions: target address cannot be address(0)\\\");\\n\\n        return CallArgs({callee: _args.secondAddress, data: _args.data});\\n    }\\n}\\n\",\"keccak256\":\"0x7d484cdf5ae344b0cb34c68e58f3a819e96a4b3be8c972fbfb2024e073cb9a34\",\"license\":\"UNLICENSED\"},\"contracts/GammaProtocol/libs/MarginVault.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity =0.6.10;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"../packages/oz/SafeMath.sol\\\";\\n\\n/**\\n * @title MarginVault\\n * @author Opyn Team\\n * @notice A library that provides the Controller with a Vault struct and the functions that manipulate vaults.\\n * Vaults describe discrete position combinations of long options, short options, and collateral assets that a user can have.\\n */\\nlibrary MarginVault {\\n    using SafeMath for uint256;\\n\\n    // vault is a struct of 6 arrays that describe a position a user has, a user can have multiple vaults.\\n    struct Vault {\\n        // addresses of oTokens a user has shorted (i.e. written) against this vault\\n        address[] shortOtokens;\\n        // addresses of oTokens a user has bought and deposited in this vault\\n        // user can be long oTokens without opening a vault (e.g. by buying on a DEX)\\n        // generally, long oTokens will be 'deposited' in vaults to act as collateral in order to write oTokens against (i.e. in spreads)\\n        address[] longOtokens;\\n        // addresses of other ERC-20s a user has deposited as collateral in this vault\\n        address[] collateralAssets;\\n        // quantity of oTokens minted/written for each oToken address in shortOtokens\\n        uint256[] shortAmounts;\\n        // quantity of oTokens owned and held in the vault for each oToken address in longOtokens\\n        uint256[] longAmounts;\\n        // quantity of ERC-20 deposited as collateral in the vault for each ERC-20 address in collateralAssets\\n        uint256[] collateralAmounts;\\n    }\\n\\n    /**\\n     * @dev increase the short oToken balance in a vault when a new oToken is minted\\n     * @param _vault vault to add or increase the short position in\\n     * @param _shortOtoken address of the _shortOtoken being minted from the user's vault\\n     * @param _amount number of _shortOtoken being minted from the user's vault\\n     * @param _index index of _shortOtoken in the user's vault.shortOtokens array\\n     */\\n    function addShort(\\n        Vault storage _vault,\\n        address _shortOtoken,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external {\\n        require(_amount > 0, \\\"MarginVault: invalid short otoken amount\\\");\\n\\n        // valid indexes in any array are between 0 and array.length - 1.\\n        // if adding an amount to an preexisting short oToken, check that _index is in the range of 0->length-1\\n        if ((_index == _vault.shortOtokens.length) && (_index == _vault.shortAmounts.length)) {\\n            _vault.shortOtokens.push(_shortOtoken);\\n            _vault.shortAmounts.push(_amount);\\n        } else {\\n            require(\\n                (_index < _vault.shortOtokens.length) && (_index < _vault.shortAmounts.length),\\n                \\\"MarginVault: invalid short otoken index\\\"\\n            );\\n            address existingShort = _vault.shortOtokens[_index];\\n            require(\\n                (existingShort == _shortOtoken) || (existingShort == address(0)),\\n                \\\"MarginVault: short otoken address mismatch\\\"\\n            );\\n\\n            _vault.shortAmounts[_index] = _vault.shortAmounts[_index].add(_amount);\\n            _vault.shortOtokens[_index] = _shortOtoken;\\n        }\\n    }\\n\\n    /**\\n     * @dev decrease the short oToken balance in a vault when an oToken is burned\\n     * @param _vault vault to decrease short position in\\n     * @param _shortOtoken address of the _shortOtoken being reduced in the user's vault\\n     * @param _amount number of _shortOtoken being reduced in the user's vault\\n     * @param _index index of _shortOtoken in the user's vault.shortOtokens array\\n     */\\n    function removeShort(\\n        Vault storage _vault,\\n        address _shortOtoken,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external {\\n        // check that the removed short oToken exists in the vault at the specified index\\n        require(_index < _vault.shortOtokens.length, \\\"MarginVault: invalid short otoken index\\\");\\n        require(_vault.shortOtokens[_index] == _shortOtoken, \\\"MarginVault: short otoken address mismatch\\\");\\n\\n        uint256 newShortAmount = _vault.shortAmounts[_index].sub(_amount);\\n\\n        if (newShortAmount == 0) {\\n            delete _vault.shortOtokens[_index];\\n        }\\n        _vault.shortAmounts[_index] = newShortAmount;\\n    }\\n\\n    /**\\n     * @dev increase the long oToken balance in a vault when an oToken is deposited\\n     * @param _vault vault to add a long position to\\n     * @param _longOtoken address of the _longOtoken being added to the user's vault\\n     * @param _amount number of _longOtoken the protocol is adding to the user's vault\\n     * @param _index index of _longOtoken in the user's vault.longOtokens array\\n     */\\n    function addLong(\\n        Vault storage _vault,\\n        address _longOtoken,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external {\\n        require(_amount > 0, \\\"MarginVault: invalid long otoken amount\\\");\\n\\n        // valid indexes in any array are between 0 and array.length - 1.\\n        // if adding an amount to an preexisting short oToken, check that _index is in the range of 0->length-1\\n        if ((_index == _vault.longOtokens.length) && (_index == _vault.longAmounts.length)) {\\n            _vault.longOtokens.push(_longOtoken);\\n            _vault.longAmounts.push(_amount);\\n        } else {\\n            require(\\n                (_index < _vault.longOtokens.length) && (_index < _vault.longAmounts.length),\\n                \\\"MarginVault: invalid long otoken index\\\"\\n            );\\n            address existingLong = _vault.longOtokens[_index];\\n            require(\\n                (existingLong == _longOtoken) || (existingLong == address(0)),\\n                \\\"MarginVault: long otoken address mismatch\\\"\\n            );\\n\\n            _vault.longAmounts[_index] = _vault.longAmounts[_index].add(_amount);\\n            _vault.longOtokens[_index] = _longOtoken;\\n        }\\n    }\\n\\n    /**\\n     * @dev decrease the long oToken balance in a vault when an oToken is withdrawn\\n     * @param _vault vault to remove a long position from\\n     * @param _longOtoken address of the _longOtoken being removed from the user's vault\\n     * @param _amount number of _longOtoken the protocol is removing from the user's vault\\n     * @param _index index of _longOtoken in the user's vault.longOtokens array\\n     */\\n    function removeLong(\\n        Vault storage _vault,\\n        address _longOtoken,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external {\\n        // check that the removed long oToken exists in the vault at the specified index\\n        require(_index < _vault.longOtokens.length, \\\"MarginVault: invalid long otoken index\\\");\\n        require(_vault.longOtokens[_index] == _longOtoken, \\\"MarginVault: long otoken address mismatch\\\");\\n\\n        uint256 newLongAmount = _vault.longAmounts[_index].sub(_amount);\\n\\n        if (newLongAmount == 0) {\\n            delete _vault.longOtokens[_index];\\n        }\\n        _vault.longAmounts[_index] = newLongAmount;\\n    }\\n\\n    /**\\n     * @dev increase the collateral balance in a vault\\n     * @param _vault vault to add collateral to\\n     * @param _collateralAsset address of the _collateralAsset being added to the user's vault\\n     * @param _amount number of _collateralAsset being added to the user's vault\\n     * @param _index index of _collateralAsset in the user's vault.collateralAssets array\\n     */\\n    function addCollateral(\\n        Vault storage _vault,\\n        address _collateralAsset,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external {\\n        require(_amount > 0, \\\"MarginVault: invalid collateral amount\\\");\\n\\n        // valid indexes in any array are between 0 and array.length - 1.\\n        // if adding an amount to an preexisting short oToken, check that _index is in the range of 0->length-1\\n        if ((_index == _vault.collateralAssets.length) && (_index == _vault.collateralAmounts.length)) {\\n            _vault.collateralAssets.push(_collateralAsset);\\n            _vault.collateralAmounts.push(_amount);\\n        } else {\\n            require(\\n                (_index < _vault.collateralAssets.length) && (_index < _vault.collateralAmounts.length),\\n                \\\"MarginVault: invalid collateral token index\\\"\\n            );\\n            address existingCollateral = _vault.collateralAssets[_index];\\n            require(\\n                (existingCollateral == _collateralAsset) || (existingCollateral == address(0)),\\n                \\\"MarginVault: collateral token address mismatch\\\"\\n            );\\n\\n            _vault.collateralAmounts[_index] = _vault.collateralAmounts[_index].add(_amount);\\n            _vault.collateralAssets[_index] = _collateralAsset;\\n        }\\n    }\\n\\n    /**\\n     * @dev decrease the collateral balance in a vault\\n     * @param _vault vault to remove collateral from\\n     * @param _collateralAsset address of the _collateralAsset being removed from the user's vault\\n     * @param _amount number of _collateralAsset being removed from the user's vault\\n     * @param _index index of _collateralAsset in the user's vault.collateralAssets array\\n     */\\n    function removeCollateral(\\n        Vault storage _vault,\\n        address _collateralAsset,\\n        uint256 _amount,\\n        uint256 _index\\n    ) external {\\n        // check that the removed collateral exists in the vault at the specified index\\n        require(_index < _vault.collateralAssets.length, \\\"MarginVault: invalid collateral asset index\\\");\\n        require(_vault.collateralAssets[_index] == _collateralAsset, \\\"MarginVault: collateral token address mismatch\\\");\\n\\n        uint256 newCollateralAmount = _vault.collateralAmounts[_index].sub(_amount);\\n\\n        if (newCollateralAmount == 0) {\\n            delete _vault.collateralAssets[_index];\\n        }\\n        _vault.collateralAmounts[_index] = newCollateralAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x3253d23f29090dda924fa53d9ef1dc4fe0e35de6b66885badd303ca63bf66fba\",\"license\":\"UNLICENSED\"},\"contracts/GammaProtocol/packages/oz/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// openzeppelin-contracts v3.1.0\\n\\n/* solhint-disable */\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe257e662689b978c321f9618441d4e0233276acea88093d3d344873592636c18\",\"license\":\"MIT\"},\"contracts/GammaProtocol/packages/oz/upgradeability/GSN/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// openzeppelin-contracts-upgradeable v3.0.0\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {}\\n\\n    function _msgSender() internal virtual view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal virtual view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe9f380ac663e835233156ade9a69aa54392b3beca6d0ff72a68625048bcab9ac\",\"license\":\"MIT\"},\"contracts/GammaProtocol/packages/oz/upgradeability/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// openzeppelin-contracts-upgradeable v3.0.0\\n\\n/* solhint-disable */\\npragma solidity >=0.4.24 <0.7.0;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to use in the initializer function of a contract.\\n     */\\n    modifier initializer() {\\n        require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        assembly {\\n            cs := extcodesize(self)\\n        }\\n        return cs == 0;\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x8e9f272c9e7e6e76b46d37a42e8fe3328f6f42e23c54c991669e61662bad9b22\",\"license\":\"MIT\"},\"contracts/GammaProtocol/packages/oz/upgradeability/OwnableUpgradeSafe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// openzeppelin-contracts-upgradeable v3.0.0\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./GSN/ContextUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init(address _sender) internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained(_sender);\\n    }\\n\\n    function __Ownable_init_unchained(address _sender) internal initializer {\\n        _owner = _sender;\\n        emit OwnershipTransferred(address(0), _sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2a7a3283ace985c58643ad7045551778f50174a0665ea2383eccb04254d0c5ab\",\"license\":\"MIT\"},\"contracts/GammaProtocol/packages/oz/upgradeability/ReentrancyGuardUpgradeSafe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// openzeppelin-contracts-upgradeable v3.0.0\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuardUpgradeSafe is Initializable {\\n    bool private _notEntered;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x57cae6e6b294632e501446cbdf7a21ad8945869b249b49c699d84af63baaacbc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615a4780620000216000396000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c80639f677ed91161011a578063cdee058a116100ad578063eaa33e141161007c578063eaa33e14146103d6578063eab7775b146103f8578063ef4fcafa14610400578063f2fde38b14610413578063f77bc88b14610426576101fb565b8063cdee058a14610391578063ce3e39c014610399578063d99d13f5146103a1578063e69d849d146103c3576101fb565b8063beca75d7116100e9578063beca75d714610345578063c220101d14610358578063caa6d21a1461036b578063cab2e8051461037e576101fb565b80639f677ed9146102f9578063b617f0c61461030c578063b6363cf21461031f578063bc463a3d14610332576101fb565b80636c0c3b99116101925780638da5cb5b116101615780638da5cb5b146102ce57806393e59dc1146102d657806395b8d3f5146102de5780639db93891146102f1576101fb565b80636c0c3b99146102a157806370dc320c146102b6578063715018a6146102be5780637dc0d1d0146102c6576101fb565b8063565eea19116101ce578063565eea191461024e578063573c473e1461026e57806364681083146102815780636bd50cef14610289576101fb565b806316f0115b1461020057806329729d881461021e578063485cc95514610226578063558a72971461023b575b600080fd5b610208610439565b6040516102159190614b76565b60405180910390f35b610208610448565b6102396102343660046146b1565b610457565b005b6102396102493660046147ac565b610578565b61026161025c3660046147d9565b610631565b604051610215919061596d565b61023961027c36600461496e565b6106e6565b61023961079d565b6102916107dc565b6040516102159493929190614bf3565b6102a9610801565b6040516102159190614c3f565b610208610811565b610239610820565b61020861089f565b6102086108ae565b6102086108be565b6102a96102ec3660046146e9565b6108cd565b610208610a85565b61023961030736600461496e565b610a94565b61023961031a366004614838565b610b40565b6102a961032d3660046146b1565b610bd2565b610239610340366004614679565b610c00565b610239610353366004614679565b610ce5565b6102616103663660046147d9565b610dca565b610261610379366004614679565b610e8b565b61023961038c36600461496e565b610ea6565b6102a9610f5d565b610208610f6d565b6103b46103af3660046147d9565b610f7c565b604051610215939291906158f5565b6102396103d13660046147d9565b611215565b6103e96103e4366004614804565b6112be565b60405161021593929190614c4a565b6102a96112e5565b61023961040e3660046147d9565b6112f5565b610239610421366004614679565b611368565b6102a9610434366004614679565b61141f565b60cd546001600160a01b031681565b60cf546001600160a01b031681565b600054610100900460ff1680610470575061047061149d565b8061047e575060005460ff16155b6104a35760405162461bcd60e51b815260040161049a906154d1565b60405180910390fd5b600054610100900460ff161580156104ce576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0383166104f45760405162461bcd60e51b815260040161049a90615087565b6001600160a01b03821661051a5760405162461bcd60e51b815260040161049a906157f0565b610523826114a3565b61052b611538565b60c980546001600160a01b0319166001600160a01b03851617905561054e6115c8565b60cf805460ff60b01b1916600160b01b1790558015610573576000805461ff00191690555b505050565b33600090815260d2602090815260408083206001600160a01b038616845290915290205460ff16151581151514156105c25760405162461bcd60e51b815260040161049a906158b6565b33600081815260d2602090815260408083206001600160a01b038716808552925291829020805460ff191685151517905590519091907f1ae45540b0875932452da603b351ce2f1758258ba1345e79f8fc94f044cb078790610625908590614c3f565b60405180910390a35050565b60cc54604051630478409360e41b815260009182916001600160a01b0390911690634784093090610666908790600401614b76565b60206040518083038186803b15801561067e57600080fd5b505afa158015610692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b691906149dc565b90506106dc6305f5e1006106d0838663ffffffff61182316565b9063ffffffff61186416565b9150505b92915050565b60ce546001600160a01b031633146107105760405162461bcd60e51b815260040161049a9061555b565b60cf5460ff600160a01b90910416151581151514156107415760405162461bcd60e51b815260040161049a906158b6565b60cf805460ff60a01b1916600160a01b831515810291909117918290556040517f531c3d7229f510a8da00a0f5792686958cdd9c8a120c3c030a6053cd66b68556926107929260ff91041690614c3f565b60405180910390a150565b6107a56118a6565b6065546001600160a01b039081169116146107d25760405162461bcd60e51b815260040161049a90615433565b6107da6115c8565b565b60ca5460cb5460cc5460cd546001600160a01b03938416949284169391821692911690565b60cf54600160b01b900460ff1681565b60c9546001600160a01b031681565b6108286118a6565b6065546001600160a01b039081169116146108555760405162461bcd60e51b815260040161049a90615433565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b60cb546001600160a01b031681565b6065546001600160a01b03165b90565b60ca546001600160a01b031681565b60cb54604051635fdc714960e01b815260009182916001600160a01b0390911690635fdc7149906109049089908790600401614bb6565b60206040518083038186803b15801561091c57600080fd5b505afa158015610930573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610954919061498a565b60cb54604051635fdc714960e01b81529192506000916001600160a01b0390911690635fdc71499061098c9089908890600401614bb6565b60206040518083038186803b1580156109a457600080fd5b505afa1580156109b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109dc919061498a565b60cb54604051635fdc714960e01b81529192506000916001600160a01b0390911690635fdc714990610a149089908990600401614bb6565b60206040518083038186803b158015610a2c57600080fd5b505afa158015610a40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a64919061498a565b9050828015610a705750815b8015610a795750805b98975050505050505050565b60ce546001600160a01b031681565b60cf546001600160a01b03163314610abe5760405162461bcd60e51b815260040161049a90615627565b60cf5460ff600160a81b9091041615158115151415610aef5760405162461bcd60e51b815260040161049a906158b6565b60cf805460ff60a81b1916600160a81b831515810291909117918290556040517f4f1d0445688d95c99ca9fc036f551b205fd18ff26a4443b1979c16d1ba66b535926107929260ff91041690614c3f565b60975460ff16610b625760405162461bcd60e51b815260040161049a906157b9565b6097805460ff19169055610b746118aa565b6000806000610b82846118d4565b9250925092508215610bbf57610b988282611b8a565b6001600160a01b038216600090815260d46020908152604080832084845290915290204290555b50506097805460ff191660011790555050565b6001600160a01b03918216600090815260d26020908152604080832093909416825291909152205460ff1690565b610c086118a6565b6065546001600160a01b03908116911614610c355760405162461bcd60e51b815260040161049a90615433565b6001600160a01b038116610c5b5760405162461bcd60e51b815260040161049a90615398565b60ce546001600160a01b0382811691161415610c895760405162461bcd60e51b815260040161049a906158b6565b60ce546040516001600160a01b038084169216907f1440312dbc326ddc21bfa95078324bf5aaf6899e8a27cba3057c60adfc84e40b90600090a360ce80546001600160a01b0319166001600160a01b0392909216919091179055565b610ced6118a6565b6065546001600160a01b03908116911614610d1a5760405162461bcd60e51b815260040161049a90615433565b6001600160a01b038116610d405760405162461bcd60e51b815260040161049a9061577d565b60cf546001600160a01b0382811691161415610d6e5760405162461bcd60e51b815260040161049a906158b6565b60cf546040516001600160a01b038084169216907f44f3e9e7b454118e9fcb2e3026396f57ca21d7bd7dcabd31d7f986806422f4df90600090a360cf80546001600160a01b0319166001600160a01b0392909216919091179055565b6000610dd461442f565b6000610de08585610f7c565b5060cc5460405163cd43fbfb60e01b815292945090925060009182916001600160a01b03169063cd43fbfb90610e1c90879087906004016158d3565b604080518083038186803b158015610e3357600080fd5b505afa158015610e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6b91906149f4565b9150915080610e815760009450505050506106e0565b5095945050505050565b6001600160a01b0316600090815260d0602052604090205490565b610eae6118a6565b6065546001600160a01b03908116911614610edb5760405162461bcd60e51b815260040161049a90615433565b60cf5460ff600160b01b9091041615158115151415610f0c5760405162461bcd60e51b815260040161049a906158b6565b60cf805460ff60b01b1916600160b01b831515810291909117918290556040517f26d614575a4c104c181c87003d4bb00cc7ade00d5b47bf8775171c12a376b255926107929260ff91041690614c3f565b60cf54600160a01b900460ff1681565b60cc546001600160a01b031681565b610f8461442f565b6001600160a01b038316600081815260d160209081526040808320868452825280832084845260d3835281842087855283528184205494845260d483528184208785528352818420548251825460e09581028201860190945260c08101848152959687969395909492939192869284929091849184018282801561103157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611013575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561109357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611075575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156110f557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116110d7575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561114d57602002820191906000526020600020905b815481526020019060010190808311611139575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156111a557602002820191906000526020600020905b815481526020019060010190808311611191575b50505050508152602001600582018054806020026020016040519081016040528092919081815260200182805480156111fd57602002820191906000526020600020905b8154815260200190600101908083116111e9575b50505050508152505092509250925092509250925092565b60cd5460405163dd2c99f760e01b81526001600160a01b039091169063dd2c99f79061124990859033908690600401614bcf565b600060405180830381600087803b15801561126357600080fd5b505af1158015611277573d6000803e3d6000fd5b50505050816001600160a01b0316336001600160a01b03167f4dfff917e1fbb261a082e98cc7d43029621f6a6eb05ff3fef1510d5f1eb4857c83604051610625919061596d565b6000806000806000806112d2898989611c50565b919c909b50909950975050505050505050565b60cf54600160a81b900460ff1681565b60975460ff166113175760405162461bcd60e51b815260040161049a906157b9565b6097805460ff191690556113296118aa565b6113338282611b8a565b6001600160a01b03909116600090815260d460209081526040808320938352929052204290556097805460ff19166001179055565b6113706118a6565b6065546001600160a01b0390811691161461139d5760405162461bcd60e51b815260040161049a90615433565b6001600160a01b0381166113c35760405162461bcd60e51b815260040161049a90614e03565b6065546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b600080826001600160a01b031663ade6e2aa6040518163ffffffff1660e01b815260040160206040518083038186803b15801561145b57600080fd5b505afa15801561146f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149391906149dc565b4210159392505050565b303b1590565b600054610100900460ff16806114bc57506114bc61149d565b806114ca575060005460ff16155b6114e65760405162461bcd60e51b815260040161049a906154d1565b600054610100900460ff16158015611511576000805460ff1961ff0019909116610100171660011790555b611519611d2b565b61152282611dad565b8015611534576000805461ff00191690555b5050565b600054610100900460ff1680611551575061155161149d565b8061155f575060005460ff16155b61157b5760405162461bcd60e51b815260040161049a906154d1565b600054610100900460ff161580156115a6576000805460ff1961ff0019909116610100171660011790555b6097805460ff1916600117905580156115c5576000805461ff00191690555b50565b60c960009054906101000a90046001600160a01b03166001600160a01b031663d01f63f56040518163ffffffff1660e01b815260040160206040518083038186803b15801561161657600080fd5b505afa15801561162a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164e9190614695565b60ca80546001600160a01b0319166001600160a01b0392831617905560c9546040805163419d8fe760e11b81529051919092169163833b1fce916004808301926020929190829003018186803b1580156116a757600080fd5b505afa1580156116bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116df9190614695565b60cb80546001600160a01b0319166001600160a01b0392831617905560c9546040805163cf28493f60e01b81529051919092169163cf28493f916004808301926020929190829003018186803b15801561173857600080fd5b505afa15801561174c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117709190614695565b60cc80546001600160a01b0319166001600160a01b0392831617905560c95460408051633aa431a160e11b8152905191909216916375486342916004808301926020929190829003018186803b1580156117c957600080fd5b505afa1580156117dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118019190614695565b60cd80546001600160a01b0319166001600160a01b0392909216919091179055565b600082611832575060006106e0565b8282028284828161183f57fe5b041461185d5760405162461bcd60e51b815260040161049a906153d4565b9392505050565b600061185d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611e79565b3390565b60cf54600160a81b900460ff16156107da5760405162461bcd60e51b815260040161049a906151a5565b60008080808080805b8751811015611b7e576118ee614465565b8882815181106118fa57fe5b60209081029190910101518051909150600781600a81111561191857fe5b141580156119325750600881600a81111561192f57fe5b14155b801561194a5750600a81600a81111561194757fe5b14155b80156119625750600981600a81111561195f57fe5b14155b156119d85783156119c55781602001516001600160a01b0316866001600160a01b0316146119a25760405162461bcd60e51b815260040161049a90615187565b816080015185146119c55760405162461bcd60e51b815260040161049a90614cd3565b6001935081608001519450816020015195505b600081600a8111156119e657fe5b1415611a02576119fd6119f883611eb0565b611f88565b611b74565b600381600a811115611a1057fe5b1415611a27576119fd611a2283612077565b612153565b600481600a811115611a3557fe5b1415611a4c576119fd611a47836124a4565b612543565b600581600a811115611a5a57fe5b1415611a71576119fd611a6c83612077565b612797565b600681600a811115611a7f57fe5b1415611a96576119fd611a91836124a4565b612a4f565b600181600a811115611aa457fe5b1415611abb576119fd611ab683612ce9565b612d47565b600281600a811115611ac957fe5b1415611ae0576119fd611adb8361302f565b61308d565b600881600a811115611aee57fe5b1415611b05576119fd611b0083613326565b6133b8565b600781600a811115611b1357fe5b1415611b2a576119fd611b2583613671565b613739565b600a81600a811115611b3857fe5b1415611b4f576119fd611b4a83613bb4565b613cce565b600981600a811115611b5d57fe5b1415611b7457611b74611b6f836140ad565b614132565b50506001016118dd565b50969195509350915050565b611b9261442f565b6000611b9e8484610f7c565b5060cc5460405163cd43fbfb60e01b81529294509092506000916001600160a01b039091169063cd43fbfb90611bda90869086906004016158d3565b604080518083038186803b158015611bf157600080fd5b505afa158015611c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2991906149f4565b91505080611c495760405162461bcd60e51b815260040161049a9061553d565b5050505050565b611c5861442f565b6000806000611c6561442f565b600080611c728a8a610f7c565b925092509250600080600060cc60009054906101000a90046001600160a01b03166001600160a01b031663a6c569078787878f6040518563ffffffff1660e01b8152600401611cc4949392919061591a565b60606040518083038186803b158015611cdc57600080fd5b505afa158015611cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1491906149a6565b979f919e509c50959a509498505050505050505050565b600054610100900460ff1680611d445750611d4461149d565b80611d52575060005460ff16155b611d6e5760405162461bcd60e51b815260040161049a906154d1565b600054610100900460ff16158015611d99576000805460ff1961ff0019909116610100171660011790555b80156115c5576000805461ff001916905550565b600054610100900460ff1680611dc65750611dc661149d565b80611dd4575060005460ff16155b611df05760405162461bcd60e51b815260040161049a906154d1565b600054610100900460ff16158015611e1b576000805460ff1961ff0019909116610100171660011790555b606580546001600160a01b0319166001600160a01b0384169081179091556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a38015611534576000805461ff00191690555050565b60008183611e9a5760405162461bcd60e51b815260040161049a9190614c62565b506000838581611ea657fe5b0495945050505050565b611eb86144c6565b60008251600a811115611ec757fe5b14611ee45760405162461bcd60e51b815260040161049a90614db8565b60208201516001600160a01b0316611f0e5760405162461bcd60e51b815260040161049a90615281565b60008260e001515160201415611f39578260e00151806020019051810190611f3691906149dc565b90505b60028110611f595760405162461bcd60e51b815260040161049a906156e2565b604080516060810182526020808601516001600160a01b03168252608090950151948101949094528301525090565b611f90614225565b80513390611f9e828261424f565b82516001600160a01b0316600090815260d06020526040812054611fc990600163ffffffff6142b016565b905080846020015114611fee5760405162461bcd60e51b815260040161049a9061512d565b83516001600160a01b03908116600090815260d060209081526040808320859055808801805189518616855260d384528285208786529093529281902091909155905186519151909291909116907f5d66689e2c864b4f21efd3988c0ce5dc8a197981b68e81ce73660e92394fe25f9061206990859061596d565b60405180910390a350505050565b61207f6144f0565b60038251600a81111561208e57fe5b14806120a6575060058251600a8111156120a457fe5b145b6120c25760405162461bcd60e51b815260040161049a90615220565b60208201516001600160a01b03166120ec5760405162461bcd60e51b815260040161049a90614ea8565b6040518060c0016040528083602001516001600160a01b031681526020018360800151815260200183604001516001600160a01b0316815260200183606001516001600160a01b031681526020018360c0015181526020018360a001518152509050919050565b61215b614225565b80513390612169828261424f565b61217b836000015184602001516142d5565b6121975760405162461bcd60e51b815260040161049a90614c75565b60408301516001600160a01b03163314806121cb575082600001516001600160a01b031683604001516001600160a01b0316145b6121e75760405162461bcd60e51b815260040161049a9061551f565b60ca5460608401516040516302328d7360e31b81526001600160a01b03909216916311946b989161221a91600401614b76565b60206040518083038186803b15801561223257600080fd5b505afa158015612246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226a919061498a565b6122865760405162461bcd60e51b815260040161049a90615596565b600083606001519050806001600160a01b031663ade6e2aa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122c857600080fd5b505afa1580156122dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230091906149dc565b421061231e5760405162461bcd60e51b815260040161049a90615468565b83516001600160a01b0316600090815260d16020908152604080832082880151845290915290819020606086015160a08701516080880151935163155bf27360e31b815273c6e7DF5E7b4f2A278906862b61205850344D4e7d9463aadf9398946123919490939092909190600401615949565b60006040518083038186803b1580156123a957600080fd5b505af41580156123bd573d6000803e3d6000fd5b505060cd54606087015160408089015160a08a0151915163dd2c99f760e01b81526001600160a01b03909416955063dd2c99f7945061240193909190600401614bcf565b600060405180830381600087803b15801561241b57600080fd5b505af115801561242f573d6000803e3d6000fd5b5050505083604001516001600160a01b031684600001516001600160a01b031685606001516001600160a01b03167f2607e210004cef0ad6b3e6aedb778bffb03c1586f8dcf55d49afffde210d8bb187602001518860a00151604051612496929190615976565b60405180910390a450505050565b6124ac6144f0565b60048251600a8111156124bb57fe5b14806124d3575060068251600a8111156124d157fe5b145b6124ef5760405162461bcd60e51b815260040161049a90614fa7565b60208201516001600160a01b03166125195760405162461bcd60e51b815260040161049a90614feb565b60408201516001600160a01b03166120ec5760405162461bcd60e51b815260040161049a906150c2565b61254b614225565b80513390612559828261424f565b61256b836000015184602001516142d5565b6125875760405162461bcd60e51b815260040161049a90614c75565b600083606001519050806001600160a01b031663ade6e2aa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156125c957600080fd5b505afa1580156125dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260191906149dc565b421061261f5760405162461bcd60e51b815260040161049a90615644565b83516001600160a01b0316600090815260d16020908152604080832082880151845290915290819020606086015160a08701516080880151935163951dd8d360e01b815273c6e7DF5E7b4f2A278906862b61205850344D4e7d9463951dd8d3946126929490939092909190600401615949565b60006040518083038186803b1580156126aa57600080fd5b505af41580156126be573d6000803e3d6000fd5b505060cd54606087015160408089015160a08a0151915163fa93b2a560e01b81526001600160a01b03909416955063fa93b2a5945061270293909190600401614bcf565b600060405180830381600087803b15801561271c57600080fd5b505af1158015612730573d6000803e3d6000fd5b5050505083604001516001600160a01b031684600001516001600160a01b031685606001516001600160a01b03167fbd023c53d293da163d185720d4274f4ddabc09d5304491a55abb296cc811d9fa87602001518860a00151604051612496929190615976565b61279f614225565b805133906127ad828261424f565b6127bf836000015184602001516142d5565b6127db5760405162461bcd60e51b815260040161049a90614c75565b60408301516001600160a01b031633148061280f575082600001516001600160a01b031683604001516001600160a01b0316145b61282b5760405162461bcd60e51b815260040161049a9061514b565b60ca54606084015160405163f9839d8960e01b81526001600160a01b039092169163f9839d899161285e91600401614b76565b60206040518083038186803b15801561287657600080fd5b505afa15801561288a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ae919061498a565b6128ca5760405162461bcd60e51b815260040161049a9061579b565b82516001600160a01b0316600090815260d16020908152604080832082870151845290915290819020606085015160a0860151608087015193516301f974ab60e61b815273c6e7DF5E7b4f2A278906862b61205850344D4e7d94637e5d2ac09461293d9490939092909190600401615949565b60006040518083038186803b15801561295557600080fd5b505af4158015612969573d6000803e3d6000fd5b505060cd54606086015160408088015160a0890151915163dd2c99f760e01b81526001600160a01b03909416955063dd2c99f794506129ad93909190600401614bcf565b600060405180830381600087803b1580156129c757600080fd5b505af11580156129db573d6000803e3d6000fd5b5050505082604001516001600160a01b031683600001516001600160a01b031684606001516001600160a01b03167fbfab88b861f171b7db714f00e5966131253918d55ddba816c3eb94657d10239086602001518760a00151604051612a42929190615976565b60405180910390a4505050565b612a57614225565b80513390612a65828261424f565b612a77836000015184602001516142d5565b612a935760405162461bcd60e51b815260040161049a90614c75565b612a9b61442f565b612aad84600001518560200151610f7c565b50509050612abe8160000151614302565b15612b715760008160000151600081518110612ad657fe5b60200260200101519050806001600160a01b031663ade6e2aa6040518163ffffffff1660e01b815260040160206040518083038186803b158015612b1957600080fd5b505afa158015612b2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5191906149dc565b4210612b6f5760405162461bcd60e51b815260040161049a906156a6565b505b83516001600160a01b0316600090815260d16020908152604080832082880151845290915290819020606086015160a087015160808801519351630380bfdd60e61b815273c6e7DF5E7b4f2A278906862b61205850344D4e7d9463e02ff74094612be49490939092909190600401615949565b60006040518083038186803b158015612bfc57600080fd5b505af4158015612c10573d6000803e3d6000fd5b505060cd54606087015160408089015160a08a0151915163fa93b2a560e01b81526001600160a01b03909416955063fa93b2a59450612c5493909190600401614bcf565b600060405180830381600087803b158015612c6e57600080fd5b505af1158015612c82573d6000803e3d6000fd5b5050505083604001516001600160a01b031684600001516001600160a01b031685606001516001600160a01b03167ffe86f7694b6c54a528acbe27be61dd4a85e9a89aeef7f650a1b439045ccee5a487602001518860a00151604051612496929190615976565b612cf16144f0565b60018251600a811115612d0057fe5b14612d1d5760405162461bcd60e51b815260040161049a90614c93565b60208201516001600160a01b03166120ec5760405162461bcd60e51b815260040161049a9061503b565b612d4f614225565b80513390612d5d828261424f565b612d6f836000015184602001516142d5565b612d8b5760405162461bcd60e51b815260040161049a90614c75565b60ca5460608401516040516302328d7360e31b81526001600160a01b03909216916311946b9891612dbe91600401614b76565b60206040518083038186803b158015612dd657600080fd5b505afa158015612dea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0e919061498a565b612e2a5760405162461bcd60e51b815260040161049a906153b6565b600083606001519050806001600160a01b031663ade6e2aa6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e6c57600080fd5b505afa158015612e80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea491906149dc565b4210612ec25760405162461bcd60e51b815260040161049a906151c2565b83516001600160a01b0316600090815260d16020908152604080832082880151845290915290819020606086015160a08701516080880151935163ef682c1b60e01b815273c6e7DF5E7b4f2A278906862b61205850344D4e7d9463ef682c1b94612f359490939092909190600401615949565b60006040518083038186803b158015612f4d57600080fd5b505af4158015612f61573d6000803e3d6000fd5b50505060408086015160a0870151915163051b0a4160e41b81526001600160a01b03851693506351b0a41092612f9a9291600401614bb6565b600060405180830381600087803b158015612fb457600080fd5b505af1158015612fc8573d6000803e3d6000fd5b5050505083604001516001600160a01b031684600001516001600160a01b031685606001516001600160a01b03167f4d7f96086c92b2f9a254ad21548b1c1f2d99502c7949508866349b96bb1a8d8a87602001518860a00151604051612496929190615976565b6130376144f0565b60028251600a81111561304657fe5b146130635760405162461bcd60e51b815260040161049a906151e0565b60208201516001600160a01b03166120ec5760405162461bcd60e51b815260040161049a90615731565b613095614225565b805133906130a3828261424f565b6130b5836000015184602001516142d5565b6130d15760405162461bcd60e51b815260040161049a90614c75565b60408301516001600160a01b0316331480613105575082600001516001600160a01b031683604001516001600160a01b0316145b6131215760405162461bcd60e51b815260040161049a90614ef5565b600083606001519050806001600160a01b031663ade6e2aa6040518163ffffffff1660e01b815260040160206040518083038186803b15801561316357600080fd5b505afa158015613177573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061319b91906149dc565b42106131b95760405162461bcd60e51b815260040161049a9061537a565b83516001600160a01b0316600090815260d16020908152604080832082880151845290915290819020606086015160a087015160808801519351637b5c283560e01b815273c6e7DF5E7b4f2A278906862b61205850344D4e7d94637b5c28359461322c9490939092909190600401615949565b60006040518083038186803b15801561324457600080fd5b505af4158015613258573d6000803e3d6000fd5b50505060408086015160a087015191516356d878f760e01b81526001600160a01b03851693506356d878f7926132919291600401614bb6565b600060405180830381600087803b1580156132ab57600080fd5b505af11580156132bf573d6000803e3d6000fd5b5050505083604001516001600160a01b031684600001516001600160a01b031685606001516001600160a01b03167fdd96b18f26fd9950581b9fd821fa907fc318845fc4d220b825a7b19bfdd174e887602001518860a00151604051612496929190615976565b61332e614541565b60088251600a81111561333d57fe5b1461335a5760405162461bcd60e51b815260040161049a90614e49565b60408201516001600160a01b03166133845760405162461bcd60e51b815260040161049a9061580d565b506040805160608082018352838301516001600160a01b0390811683529084015116602082015260a0909201519082015290565b602081015160ca546040516302328d7360e31b81526001600160a01b03909116906311946b98906133ed908490600401614b76565b60206040518083038186803b15801561340557600080fd5b505afa158015613419573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061343d919061498a565b6134595760405162461bcd60e51b815260040161049a90615578565b600080600080846001600160a01b031663af0968fc6040518163ffffffff1660e01b815260040160c06040518083038186803b15801561349857600080fd5b505afa1580156134ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134d09190614739565b50945050935093509350804210156134fa5760405162461bcd60e51b815260040161049a906156c4565b613506838386846108cd565b6135225760405162461bcd60e51b815260040161049a90615263565b600061353687602001518860400151610631565b9050856001600160a01b03166356d878f73389604001516040518363ffffffff1660e01b815260040161356a929190614bb6565b600060405180830381600087803b15801561358457600080fd5b505af1158015613598573d6000803e3d6000fd5b505060cd54895160405163fa93b2a560e01b81526001600160a01b03909216935063fa93b2a592506135d1918991908690600401614bcf565b600060405180830381600087803b1580156135eb57600080fd5b505af11580156135ff573d6000803e3d6000fd5b5050505086600001516001600160a01b0316336001600160a01b031688602001516001600160a01b03167f18fd144d7dbcbaa6f00fd47a84adc7dc3cc64a326ffa2dc7691a25e3837dba03888b604001518660405161366093929190614c1e565b60405180910390a450505050505050565b613679614541565b60078251600a81111561368857fe5b146136a55760405162461bcd60e51b815260040161049a90615486565b60208201516001600160a01b03166136cf5760405162461bcd60e51b815260040161049a90615327565b60408201516001600160a01b03166136f95760405162461bcd60e51b815260040161049a906155b4565b604051806060016040528083602001516001600160a01b031681526020018360800151815260200183604001516001600160a01b03168152509050919050565b80513390613747828261424f565b613759836000015184602001516142d5565b6137755760405162461bcd60e51b815260040161049a90614c75565b61377d61442f565b600061379185600001518660200151610f7c565b50915091506000806137a68460000151614302565b905060006137b78560200151614302565b905081806137c25750805b6137de5760405162461bcd60e51b815260040161049a90614d9a565b816138015784602001516000815181106137f457fe5b6020026020010151613817565b8451805160009061380e57fe5b60200260200101515b925080156138cb576000856020015160008151811061383257fe5b60200260200101519050806001600160a01b03166356d878f760cd60009054906101000a90046001600160a01b0316886080015160008151811061387257fe5b60200260200101516040518363ffffffff1660e01b8152600401613897929190614bb6565b600060405180830381600087803b1580156138b157600080fd5b505af11580156138c5573d6000803e3d6000fd5b50505050505b5050600080600080846001600160a01b031663af0968fc6040518163ffffffff1660e01b815260040160c06040518083038186803b15801561390c57600080fd5b505afa158015613920573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139449190614739565b509450509350935093508042101561396e5760405162461bcd60e51b815260040161049a90615415565b61397a838386846108cd565b6139965760405162461bcd60e51b815260040161049a90615263565b60cc5460405163cd43fbfb60e01b815260009182916001600160a01b039091169063cd43fbfb906139cd908c908c906004016158d3565b604080518083038186803b1580156139e457600080fd5b505afa1580156139f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a1c91906149f4565b9150915080613a3d5760405162461bcd60e51b815260040161049a90615169565b60d160008d600001516001600160a01b03166001600160a01b0316815260200190815260200160002060008d60200151815260200190815260200160002060008082016000613a8c9190614561565b613a9a600183016000614561565b613aa8600283016000614561565b613ab6600383016000614561565b613ac4600483016000614561565b613ad2600583016000614561565b505060cd546040808e0151905163fa93b2a560e01b81526001600160a01b039092169163fa93b2a591613b0c918a91908790600401614bcf565b600060405180830381600087803b158015613b2657600080fd5b505af1158015613b3a573d6000803e3d6000fd5b5050505060008c60200151905060008d60400151905089896001600160a01b03168f600001516001600160a01b03167f522cda7dd0677ee4c9512efd8aa92af93de64b4c2fe2f8bfe7a9234a655a9bf5848887604051613b9c93929190614c1e565b60405180910390a45050505050505050505050505050565b613bbc61457f565b600a8251600a811115613bcb57fe5b14613be85760405162461bcd60e51b815260040161049a90615662565b60208201516001600160a01b0316613c125760405162461bcd60e51b815260040161049a90615859565b60408201516001600160a01b0316613c3c5760405162461bcd60e51b815260040161049a906152d2565b8160e0015151602014613c615760405162461bcd60e51b815260040161049a90614cf1565b60008260e00151806020019051810190613c7b91906149dc565b90506040518060a0016040528084602001516001600160a01b0316815260200184604001516001600160a01b03168152602001846080015181526020018460a00151815260200182815250915050919050565b613cd6614225565b613ce8816000015182604001516142d5565b613d045760405162461bcd60e51b815260040161049a90614c75565b613d0c61442f565b6000806000613d28856000015186604001518760800151611c50565b935093509350935082613d4d5760405162461bcd60e51b815260040161049a90615609565b6000613d6e6305f5e1006106d085896060015161182390919063ffffffff16565b90506000613da187606001518760600151600081518110613d8b57fe5b602002602001015161434090919063ffffffff16565b1115613ddb5781613dbd828760a00151600081518110613d8b57fe5b1015613ddb5760405162461bcd60e51b815260040161049a906150a4565b84518051600090613de857fe5b60200260200101516001600160a01b03166356d878f73388606001516040518363ffffffff1660e01b8152600401613e21929190614bb6565b600060405180830381600087803b158015613e3b57600080fd5b505af1158015613e4f573d6000803e3d6000fd5b505087516001600160a01b0316600090815260d160209081526040808320818c0151845290915280822090890151805173c6e7DF5E7b4f2A278906862b61205850344D4e7d955063e02ff740945091929091613ea757fe5b60200260200101518460006040518563ffffffff1660e01b8152600401613ed19493929190615949565b60006040518083038186803b158015613ee957600080fd5b505af4158015613efd573d6000803e3d6000fd5b505087516001600160a01b0316600090815260d160209081526040808320818c0151845290915281208851805173c6e7DF5E7b4f2A278906862b61205850344D4e7d9550637b5c2835945091929091613f5257fe5b6020026020010151896060015160006040518563ffffffff1660e01b8152600401613f809493929190615949565b60006040518083038186803b158015613f9857600080fd5b505af4158015613fac573d6000803e3d6000fd5b505060cd54604088015180516001600160a01b03909216935063fa93b2a5925090600090613fd657fe5b60200260200101518860200151846040518463ffffffff1660e01b815260040161400293929190614bcf565b600060405180830381600087803b15801561401c57600080fd5b505af1158015614030573d6000803e3d6000fd5b5050505085600001516001600160a01b031686602001516001600160a01b0316336001600160a01b03167f93e59ec97820bb1ed9fb6ddc10619d1574e803b1f79b937414feb8f6b7051f9d868a60800151868c606001518d6040015160405161409d959493929190615984565b60405180910390a4505050505050565b6140b56145c0565b60098251600a8111156140c457fe5b146140e15760405162461bcd60e51b815260040161049a90614f67565b60408201516001600160a01b031661410b5760405162461bcd60e51b815260040161049a90614d4e565b50604080518082018252908201516001600160a01b0316815260e090910151602082015290565b61413a614225565b805160cf54600160b01b900460ff16156141735761415781614382565b6141735760405162461bcd60e51b815260040161049a90614f4a565b815160208301516040516309c23da560e41b81526001600160a01b0390921691639c23da50916141a891339190600401614b8a565b600060405180830381600087803b1580156141c257600080fd5b505af11580156141d6573d6000803e3d6000fd5b5050505081600001516001600160a01b0316336001600160a01b03167f8750bdaf6e88201790ee2765fea3ac73b514a52658c818723a30de91029ad00084602001516040516106259190614c62565b60cf54600160a01b900460ff16156107da5760405162461bcd60e51b815260040161049a90615110565b806001600160a01b0316826001600160a01b0316148061429457506001600160a01b03808216600090815260d2602090815260408083209386168352929052205460ff165b6115345760405162461bcd60e51b815260040161049a90614e8b565b60008282018381101561185d5760405162461bcd60e51b815260040161049a90614f13565b6000808211801561185d5750506001600160a01b0391909116600090815260d06020526040902054101590565b60008082511180156106e0575060006001600160a01b03168260008151811061432757fe5b60200260200101516001600160a01b0316141592915050565b600061185d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614403565b60ca546040516351572a2d60e11b81526000916001600160a01b03169063a2ae545a906143b3908590600401614b76565b60206040518083038186803b1580156143cb57600080fd5b505afa1580156143df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e0919061498a565b600081848411156144275760405162461bcd60e51b815260040161049a9190614c62565b505050900390565b6040518060c001604052806060815260200160608152602001606081526020016060815260200160608152602001606081525090565b604080516101008101909152806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001606081525090565b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b6040518060c0016040528060006001600160a01b031681526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081525090565b604080516060810182526000808252602082018190529181019190915290565b50805460008255906000526020600020908101906115c591906145d8565b6040518060a0016040528060006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b60408051808201909152600081526060602082015290565b6108bb91905b808211156145f257600081556001016145de565b5090565b80356106e0816159ce565b600082601f830112614611578081fd5b813567ffffffffffffffff811115614627578182fd5b61463a601f8201601f19166020016159a7565b915080825283602082850101111561465157600080fd5b8060208401602084013760009082016020015292915050565b8035600b81106106e057600080fd5b60006020828403121561468a578081fd5b813561185d816159ce565b6000602082840312156146a6578081fd5b815161185d816159ce565b600080604083850312156146c3578081fd5b82356146ce816159ce565b915060208301356146de816159ce565b809150509250929050565b600080600080608085870312156146fe578182fd5b8435614709816159ce565b93506020850135614719816159ce565b92506040850135614729816159ce565b9396929550929360600135925050565b60008060008060008060c08789031215614751578182fd5b865161475c816159ce565b602088015190965061476d816159ce565b604088015190955061477e816159ce565b80945050606087015192506080870151915060a087015161479e816159e3565b809150509295509295509295565b600080604083850312156147be578182fd5b82356147c9816159ce565b915060208301356146de816159e3565b600080604083850312156147eb578182fd5b82356147f6816159ce565b946020939093013593505050565b600080600060608486031215614818578283fd5b8335614823816159ce565b95602085013595506040909401359392505050565b6000602080838503121561484a578182fd5b823567ffffffffffffffff80821115614861578384fd5b81850186601f820112614872578485fd5b8035925081831115614882578485fd5b61488f84858502016159a7565b83815284810190828601875b8681101561495f578135850161010080601f19838f030112156148bc578a8bfd5b6148c5816159a7565b6148d18e8c850161466a565b81526148e08e604085016145f6565b8b82015260606148f28f8286016145f6565b60408301526149048f608086016145f6565b818301525060a0830135608082015260c083013560a082015260e083013560c08201528183013589811115614937578c8dfd5b6149458f8d83870101614601565b60e08301525086525050928701929087019060010161489b565b50909998505050505050505050565b60006020828403121561497f578081fd5b813561185d816159e3565b60006020828403121561499b578081fd5b815161185d816159e3565b6000806000606084860312156149ba578081fd5b83516149c5816159e3565b602085015160409095015190969495509392505050565b6000602082840312156149ed578081fd5b5051919050565b60008060408385031215614a06578182fd5b8251915060208301516146de816159e3565b6000815180845260208085019450808401835b83811015614a505781516001600160a01b031687529582019590820190600101614a2b565b509495945050505050565b6000815180845260208085019450808401835b83811015614a5057815187529582019590820190600101614a6e565b60008151808452815b81811015614aaf57602081850181015186830182015201614a93565b81811115614ac05782602083870101525b50601f01601f19169290920160200192915050565b6000815160c08452614aea60c0850182614a18565b602084015191508481036020860152614b038183614a18565b604085015192508581036040870152614b1c8184614a18565b915050606084015191508481036060860152614b388183614a5b565b608085015192508581036080870152614b518184614a5b565b91505060a0840151915084810360a0860152614b6d8183614a5b565b95945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0383168152604060208201819052600090614bae90830184614a8a565b949350505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03948516815292841660208401529083166040830152909116606082015260800190565b6001600160a01b039390931683526020830191909152604082015260600190565b901515815260200190565b92151583526020830191909152604082015260600190565b60006020825261185d6020830184614a8a565b602080825260049082015263434f333560e01b604082015260600190565b60208082526032908201526000805160206159f28339815191526040820152717320666f72206d696e7420616374696f6e7360701b606082015260800190565b602080825260049082015263434f313360e01b604082015260600190565b60208082526037908201527f416374696f6e733a2063616e6e6f74207061727365206c69717569646174652060408201527f616374696f6e2077697468206e6f20726f756e64206964000000000000000000606082015260800190565b6020808252602c908201527f416374696f6e733a2074617267657420616464726573732063616e6e6f74206260408201526b65206164647265737328302960a01b606082015260800190565b6020808252600490820152630434f33360e41b604082015260600190565b60208082526038908201526000805160206159f283398151915260408201527f7320666f72206f70656e207661756c7420616374696f6e730000000000000000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526034908201526000805160206159f28339815191526040820152737320666f722072656465656d20616374696f6e7360601b606082015260800190565b60208082526003908201526221a79b60e91b604082015260600190565b6020808252602d908201527f416374696f6e733a2063616e6e6f74206465706f73697420746f20616e20696e60408201526c1d985b1a59081858d8dbdd5b9d609a1b606082015260800190565b602080825260049082015263434f323560e01b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b602080825260039082015262434f3360e81b604082015260600190565b60208082526032908201526000805160206159f28339815191526040820152717320666f722063616c6c20616374696f6e7360701b606082015260800190565b60208082526036908201526000805160206159f28339815191526040820152757320666f7220776974686472617720616374696f6e7360501b606082015260800190565b60208082526030908201527f416374696f6e733a2063616e6e6f742077697468647261772066726f6d20616e60408201526f081a5b9d985b1a59081858d8dbdd5b9d60821b606082015260800190565b6020808252602c908201527f416374696f6e733a2063616e6e6f74206d696e742066726f6d20616e20696e7660408201526b185b1a59081858d8dbdd5b9d60a21b606082015260800190565b602080825260039082015262434f3760e81b604082015260600190565b60208082526004908201526310d3cccd60e21b604082015260600190565b6020808252602e908201527f416374696f6e733a2063616e6e6f7420776974686472617720746f20616e206960408201526d1b9d985b1a59081858d8dbdd5b9d60921b606082015260800190565b60208082526003908201526210d3cd60ea1b604082015260600190565b602080825260049082015263434f313560e01b604082015260600190565b6020808252600490820152630434f32360e41b604082015260600190565b60208082526004908201526321a7999960e11b604082015260600190565b60208082526004908201526321a7989960e11b604082015260600190565b602080825260039082015262434f3560e81b604082015260600190565b60208082526004908201526310d3cc8d60e21b604082015260600190565b60208082526032908201526000805160206159f28339815191526040820152717320666f72206275726e20616374696f6e7360701b606082015260800190565b60208082526035908201526000805160206159f28339815191526040820152747320666f72206465706f73697420616374696f6e7360581b606082015260800190565b602080825260049082015263434f323960e01b604082015260600190565b60208082526031908201527f416374696f6e733a2063616e6e6f74206f70656e207661756c7420666f7220616040820152701b881a5b9d985b1a59081858d8dbdd5b9d607a1b606082015260800190565b60208082526035908201527f416374696f6e733a2063616e6e6f742073656e6420636f6c6c61746572616c206040820152741d1bc8185b881a5b9d985b1a59081858d8dbdd5b9d605a1b606082015260800190565b60208082526033908201527f416374696f6e733a2063616e6e6f7420736574746c65207661756c7420666f7260408201527208185b881a5b9d985b1a59081858d8dbdd5b9d606a1b606082015260800190565b60208082526004908201526321a7991b60e11b604082015260600190565b602080825260049082015263434f313160e01b604082015260600190565b602080825260049082015263434f323360e01b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b602080825260049082015263434f333160e01b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600490820152630869e62760e31b604082015260600190565b6020808252603a908201526000805160206159f283398151915260408201527f7320666f7220736574746c65207661756c7420616374696f6e73000000000000606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526004908201526321a7989b60e11b604082015260600190565b60208082526004908201526310d3cc4d60e21b604082015260600190565b60208082526003908201526221a79960e91b604082015260600190565b602080825260049082015263434f323760e01b604082015260600190565b602080825260049082015263434f313760e01b604082015260600190565b60208082526035908201527f416374696f6e733a2063616e6e6f74207769746864726177207061796f7574206040820152741d1bc8185b881a5b9d985b1a59081858d8dbdd5b9d605a1b606082015260800190565b602080825260049082015263434f333360e01b604082015260600190565b602080825260039082015262434f3160e81b604082015260600190565b602080825260049082015263434f313960e01b604082015260600190565b60208082526036908201526000805160206159f283398151915260408201527539903337b9103634b8bab4b230ba329030b1ba34b7b760511b606082015260800190565b60208082526004908201526321a7991960e11b604082015260600190565b6020808252600490820152630869e64760e31b604082015260600190565b6020808252602f908201527f416374696f6e733a2063616e6e6f74206f70656e207661756c7420776974682060408201526e616e20696e76616c6964207479706560881b606082015260800190565b6020808252602c908201527f416374696f6e733a2063616e6e6f74206275726e2066726f6d20616e20696e7660408201526b185b1a59081858d8dbdd5b9d60a21b606082015260800190565b6020808252600490820152630434f31360e41b604082015260600190565b602080825260049082015263434f323160e01b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252600390820152620869e760eb1b604082015260600190565b6020808252602c908201527f416374696f6e733a2063616e6e6f742072656465656d20746f20616e20696e7660408201526b185b1a59081858d8dbdd5b9d60a21b606082015260800190565b6020808252603c908201527f416374696f6e733a2063616e6e6f74206c6971756964617465207661756c742060408201527f666f7220616e20696e76616c6964206163636f756e74206f776e657200000000606082015260800190565b602080825260039082015262434f3960e81b604082015260600190565b6000604082526158e66040830185614ad5565b90508260208301529392505050565b6000606082526159086060830186614ad5565b60208301949094525060400152919050565b60006080825261592d6080830187614ad5565b6020830195909552506040810192909252606090910152919050565b9384526001600160a01b039290921660208401526040830152606082015260800190565b90815260200190565b918252602082015260400190565b948552602085019390935260408401919091526060830152608082015260a00190565b60405181810167ffffffffffffffff811182821017156159c657600080fd5b604052919050565b6001600160a01b03811681146115c557600080fd5b80151581146115c557600080fdfe416374696f6e733a2063616e206f6e6c7920706172736520617267756d656e74a2646970667358221220655bed60197d9a58b7fb313e8e808ec06885daecdc1c7368c435bd712d7cb8cd64736f6c634300060a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101fb5760003560e01c80639f677ed91161011a578063cdee058a116100ad578063eaa33e141161007c578063eaa33e14146103d6578063eab7775b146103f8578063ef4fcafa14610400578063f2fde38b14610413578063f77bc88b14610426576101fb565b8063cdee058a14610391578063ce3e39c014610399578063d99d13f5146103a1578063e69d849d146103c3576101fb565b8063beca75d7116100e9578063beca75d714610345578063c220101d14610358578063caa6d21a1461036b578063cab2e8051461037e576101fb565b80639f677ed9146102f9578063b617f0c61461030c578063b6363cf21461031f578063bc463a3d14610332576101fb565b80636c0c3b99116101925780638da5cb5b116101615780638da5cb5b146102ce57806393e59dc1146102d657806395b8d3f5146102de5780639db93891146102f1576101fb565b80636c0c3b99146102a157806370dc320c146102b6578063715018a6146102be5780637dc0d1d0146102c6576101fb565b8063565eea19116101ce578063565eea191461024e578063573c473e1461026e57806364681083146102815780636bd50cef14610289576101fb565b806316f0115b1461020057806329729d881461021e578063485cc95514610226578063558a72971461023b575b600080fd5b610208610439565b6040516102159190614b76565b60405180910390f35b610208610448565b6102396102343660046146b1565b610457565b005b6102396102493660046147ac565b610578565b61026161025c3660046147d9565b610631565b604051610215919061596d565b61023961027c36600461496e565b6106e6565b61023961079d565b6102916107dc565b6040516102159493929190614bf3565b6102a9610801565b6040516102159190614c3f565b610208610811565b610239610820565b61020861089f565b6102086108ae565b6102086108be565b6102a96102ec3660046146e9565b6108cd565b610208610a85565b61023961030736600461496e565b610a94565b61023961031a366004614838565b610b40565b6102a961032d3660046146b1565b610bd2565b610239610340366004614679565b610c00565b610239610353366004614679565b610ce5565b6102616103663660046147d9565b610dca565b610261610379366004614679565b610e8b565b61023961038c36600461496e565b610ea6565b6102a9610f5d565b610208610f6d565b6103b46103af3660046147d9565b610f7c565b604051610215939291906158f5565b6102396103d13660046147d9565b611215565b6103e96103e4366004614804565b6112be565b60405161021593929190614c4a565b6102a96112e5565b61023961040e3660046147d9565b6112f5565b610239610421366004614679565b611368565b6102a9610434366004614679565b61141f565b60cd546001600160a01b031681565b60cf546001600160a01b031681565b600054610100900460ff1680610470575061047061149d565b8061047e575060005460ff16155b6104a35760405162461bcd60e51b815260040161049a906154d1565b60405180910390fd5b600054610100900460ff161580156104ce576000805460ff1961ff0019909116610100171660011790555b6001600160a01b0383166104f45760405162461bcd60e51b815260040161049a90615087565b6001600160a01b03821661051a5760405162461bcd60e51b815260040161049a906157f0565b610523826114a3565b61052b611538565b60c980546001600160a01b0319166001600160a01b03851617905561054e6115c8565b60cf805460ff60b01b1916600160b01b1790558015610573576000805461ff00191690555b505050565b33600090815260d2602090815260408083206001600160a01b038616845290915290205460ff16151581151514156105c25760405162461bcd60e51b815260040161049a906158b6565b33600081815260d2602090815260408083206001600160a01b038716808552925291829020805460ff191685151517905590519091907f1ae45540b0875932452da603b351ce2f1758258ba1345e79f8fc94f044cb078790610625908590614c3f565b60405180910390a35050565b60cc54604051630478409360e41b815260009182916001600160a01b0390911690634784093090610666908790600401614b76565b60206040518083038186803b15801561067e57600080fd5b505afa158015610692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b691906149dc565b90506106dc6305f5e1006106d0838663ffffffff61182316565b9063ffffffff61186416565b9150505b92915050565b60ce546001600160a01b031633146107105760405162461bcd60e51b815260040161049a9061555b565b60cf5460ff600160a01b90910416151581151514156107415760405162461bcd60e51b815260040161049a906158b6565b60cf805460ff60a01b1916600160a01b831515810291909117918290556040517f531c3d7229f510a8da00a0f5792686958cdd9c8a120c3c030a6053cd66b68556926107929260ff91041690614c3f565b60405180910390a150565b6107a56118a6565b6065546001600160a01b039081169116146107d25760405162461bcd60e51b815260040161049a90615433565b6107da6115c8565b565b60ca5460cb5460cc5460cd546001600160a01b03938416949284169391821692911690565b60cf54600160b01b900460ff1681565b60c9546001600160a01b031681565b6108286118a6565b6065546001600160a01b039081169116146108555760405162461bcd60e51b815260040161049a90615433565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b60cb546001600160a01b031681565b6065546001600160a01b03165b90565b60ca546001600160a01b031681565b60cb54604051635fdc714960e01b815260009182916001600160a01b0390911690635fdc7149906109049089908790600401614bb6565b60206040518083038186803b15801561091c57600080fd5b505afa158015610930573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610954919061498a565b60cb54604051635fdc714960e01b81529192506000916001600160a01b0390911690635fdc71499061098c9089908890600401614bb6565b60206040518083038186803b1580156109a457600080fd5b505afa1580156109b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109dc919061498a565b60cb54604051635fdc714960e01b81529192506000916001600160a01b0390911690635fdc714990610a149089908990600401614bb6565b60206040518083038186803b158015610a2c57600080fd5b505afa158015610a40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a64919061498a565b9050828015610a705750815b8015610a795750805b98975050505050505050565b60ce546001600160a01b031681565b60cf546001600160a01b03163314610abe5760405162461bcd60e51b815260040161049a90615627565b60cf5460ff600160a81b9091041615158115151415610aef5760405162461bcd60e51b815260040161049a906158b6565b60cf805460ff60a81b1916600160a81b831515810291909117918290556040517f4f1d0445688d95c99ca9fc036f551b205fd18ff26a4443b1979c16d1ba66b535926107929260ff91041690614c3f565b60975460ff16610b625760405162461bcd60e51b815260040161049a906157b9565b6097805460ff19169055610b746118aa565b6000806000610b82846118d4565b9250925092508215610bbf57610b988282611b8a565b6001600160a01b038216600090815260d46020908152604080832084845290915290204290555b50506097805460ff191660011790555050565b6001600160a01b03918216600090815260d26020908152604080832093909416825291909152205460ff1690565b610c086118a6565b6065546001600160a01b03908116911614610c355760405162461bcd60e51b815260040161049a90615433565b6001600160a01b038116610c5b5760405162461bcd60e51b815260040161049a90615398565b60ce546001600160a01b0382811691161415610c895760405162461bcd60e51b815260040161049a906158b6565b60ce546040516001600160a01b038084169216907f1440312dbc326ddc21bfa95078324bf5aaf6899e8a27cba3057c60adfc84e40b90600090a360ce80546001600160a01b0319166001600160a01b0392909216919091179055565b610ced6118a6565b6065546001600160a01b03908116911614610d1a5760405162461bcd60e51b815260040161049a90615433565b6001600160a01b038116610d405760405162461bcd60e51b815260040161049a9061577d565b60cf546001600160a01b0382811691161415610d6e5760405162461bcd60e51b815260040161049a906158b6565b60cf546040516001600160a01b038084169216907f44f3e9e7b454118e9fcb2e3026396f57ca21d7bd7dcabd31d7f986806422f4df90600090a360cf80546001600160a01b0319166001600160a01b0392909216919091179055565b6000610dd461442f565b6000610de08585610f7c565b5060cc5460405163cd43fbfb60e01b815292945090925060009182916001600160a01b03169063cd43fbfb90610e1c90879087906004016158d3565b604080518083038186803b158015610e3357600080fd5b505afa158015610e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6b91906149f4565b9150915080610e815760009450505050506106e0565b5095945050505050565b6001600160a01b0316600090815260d0602052604090205490565b610eae6118a6565b6065546001600160a01b03908116911614610edb5760405162461bcd60e51b815260040161049a90615433565b60cf5460ff600160b01b9091041615158115151415610f0c5760405162461bcd60e51b815260040161049a906158b6565b60cf805460ff60b01b1916600160b01b831515810291909117918290556040517f26d614575a4c104c181c87003d4bb00cc7ade00d5b47bf8775171c12a376b255926107929260ff91041690614c3f565b60cf54600160a01b900460ff1681565b60cc546001600160a01b031681565b610f8461442f565b6001600160a01b038316600081815260d160209081526040808320868452825280832084845260d3835281842087855283528184205494845260d483528184208785528352818420548251825460e09581028201860190945260c08101848152959687969395909492939192869284929091849184018282801561103157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611013575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561109357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611075575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156110f557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116110d7575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561114d57602002820191906000526020600020905b815481526020019060010190808311611139575b50505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156111a557602002820191906000526020600020905b815481526020019060010190808311611191575b50505050508152602001600582018054806020026020016040519081016040528092919081815260200182805480156111fd57602002820191906000526020600020905b8154815260200190600101908083116111e9575b50505050508152505092509250925092509250925092565b60cd5460405163dd2c99f760e01b81526001600160a01b039091169063dd2c99f79061124990859033908690600401614bcf565b600060405180830381600087803b15801561126357600080fd5b505af1158015611277573d6000803e3d6000fd5b50505050816001600160a01b0316336001600160a01b03167f4dfff917e1fbb261a082e98cc7d43029621f6a6eb05ff3fef1510d5f1eb4857c83604051610625919061596d565b6000806000806000806112d2898989611c50565b919c909b50909950975050505050505050565b60cf54600160a81b900460ff1681565b60975460ff166113175760405162461bcd60e51b815260040161049a906157b9565b6097805460ff191690556113296118aa565b6113338282611b8a565b6001600160a01b03909116600090815260d460209081526040808320938352929052204290556097805460ff19166001179055565b6113706118a6565b6065546001600160a01b0390811691161461139d5760405162461bcd60e51b815260040161049a90615433565b6001600160a01b0381166113c35760405162461bcd60e51b815260040161049a90614e03565b6065546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b600080826001600160a01b031663ade6e2aa6040518163ffffffff1660e01b815260040160206040518083038186803b15801561145b57600080fd5b505afa15801561146f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149391906149dc565b4210159392505050565b303b1590565b600054610100900460ff16806114bc57506114bc61149d565b806114ca575060005460ff16155b6114e65760405162461bcd60e51b815260040161049a906154d1565b600054610100900460ff16158015611511576000805460ff1961ff0019909116610100171660011790555b611519611d2b565b61152282611dad565b8015611534576000805461ff00191690555b5050565b600054610100900460ff1680611551575061155161149d565b8061155f575060005460ff16155b61157b5760405162461bcd60e51b815260040161049a906154d1565b600054610100900460ff161580156115a6576000805460ff1961ff0019909116610100171660011790555b6097805460ff1916600117905580156115c5576000805461ff00191690555b50565b60c960009054906101000a90046001600160a01b03166001600160a01b031663d01f63f56040518163ffffffff1660e01b815260040160206040518083038186803b15801561161657600080fd5b505afa15801561162a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164e9190614695565b60ca80546001600160a01b0319166001600160a01b0392831617905560c9546040805163419d8fe760e11b81529051919092169163833b1fce916004808301926020929190829003018186803b1580156116a757600080fd5b505afa1580156116bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116df9190614695565b60cb80546001600160a01b0319166001600160a01b0392831617905560c9546040805163cf28493f60e01b81529051919092169163cf28493f916004808301926020929190829003018186803b15801561173857600080fd5b505afa15801561174c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117709190614695565b60cc80546001600160a01b0319166001600160a01b0392831617905560c95460408051633aa431a160e11b8152905191909216916375486342916004808301926020929190829003018186803b1580156117c957600080fd5b505afa1580156117dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118019190614695565b60cd80546001600160a01b0319166001600160a01b0392909216919091179055565b600082611832575060006106e0565b8282028284828161183f57fe5b041461185d5760405162461bcd60e51b815260040161049a906153d4565b9392505050565b600061185d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611e79565b3390565b60cf54600160a81b900460ff16156107da5760405162461bcd60e51b815260040161049a906151a5565b60008080808080805b8751811015611b7e576118ee614465565b8882815181106118fa57fe5b60209081029190910101518051909150600781600a81111561191857fe5b141580156119325750600881600a81111561192f57fe5b14155b801561194a5750600a81600a81111561194757fe5b14155b80156119625750600981600a81111561195f57fe5b14155b156119d85783156119c55781602001516001600160a01b0316866001600160a01b0316146119a25760405162461bcd60e51b815260040161049a90615187565b816080015185146119c55760405162461bcd60e51b815260040161049a90614cd3565b6001935081608001519450816020015195505b600081600a8111156119e657fe5b1415611a02576119fd6119f883611eb0565b611f88565b611b74565b600381600a811115611a1057fe5b1415611a27576119fd611a2283612077565b612153565b600481600a811115611a3557fe5b1415611a4c576119fd611a47836124a4565b612543565b600581600a811115611a5a57fe5b1415611a71576119fd611a6c83612077565b612797565b600681600a811115611a7f57fe5b1415611a96576119fd611a91836124a4565b612a4f565b600181600a811115611aa457fe5b1415611abb576119fd611ab683612ce9565b612d47565b600281600a811115611ac957fe5b1415611ae0576119fd611adb8361302f565b61308d565b600881600a811115611aee57fe5b1415611b05576119fd611b0083613326565b6133b8565b600781600a811115611b1357fe5b1415611b2a576119fd611b2583613671565b613739565b600a81600a811115611b3857fe5b1415611b4f576119fd611b4a83613bb4565b613cce565b600981600a811115611b5d57fe5b1415611b7457611b74611b6f836140ad565b614132565b50506001016118dd565b50969195509350915050565b611b9261442f565b6000611b9e8484610f7c565b5060cc5460405163cd43fbfb60e01b81529294509092506000916001600160a01b039091169063cd43fbfb90611bda90869086906004016158d3565b604080518083038186803b158015611bf157600080fd5b505afa158015611c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2991906149f4565b91505080611c495760405162461bcd60e51b815260040161049a9061553d565b5050505050565b611c5861442f565b6000806000611c6561442f565b600080611c728a8a610f7c565b925092509250600080600060cc60009054906101000a90046001600160a01b03166001600160a01b031663a6c569078787878f6040518563ffffffff1660e01b8152600401611cc4949392919061591a565b60606040518083038186803b158015611cdc57600080fd5b505afa158015611cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1491906149a6565b979f919e509c50959a509498505050505050505050565b600054610100900460ff1680611d445750611d4461149d565b80611d52575060005460ff16155b611d6e5760405162461bcd60e51b815260040161049a906154d1565b600054610100900460ff16158015611d99576000805460ff1961ff0019909116610100171660011790555b80156115c5576000805461ff001916905550565b600054610100900460ff1680611dc65750611dc661149d565b80611dd4575060005460ff16155b611df05760405162461bcd60e51b815260040161049a906154d1565b600054610100900460ff16158015611e1b576000805460ff1961ff0019909116610100171660011790555b606580546001600160a01b0319166001600160a01b0384169081179091556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a38015611534576000805461ff00191690555050565b60008183611e9a5760405162461bcd60e51b815260040161049a9190614c62565b506000838581611ea657fe5b0495945050505050565b611eb86144c6565b60008251600a811115611ec757fe5b14611ee45760405162461bcd60e51b815260040161049a90614db8565b60208201516001600160a01b0316611f0e5760405162461bcd60e51b815260040161049a90615281565b60008260e001515160201415611f39578260e00151806020019051810190611f3691906149dc565b90505b60028110611f595760405162461bcd60e51b815260040161049a906156e2565b604080516060810182526020808601516001600160a01b03168252608090950151948101949094528301525090565b611f90614225565b80513390611f9e828261424f565b82516001600160a01b0316600090815260d06020526040812054611fc990600163ffffffff6142b016565b905080846020015114611fee5760405162461bcd60e51b815260040161049a9061512d565b83516001600160a01b03908116600090815260d060209081526040808320859055808801805189518616855260d384528285208786529093529281902091909155905186519151909291909116907f5d66689e2c864b4f21efd3988c0ce5dc8a197981b68e81ce73660e92394fe25f9061206990859061596d565b60405180910390a350505050565b61207f6144f0565b60038251600a81111561208e57fe5b14806120a6575060058251600a8111156120a457fe5b145b6120c25760405162461bcd60e51b815260040161049a90615220565b60208201516001600160a01b03166120ec5760405162461bcd60e51b815260040161049a90614ea8565b6040518060c0016040528083602001516001600160a01b031681526020018360800151815260200183604001516001600160a01b0316815260200183606001516001600160a01b031681526020018360c0015181526020018360a001518152509050919050565b61215b614225565b80513390612169828261424f565b61217b836000015184602001516142d5565b6121975760405162461bcd60e51b815260040161049a90614c75565b60408301516001600160a01b03163314806121cb575082600001516001600160a01b031683604001516001600160a01b0316145b6121e75760405162461bcd60e51b815260040161049a9061551f565b60ca5460608401516040516302328d7360e31b81526001600160a01b03909216916311946b989161221a91600401614b76565b60206040518083038186803b15801561223257600080fd5b505afa158015612246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226a919061498a565b6122865760405162461bcd60e51b815260040161049a90615596565b600083606001519050806001600160a01b031663ade6e2aa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122c857600080fd5b505afa1580156122dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230091906149dc565b421061231e5760405162461bcd60e51b815260040161049a90615468565b83516001600160a01b0316600090815260d16020908152604080832082880151845290915290819020606086015160a08701516080880151935163155bf27360e31b815273__$362a863f415d70a336820c809e07c78c48$__9463aadf9398946123919490939092909190600401615949565b60006040518083038186803b1580156123a957600080fd5b505af41580156123bd573d6000803e3d6000fd5b505060cd54606087015160408089015160a08a0151915163dd2c99f760e01b81526001600160a01b03909416955063dd2c99f7945061240193909190600401614bcf565b600060405180830381600087803b15801561241b57600080fd5b505af115801561242f573d6000803e3d6000fd5b5050505083604001516001600160a01b031684600001516001600160a01b031685606001516001600160a01b03167f2607e210004cef0ad6b3e6aedb778bffb03c1586f8dcf55d49afffde210d8bb187602001518860a00151604051612496929190615976565b60405180910390a450505050565b6124ac6144f0565b60048251600a8111156124bb57fe5b14806124d3575060068251600a8111156124d157fe5b145b6124ef5760405162461bcd60e51b815260040161049a90614fa7565b60208201516001600160a01b03166125195760405162461bcd60e51b815260040161049a90614feb565b60408201516001600160a01b03166120ec5760405162461bcd60e51b815260040161049a906150c2565b61254b614225565b80513390612559828261424f565b61256b836000015184602001516142d5565b6125875760405162461bcd60e51b815260040161049a90614c75565b600083606001519050806001600160a01b031663ade6e2aa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156125c957600080fd5b505afa1580156125dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260191906149dc565b421061261f5760405162461bcd60e51b815260040161049a90615644565b83516001600160a01b0316600090815260d16020908152604080832082880151845290915290819020606086015160a08701516080880151935163951dd8d360e01b815273__$362a863f415d70a336820c809e07c78c48$__9463951dd8d3946126929490939092909190600401615949565b60006040518083038186803b1580156126aa57600080fd5b505af41580156126be573d6000803e3d6000fd5b505060cd54606087015160408089015160a08a0151915163fa93b2a560e01b81526001600160a01b03909416955063fa93b2a5945061270293909190600401614bcf565b600060405180830381600087803b15801561271c57600080fd5b505af1158015612730573d6000803e3d6000fd5b5050505083604001516001600160a01b031684600001516001600160a01b031685606001516001600160a01b03167fbd023c53d293da163d185720d4274f4ddabc09d5304491a55abb296cc811d9fa87602001518860a00151604051612496929190615976565b61279f614225565b805133906127ad828261424f565b6127bf836000015184602001516142d5565b6127db5760405162461bcd60e51b815260040161049a90614c75565b60408301516001600160a01b031633148061280f575082600001516001600160a01b031683604001516001600160a01b0316145b61282b5760405162461bcd60e51b815260040161049a9061514b565b60ca54606084015160405163f9839d8960e01b81526001600160a01b039092169163f9839d899161285e91600401614b76565b60206040518083038186803b15801561287657600080fd5b505afa15801561288a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ae919061498a565b6128ca5760405162461bcd60e51b815260040161049a9061579b565b82516001600160a01b0316600090815260d16020908152604080832082870151845290915290819020606085015160a0860151608087015193516301f974ab60e61b815273__$362a863f415d70a336820c809e07c78c48$__94637e5d2ac09461293d9490939092909190600401615949565b60006040518083038186803b15801561295557600080fd5b505af4158015612969573d6000803e3d6000fd5b505060cd54606086015160408088015160a0890151915163dd2c99f760e01b81526001600160a01b03909416955063dd2c99f794506129ad93909190600401614bcf565b600060405180830381600087803b1580156129c757600080fd5b505af11580156129db573d6000803e3d6000fd5b5050505082604001516001600160a01b031683600001516001600160a01b031684606001516001600160a01b03167fbfab88b861f171b7db714f00e5966131253918d55ddba816c3eb94657d10239086602001518760a00151604051612a42929190615976565b60405180910390a4505050565b612a57614225565b80513390612a65828261424f565b612a77836000015184602001516142d5565b612a935760405162461bcd60e51b815260040161049a90614c75565b612a9b61442f565b612aad84600001518560200151610f7c565b50509050612abe8160000151614302565b15612b715760008160000151600081518110612ad657fe5b60200260200101519050806001600160a01b031663ade6e2aa6040518163ffffffff1660e01b815260040160206040518083038186803b158015612b1957600080fd5b505afa158015612b2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5191906149dc565b4210612b6f5760405162461bcd60e51b815260040161049a906156a6565b505b83516001600160a01b0316600090815260d16020908152604080832082880151845290915290819020606086015160a087015160808801519351630380bfdd60e61b815273__$362a863f415d70a336820c809e07c78c48$__9463e02ff74094612be49490939092909190600401615949565b60006040518083038186803b158015612bfc57600080fd5b505af4158015612c10573d6000803e3d6000fd5b505060cd54606087015160408089015160a08a0151915163fa93b2a560e01b81526001600160a01b03909416955063fa93b2a59450612c5493909190600401614bcf565b600060405180830381600087803b158015612c6e57600080fd5b505af1158015612c82573d6000803e3d6000fd5b5050505083604001516001600160a01b031684600001516001600160a01b031685606001516001600160a01b03167ffe86f7694b6c54a528acbe27be61dd4a85e9a89aeef7f650a1b439045ccee5a487602001518860a00151604051612496929190615976565b612cf16144f0565b60018251600a811115612d0057fe5b14612d1d5760405162461bcd60e51b815260040161049a90614c93565b60208201516001600160a01b03166120ec5760405162461bcd60e51b815260040161049a9061503b565b612d4f614225565b80513390612d5d828261424f565b612d6f836000015184602001516142d5565b612d8b5760405162461bcd60e51b815260040161049a90614c75565b60ca5460608401516040516302328d7360e31b81526001600160a01b03909216916311946b9891612dbe91600401614b76565b60206040518083038186803b158015612dd657600080fd5b505afa158015612dea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0e919061498a565b612e2a5760405162461bcd60e51b815260040161049a906153b6565b600083606001519050806001600160a01b031663ade6e2aa6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e6c57600080fd5b505afa158015612e80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea491906149dc565b4210612ec25760405162461bcd60e51b815260040161049a906151c2565b83516001600160a01b0316600090815260d16020908152604080832082880151845290915290819020606086015160a08701516080880151935163ef682c1b60e01b815273__$362a863f415d70a336820c809e07c78c48$__9463ef682c1b94612f359490939092909190600401615949565b60006040518083038186803b158015612f4d57600080fd5b505af4158015612f61573d6000803e3d6000fd5b50505060408086015160a0870151915163051b0a4160e41b81526001600160a01b03851693506351b0a41092612f9a9291600401614bb6565b600060405180830381600087803b158015612fb457600080fd5b505af1158015612fc8573d6000803e3d6000fd5b5050505083604001516001600160a01b031684600001516001600160a01b031685606001516001600160a01b03167f4d7f96086c92b2f9a254ad21548b1c1f2d99502c7949508866349b96bb1a8d8a87602001518860a00151604051612496929190615976565b6130376144f0565b60028251600a81111561304657fe5b146130635760405162461bcd60e51b815260040161049a906151e0565b60208201516001600160a01b03166120ec5760405162461bcd60e51b815260040161049a90615731565b613095614225565b805133906130a3828261424f565b6130b5836000015184602001516142d5565b6130d15760405162461bcd60e51b815260040161049a90614c75565b60408301516001600160a01b0316331480613105575082600001516001600160a01b031683604001516001600160a01b0316145b6131215760405162461bcd60e51b815260040161049a90614ef5565b600083606001519050806001600160a01b031663ade6e2aa6040518163ffffffff1660e01b815260040160206040518083038186803b15801561316357600080fd5b505afa158015613177573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061319b91906149dc565b42106131b95760405162461bcd60e51b815260040161049a9061537a565b83516001600160a01b0316600090815260d16020908152604080832082880151845290915290819020606086015160a087015160808801519351637b5c283560e01b815273__$362a863f415d70a336820c809e07c78c48$__94637b5c28359461322c9490939092909190600401615949565b60006040518083038186803b15801561324457600080fd5b505af4158015613258573d6000803e3d6000fd5b50505060408086015160a087015191516356d878f760e01b81526001600160a01b03851693506356d878f7926132919291600401614bb6565b600060405180830381600087803b1580156132ab57600080fd5b505af11580156132bf573d6000803e3d6000fd5b5050505083604001516001600160a01b031684600001516001600160a01b031685606001516001600160a01b03167fdd96b18f26fd9950581b9fd821fa907fc318845fc4d220b825a7b19bfdd174e887602001518860a00151604051612496929190615976565b61332e614541565b60088251600a81111561333d57fe5b1461335a5760405162461bcd60e51b815260040161049a90614e49565b60408201516001600160a01b03166133845760405162461bcd60e51b815260040161049a9061580d565b506040805160608082018352838301516001600160a01b0390811683529084015116602082015260a0909201519082015290565b602081015160ca546040516302328d7360e31b81526001600160a01b03909116906311946b98906133ed908490600401614b76565b60206040518083038186803b15801561340557600080fd5b505afa158015613419573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061343d919061498a565b6134595760405162461bcd60e51b815260040161049a90615578565b600080600080846001600160a01b031663af0968fc6040518163ffffffff1660e01b815260040160c06040518083038186803b15801561349857600080fd5b505afa1580156134ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134d09190614739565b50945050935093509350804210156134fa5760405162461bcd60e51b815260040161049a906156c4565b613506838386846108cd565b6135225760405162461bcd60e51b815260040161049a90615263565b600061353687602001518860400151610631565b9050856001600160a01b03166356d878f73389604001516040518363ffffffff1660e01b815260040161356a929190614bb6565b600060405180830381600087803b15801561358457600080fd5b505af1158015613598573d6000803e3d6000fd5b505060cd54895160405163fa93b2a560e01b81526001600160a01b03909216935063fa93b2a592506135d1918991908690600401614bcf565b600060405180830381600087803b1580156135eb57600080fd5b505af11580156135ff573d6000803e3d6000fd5b5050505086600001516001600160a01b0316336001600160a01b031688602001516001600160a01b03167f18fd144d7dbcbaa6f00fd47a84adc7dc3cc64a326ffa2dc7691a25e3837dba03888b604001518660405161366093929190614c1e565b60405180910390a450505050505050565b613679614541565b60078251600a81111561368857fe5b146136a55760405162461bcd60e51b815260040161049a90615486565b60208201516001600160a01b03166136cf5760405162461bcd60e51b815260040161049a90615327565b60408201516001600160a01b03166136f95760405162461bcd60e51b815260040161049a906155b4565b604051806060016040528083602001516001600160a01b031681526020018360800151815260200183604001516001600160a01b03168152509050919050565b80513390613747828261424f565b613759836000015184602001516142d5565b6137755760405162461bcd60e51b815260040161049a90614c75565b61377d61442f565b600061379185600001518660200151610f7c565b50915091506000806137a68460000151614302565b905060006137b78560200151614302565b905081806137c25750805b6137de5760405162461bcd60e51b815260040161049a90614d9a565b816138015784602001516000815181106137f457fe5b6020026020010151613817565b8451805160009061380e57fe5b60200260200101515b925080156138cb576000856020015160008151811061383257fe5b60200260200101519050806001600160a01b03166356d878f760cd60009054906101000a90046001600160a01b0316886080015160008151811061387257fe5b60200260200101516040518363ffffffff1660e01b8152600401613897929190614bb6565b600060405180830381600087803b1580156138b157600080fd5b505af11580156138c5573d6000803e3d6000fd5b50505050505b5050600080600080846001600160a01b031663af0968fc6040518163ffffffff1660e01b815260040160c06040518083038186803b15801561390c57600080fd5b505afa158015613920573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139449190614739565b509450509350935093508042101561396e5760405162461bcd60e51b815260040161049a90615415565b61397a838386846108cd565b6139965760405162461bcd60e51b815260040161049a90615263565b60cc5460405163cd43fbfb60e01b815260009182916001600160a01b039091169063cd43fbfb906139cd908c908c906004016158d3565b604080518083038186803b1580156139e457600080fd5b505afa1580156139f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a1c91906149f4565b9150915080613a3d5760405162461bcd60e51b815260040161049a90615169565b60d160008d600001516001600160a01b03166001600160a01b0316815260200190815260200160002060008d60200151815260200190815260200160002060008082016000613a8c9190614561565b613a9a600183016000614561565b613aa8600283016000614561565b613ab6600383016000614561565b613ac4600483016000614561565b613ad2600583016000614561565b505060cd546040808e0151905163fa93b2a560e01b81526001600160a01b039092169163fa93b2a591613b0c918a91908790600401614bcf565b600060405180830381600087803b158015613b2657600080fd5b505af1158015613b3a573d6000803e3d6000fd5b5050505060008c60200151905060008d60400151905089896001600160a01b03168f600001516001600160a01b03167f522cda7dd0677ee4c9512efd8aa92af93de64b4c2fe2f8bfe7a9234a655a9bf5848887604051613b9c93929190614c1e565b60405180910390a45050505050505050505050505050565b613bbc61457f565b600a8251600a811115613bcb57fe5b14613be85760405162461bcd60e51b815260040161049a90615662565b60208201516001600160a01b0316613c125760405162461bcd60e51b815260040161049a90615859565b60408201516001600160a01b0316613c3c5760405162461bcd60e51b815260040161049a906152d2565b8160e0015151602014613c615760405162461bcd60e51b815260040161049a90614cf1565b60008260e00151806020019051810190613c7b91906149dc565b90506040518060a0016040528084602001516001600160a01b0316815260200184604001516001600160a01b03168152602001846080015181526020018460a00151815260200182815250915050919050565b613cd6614225565b613ce8816000015182604001516142d5565b613d045760405162461bcd60e51b815260040161049a90614c75565b613d0c61442f565b6000806000613d28856000015186604001518760800151611c50565b935093509350935082613d4d5760405162461bcd60e51b815260040161049a90615609565b6000613d6e6305f5e1006106d085896060015161182390919063ffffffff16565b90506000613da187606001518760600151600081518110613d8b57fe5b602002602001015161434090919063ffffffff16565b1115613ddb5781613dbd828760a00151600081518110613d8b57fe5b1015613ddb5760405162461bcd60e51b815260040161049a906150a4565b84518051600090613de857fe5b60200260200101516001600160a01b03166356d878f73388606001516040518363ffffffff1660e01b8152600401613e21929190614bb6565b600060405180830381600087803b158015613e3b57600080fd5b505af1158015613e4f573d6000803e3d6000fd5b505087516001600160a01b0316600090815260d160209081526040808320818c0151845290915280822090890151805173__$362a863f415d70a336820c809e07c78c48$__955063e02ff740945091929091613ea757fe5b60200260200101518460006040518563ffffffff1660e01b8152600401613ed19493929190615949565b60006040518083038186803b158015613ee957600080fd5b505af4158015613efd573d6000803e3d6000fd5b505087516001600160a01b0316600090815260d160209081526040808320818c0151845290915281208851805173__$362a863f415d70a336820c809e07c78c48$",
  "libraries": {
    "MarginVault": "0xc6e7DF5E7b4f2A278906862b61205850344D4e7d"
  },
  "devdoc": {
    "author": "Opyn Team",
    "methods": {
      "donate(address,uint256)": {
        "details": "use donate() instead of direct transfer() to store the balance in assetBalance",
        "params": {
          "_amount": "amount to donate to pool",
          "_asset": "asset address"
        }
      },
      "getAccountVaultCounter(address)": {
        "params": {
          "_accountOwner": "account owner address"
        },
        "returns": {
          "_0": "number of vaults"
        }
      },
      "getConfiguration()": {
        "returns": {
          "_0": "whitelist, the address of the whitelist module",
          "_1": "oracle, the address of the oracle module",
          "_2": "calculator, the address of the calculator module",
          "_3": "pool, the address of the pool module"
        }
      },
      "getPayout(address,uint256)": {
        "params": {
          "_amount": "amount of the oToken to calculate the payout for, always represented in 1e8",
          "_otoken": "oToken address"
        },
        "returns": {
          "_0": "amount of collateral to pay out"
        }
      },
      "getProceed(address,uint256)": {
        "params": {
          "_owner": "account owner of the vault",
          "_vaultId": "vaultId to return balances for"
        },
        "returns": {
          "_0": "amount of collateral that can be taken out"
        }
      },
      "getVault(address,uint256)": {
        "params": {
          "_owner": "account owner",
          "_vaultId": "vault id of vault to return"
        },
        "returns": {
          "_0": "Vault struct that corresponds to the _vaultId of _owner, vault type and the latest timestamp when the vault was updated"
        }
      },
      "hasExpired(address)": {
        "params": {
          "_otoken": "oToken address"
        },
        "returns": {
          "_0": "True if the otoken has expired, False if not"
        }
      },
      "initialize(address,address)": {
        "params": {
          "_addressBook": "addressbook module",
          "_owner": "account owner address"
        }
      },
      "isLiquidatable(address,uint256,uint256)": {
        "params": {
          "_owner": "vault owner address",
          "_roundId": "chainlink round id to check vault status at",
          "_vaultId": "vault id to check"
        },
        "returns": {
          "_0": "isUnderCollat, true if vault is undercollateralized, the price of 1 repaid otoken and the otoken collateral dust amount"
        }
      },
      "isOperator(address,address)": {
        "params": {
          "_operator": "account operator address",
          "_owner": "account owner address"
        },
        "returns": {
          "_0": "True if the _operator is an approved operator for the _owner account"
        }
      },
      "isSettlementAllowed(address,address,address,uint256)": {
        "details": "return if an expired oToken is ready to be settled, only true when price for underlying, strike and collateral assets at this specific expiry is available in our Oracle module",
        "params": {
          "_collateral": "oToken collateral asset",
          "_expiry": "otoken expiry timestamp",
          "_strike": "oToken strike asset",
          "_underlying": "oToken underlying asset"
        },
        "returns": {
          "_0": "True if the oToken has expired AND all oracle prices at the expiry timestamp have been finalized, False if not"
        }
      },
      "operate((uint8,address,address,address,uint256,uint256,uint256,bytes)[])": {
        "details": "can only be called when the system is not fully paused",
        "params": {
          "_actions": "array of actions arguments"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "refreshConfiguration()": {
        "details": "updates the configuration of the controller. can only be called by the owner"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCallRestriction(bool)": {
        "details": "can only be called by the owner",
        "params": {
          "_isRestricted": "new call restriction state"
        }
      },
      "setFullPauser(address)": {
        "details": "can only be called by the owner",
        "params": {
          "_fullPauser": "new fullPauser address"
        }
      },
      "setOperator(address,bool)": {
        "details": "can only be updated by the vault owner",
        "params": {
          "_isOperator": "new boolean value that expresses if the sender is giving or revoking privileges for _operator",
          "_operator": "operator that the sender wants to give privileges to or revoke them from"
        }
      },
      "setPartialPauser(address)": {
        "details": "can only be called by the owner",
        "params": {
          "_partialPauser": "new partialPauser address"
        }
      },
      "setSystemFullyPaused(bool)": {
        "details": "can only be called by the fullPauser",
        "params": {
          "_fullyPaused": "new boolean value to set systemFullyPaused to"
        }
      },
      "setSystemPartiallyPaused(bool)": {
        "details": "can only be called by the partialPauser",
        "params": {
          "_partiallyPaused": "new boolean value to set systemPartiallyPaused to"
        }
      },
      "sync(address,uint256)": {
        "details": "anyone can update the latest time the vault was touched by calling this function vaultLatestUpdate will sync if the vault is well collateralized",
        "params": {
          "_owner": "vault owner address",
          "_vaultId": "vault id"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "BASE": {
        "details": "scale used in MarginCalculator"
      },
      "accountVaultCounter": {
        "details": "mapping between an owner address and the number of owner address vaults"
      },
      "operators": {
        "details": "mapping between an account owner and their approved or unapproved account operators"
      },
      "vaultLatestUpdate": {
        "details": "mapping to store the timestamp at which the vault was last updated, will be updated in every action that changes the vault state or when calling sync()"
      },
      "vaultType": {
        "details": "mapping to map vault by each vault type, naked margin vault should be set to 1, spread/max loss vault should be set to 0"
      },
      "vaults": {
        "details": "mapping between an owner address and a specific vault using a vault id"
      }
    },
    "title": "Controller"
  },
  "userdoc": {
    "methods": {
      "callRestricted()": {
        "notice": "True if a call action can only be executed to a whitelisted callee"
      },
      "donate(address,uint256)": {
        "notice": "send asset amount to margin pool"
      },
      "fullPauser()": {
        "notice": "address that has permission to fully pause the system, where all system functionality is paused"
      },
      "getAccountVaultCounter(address)": {
        "notice": "get the number of vaults for a specified account owner"
      },
      "getConfiguration()": {
        "notice": "returns the current controller configuration"
      },
      "getPayout(address,uint256)": {
        "notice": "get an oToken's payout/cash value after expiry, in the collateral asset"
      },
      "getProceed(address,uint256)": {
        "notice": "return a vault's proceeds pre or post expiry, the amount of collateral that can be removed from a vault"
      },
      "getVault(address,uint256)": {
        "notice": "return a specific vault"
      },
      "hasExpired(address)": {
        "notice": "check if an oToken has expired"
      },
      "initialize(address,address)": {
        "notice": "initalize the deployed contract"
      },
      "isLiquidatable(address,uint256,uint256)": {
        "notice": "check if a vault is liquidatable in a specific round id"
      },
      "isOperator(address,address)": {
        "notice": "check if a specific address is an operator for an owner account"
      },
      "operate((uint8,address,address,address,uint256,uint256,uint256,bytes)[])": {
        "notice": "execute a number of actions on specific vaults"
      },
      "partialPauser()": {
        "notice": "address that has permission to partially pause the system, where system functionality is paused except redeem and settleVault"
      },
      "setCallRestriction(bool)": {
        "notice": "allows the owner to toggle the restriction on whitelisted call actions and only allow whitelisted call addresses or allow any arbitrary call addresses"
      },
      "setFullPauser(address)": {
        "notice": "allows the owner to set the fullPauser address"
      },
      "setOperator(address,bool)": {
        "notice": "allows a user to give or revoke privileges to an operator which can act on their behalf on their vaults"
      },
      "setPartialPauser(address)": {
        "notice": "allows the owner to set the partialPauser address"
      },
      "setSystemFullyPaused(bool)": {
        "notice": "allows the fullPauser to toggle the systemFullyPaused variable and fully pause or fully unpause the system"
      },
      "setSystemPartiallyPaused(bool)": {
        "notice": "allows the partialPauser to toggle the systemPartiallyPaused variable and partially pause or partially unpause the system"
      },
      "sync(address,uint256)": {
        "notice": "sync vault latest update timestamp"
      },
      "systemFullyPaused()": {
        "notice": "True if all system functionality is paused"
      },
      "systemPartiallyPaused()": {
        "notice": "True if all system functionality is paused other than redeem and settle vault"
      }
    },
    "notice": "Contract that controls the Gamma Protocol and the interaction of all sub contracts"
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14788,
        "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 14791,
        "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 14856,
        "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 14703,
        "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 14868,
        "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 14986,
        "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 15165,
        "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
        "label": "_notEntered",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 15206,
        "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 441,
        "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
        "label": "addressbook",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(AddressBookInterface)8874"
      },
      {
        "astId": 443,
        "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
        "label": "whitelist",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(WhitelistInterface)9468"
      },
      {
        "astId": 445,
        "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
        "label": "oracle",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(OracleInterface)9290"
      },
      {
        "astId": 447,
        "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
        "label": "calculator",
        "offset": 0,
        "slot": "204",
        "type": "t_contract(MarginCalculatorInterface)9077"
      },
      {
        "astId": 449,
        "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
        "label": "pool",
        "offset": 0,
        "slot": "205",
        "type": "t_contract(MarginPoolInterface)9153"
      },
      {
        "astId": 456,
        "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
        "label": "partialPauser",
        "offset": 0,
        "slot": "206",
        "type": "t_address"
      },
      {
        "astId": 459,
        "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
        "label": "fullPauser",
        "offset": 0,
        "slot": "207",
        "type": "t_address"
      },
      {
        "astId": 462,
        "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
        "label": "systemPartiallyPaused",
        "offset": 20,
        "slot": "207",
        "type": "t_bool"
      },
      {
        "astId": 465,
        "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
        "label": "systemFullyPaused",
        "offset": 21,
        "slot": "207",
        "type": "t_bool"
      },
      {
        "astId": 468,
        "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
        "label": "callRestricted",
        "offset": 22,
        "slot": "207",
        "type": "t_bool"
      },
      {
        "astId": 473,
        "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
        "label": "accountVaultCounter",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 480,
        "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
        "label": "vaults",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Vault)10611_storage))"
      },
      {
        "astId": 487,
        "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
        "label": "operators",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 494,
        "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
        "label": "vaultType",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 501,
        "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
        "label": "vaultLatestUpdate",
        "offset": 0,
        "slot": "212",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AddressBookInterface)8874": {
        "encoding": "inplace",
        "label": "contract AddressBookInterface",
        "numberOfBytes": "20"
      },
      "t_contract(MarginCalculatorInterface)9077": {
        "encoding": "inplace",
        "label": "contract MarginCalculatorInterface",
        "numberOfBytes": "20"
      },
      "t_contract(MarginPoolInterface)9153": {
        "encoding": "inplace",
        "label": "contract MarginPoolInterface",
        "numberOfBytes": "20"
      },
      "t_contract(OracleInterface)9290": {
        "encoding": "inplace",
        "label": "contract OracleInterface",
        "numberOfBytes": "20"
      },
      "t_contract(WhitelistInterface)9468": {
        "encoding": "inplace",
        "label": "contract WhitelistInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Vault)10611_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct MarginVault.Vault))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Vault)10611_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Vault)10611_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MarginVault.Vault)",
        "numberOfBytes": "32",
        "value": "t_struct(Vault)10611_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Vault)10611_storage": {
        "encoding": "inplace",
        "label": "struct MarginVault.Vault",
        "members": [
          {
            "astId": 10595,
            "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
            "label": "shortOtokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 10598,
            "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
            "label": "longOtokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 10601,
            "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
            "label": "collateralAssets",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 10604,
            "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
            "label": "shortAmounts",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 10607,
            "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
            "label": "longAmounts",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 10610,
            "contract": "contracts/GammaProtocol/core/Controller.sol:Controller",
            "label": "collateralAmounts",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}